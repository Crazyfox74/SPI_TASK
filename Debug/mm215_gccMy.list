
mm215_gccMy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e24  08003e24  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08003e24  08003e24  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e24  08003e24  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  200000b4  08003ee0  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd0  08003ee0  00024cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012572  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf9  00000000  00000000  00032656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009e0a  00000000  00000000  0003534f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0003f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e10  00000000  00000000  0003f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001569b  00000000  00000000  000407f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3c6  00000000  00000000  00055e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000828fd  00000000  00000000  00065259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e7b56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000205c  00000000  00000000  000e7ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  000e9c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  000e9ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d14 	.word	0x08003d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	08003d14 	.word	0x08003d14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000270:	f100 0308 	add.w	r3, r0, #8
 8000274:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000276:	f04f 32ff 	mov.w	r2, #4294967295
 800027a:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800027c:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800027e:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000280:	2300      	movs	r3, #0
 8000282:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000284:	4770      	bx	lr

08000286 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000286:	2300      	movs	r3, #0
 8000288:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800028a:	4770      	bx	lr

0800028c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800028c:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800028e:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000290:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000294:	d011      	beq.n	80002ba <vListInsert+0x2e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000296:	f100 0308 	add.w	r3, r0, #8
 800029a:	461c      	mov	r4, r3
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	42aa      	cmp	r2, r5
 80002a2:	d9fa      	bls.n	800029a <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002a4:	6863      	ldr	r3, [r4, #4]
 80002a6:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002a8:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002aa:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80002ac:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002ae:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 80002b0:	6803      	ldr	r3, [r0, #0]
 80002b2:	3301      	adds	r3, #1
 80002b4:	6003      	str	r3, [r0, #0]
}
 80002b6:	bc30      	pop	{r4, r5}
 80002b8:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 80002ba:	6904      	ldr	r4, [r0, #16]
 80002bc:	e7f2      	b.n	80002a4 <vListInsert+0x18>

080002be <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002be:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002c0:	6841      	ldr	r1, [r0, #4]
 80002c2:	6882      	ldr	r2, [r0, #8]
 80002c4:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002c6:	6841      	ldr	r1, [r0, #4]
 80002c8:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	4282      	cmp	r2, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002ce:	bf04      	itt	eq
 80002d0:	6882      	ldreq	r2, [r0, #8]
 80002d2:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002d4:	2200      	movs	r2, #0
 80002d6:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	3a01      	subs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002de:	6818      	ldr	r0, [r3, #0]
}
 80002e0:	4770      	bx	lr

080002e2 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80002e6:	f001 fbe5 	bl	8001ab4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80002ea:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80002ec:	f001 fc04 	bl	8001af8 <vPortExitCritical>

    return xReturn;
}
 80002f0:	fab4 f084 	clz	r0, r4
 80002f4:	0940      	lsrs	r0, r0, #5
 80002f6:	bd10      	pop	{r4, pc}

080002f8 <prvCopyDataToQueue>:
{
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4604      	mov	r4, r0
 80002fc:	4615      	mov	r5, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80002fe:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000300:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000302:	b95a      	cbnz	r2, 800031c <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	b11b      	cbz	r3, 8000310 <prvCopyDataToQueue+0x18>
    BaseType_t xReturn = pdFALSE;
 8000308:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800030a:	3601      	adds	r6, #1
 800030c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800030e:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000310:	6880      	ldr	r0, [r0, #8]
 8000312:	f001 f965 	bl	80015e0 <xTaskPriorityDisinherit>
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000316:	2300      	movs	r3, #0
 8000318:	60a3      	str	r3, [r4, #8]
 800031a:	e7f6      	b.n	800030a <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
 800031c:	b96d      	cbnz	r5, 800033a <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800031e:	6840      	ldr	r0, [r0, #4]
 8000320:	f002 fd24 	bl	8002d6c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000324:	6863      	ldr	r3, [r4, #4]
 8000326:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000328:	4413      	add	r3, r2
 800032a:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800032c:	68a2      	ldr	r2, [r4, #8]
 800032e:	4293      	cmp	r3, r2
 8000330:	d319      	bcc.n	8000366 <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000332:	6823      	ldr	r3, [r4, #0]
 8000334:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8000336:	4628      	mov	r0, r5
 8000338:	e7e7      	b.n	800030a <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800033a:	68c0      	ldr	r0, [r0, #12]
 800033c:	f002 fd16 	bl	8002d6c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000340:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000342:	4251      	negs	r1, r2
 8000344:	68e3      	ldr	r3, [r4, #12]
 8000346:	1a9b      	subs	r3, r3, r2
 8000348:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800034a:	6822      	ldr	r2, [r4, #0]
 800034c:	4293      	cmp	r3, r2
 800034e:	d202      	bcs.n	8000356 <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000350:	68a3      	ldr	r3, [r4, #8]
 8000352:	440b      	add	r3, r1
 8000354:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8000356:	2d02      	cmp	r5, #2
 8000358:	d001      	beq.n	800035e <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
 800035a:	2000      	movs	r0, #0
 800035c:	e7d5      	b.n	800030a <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800035e:	b126      	cbz	r6, 800036a <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
 8000360:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 8000362:	2000      	movs	r0, #0
 8000364:	e7d1      	b.n	800030a <prvCopyDataToQueue+0x12>
 8000366:	4628      	mov	r0, r5
 8000368:	e7cf      	b.n	800030a <prvCopyDataToQueue+0x12>
 800036a:	2000      	movs	r0, #0
 800036c:	e7cd      	b.n	800030a <prvCopyDataToQueue+0x12>

0800036e <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 800036e:	b570      	push	{r4, r5, r6, lr}
 8000370:	b082      	sub	sp, #8
 8000372:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8000374:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8000376:	b164      	cbz	r4, 8000392 <prvNotifyQueueSetContainer+0x24>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8000378:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800037a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800037c:	429a      	cmp	r2, r3
 800037e:	d311      	bcc.n	80003a4 <prvNotifyQueueSetContainer+0x36>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000384:	f383 8811 	msr	BASEPRI, r3
 8000388:	f3bf 8f6f 	isb	sy
 800038c:	f3bf 8f4f 	dsb	sy
 8000390:	e7fe      	b.n	8000390 <prvNotifyQueueSetContainer+0x22>
 8000392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000396:	f383 8811 	msr	BASEPRI, r3
 800039a:	f3bf 8f6f 	isb	sy
 800039e:	f3bf 8f4f 	dsb	sy
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 80003a2:	e7fe      	b.n	80003a2 <prvNotifyQueueSetContainer+0x34>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80003a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d803      	bhi.n	80003b2 <prvNotifyQueueSetContainer+0x44>
        BaseType_t xReturn = pdFALSE;
 80003aa:	2500      	movs	r5, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
 80003ac:	4628      	mov	r0, r5
 80003ae:	b002      	add	sp, #8
 80003b0:	bd70      	pop	{r4, r5, r6, pc}
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80003b2:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 80003b6:	b276      	sxtb	r6, r6
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80003b8:	2200      	movs	r2, #0
 80003ba:	a901      	add	r1, sp, #4
 80003bc:	4620      	mov	r0, r4
 80003be:	f7ff ff9b 	bl	80002f8 <prvCopyDataToQueue>
 80003c2:	4605      	mov	r5, r0
            if( cTxLock == queueUNLOCKED )
 80003c4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80003c8:	d006      	beq.n	80003d8 <prvNotifyQueueSetContainer+0x6a>
                configASSERT( cTxLock != queueINT8_MAX );
 80003ca:	2e7f      	cmp	r6, #127	; 0x7f
 80003cc:	d00f      	beq.n	80003ee <prvNotifyQueueSetContainer+0x80>
                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80003ce:	1c73      	adds	r3, r6, #1
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80003d6:	e7e9      	b.n	80003ac <prvNotifyQueueSetContainer+0x3e>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80003d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0e6      	beq.n	80003ac <prvNotifyQueueSetContainer+0x3e>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80003de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80003e2:	f001 f813 	bl	800140c <xTaskRemoveFromEventList>
                        xReturn = pdTRUE;
 80003e6:	2800      	cmp	r0, #0
 80003e8:	bf18      	it	ne
 80003ea:	2501      	movne	r5, #1
 80003ec:	e7de      	b.n	80003ac <prvNotifyQueueSetContainer+0x3e>
 80003ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003f2:	f383 8811 	msr	BASEPRI, r3
 80003f6:	f3bf 8f6f 	isb	sy
 80003fa:	f3bf 8f4f 	dsb	sy
                configASSERT( cTxLock != queueINT8_MAX );
 80003fe:	e7fe      	b.n	80003fe <prvNotifyQueueSetContainer+0x90>

08000400 <prvCopyDataFromQueue>:
{
 8000400:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000402:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000404:	b16a      	cbz	r2, 8000422 <prvCopyDataFromQueue+0x22>
{
 8000406:	b510      	push	{r4, lr}
 8000408:	4608      	mov	r0, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800040a:	68d9      	ldr	r1, [r3, #12]
 800040c:	4411      	add	r1, r2
 800040e:	60d9      	str	r1, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000410:	689c      	ldr	r4, [r3, #8]
 8000412:	42a1      	cmp	r1, r4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000414:	bf24      	itt	cs
 8000416:	6819      	ldrcs	r1, [r3, #0]
 8000418:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800041a:	68d9      	ldr	r1, [r3, #12]
 800041c:	f002 fca6 	bl	8002d6c <memcpy>
}
 8000420:	bd10      	pop	{r4, pc}
 8000422:	4770      	bx	lr

08000424 <prvUnlockQueue>:
{
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
 8000428:	f001 fb44 	bl	8001ab4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800042c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8000430:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000432:	2c00      	cmp	r4, #0
 8000434:	dd19      	ble.n	800046a <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000436:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800043a:	e008      	b.n	800044e <prvUnlockQueue+0x2a>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800043c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800043e:	b1a3      	cbz	r3, 800046a <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000440:	4630      	mov	r0, r6
 8000442:	f000 ffe3 	bl	800140c <xTaskRemoveFromEventList>
 8000446:	b968      	cbnz	r0, 8000464 <prvUnlockQueue+0x40>
            --cTxLock;
 8000448:	3c01      	subs	r4, #1
 800044a:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800044c:	b16c      	cbz	r4, 800046a <prvUnlockQueue+0x46>
                    if( pxQueue->pxQueueSetContainer != NULL )
 800044e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f3      	beq.n	800043c <prvUnlockQueue+0x18>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8000454:	4628      	mov	r0, r5
 8000456:	f7ff ff8a 	bl	800036e <prvNotifyQueueSetContainer>
 800045a:	2800      	cmp	r0, #0
 800045c:	d0f4      	beq.n	8000448 <prvUnlockQueue+0x24>
                            vTaskMissedYield();
 800045e:	f001 f8a9 	bl	80015b4 <vTaskMissedYield>
 8000462:	e7f1      	b.n	8000448 <prvUnlockQueue+0x24>
                                vTaskMissedYield();
 8000464:	f001 f8a6 	bl	80015b4 <vTaskMissedYield>
 8000468:	e7ee      	b.n	8000448 <prvUnlockQueue+0x24>
        pxQueue->cTxLock = queueUNLOCKED;
 800046a:	23ff      	movs	r3, #255	; 0xff
 800046c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
 8000470:	f001 fb42 	bl	8001af8 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000474:	f001 fb1e 	bl	8001ab4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000478:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800047c:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800047e:	2c00      	cmp	r4, #0
 8000480:	dd0f      	ble.n	80004a2 <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000482:	f105 0610 	add.w	r6, r5, #16
 8000486:	e002      	b.n	800048e <prvUnlockQueue+0x6a>
                --cRxLock;
 8000488:	3c01      	subs	r4, #1
 800048a:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800048c:	b14c      	cbz	r4, 80004a2 <prvUnlockQueue+0x7e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800048e:	692b      	ldr	r3, [r5, #16]
 8000490:	b13b      	cbz	r3, 80004a2 <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000492:	4630      	mov	r0, r6
 8000494:	f000 ffba 	bl	800140c <xTaskRemoveFromEventList>
 8000498:	2800      	cmp	r0, #0
 800049a:	d0f5      	beq.n	8000488 <prvUnlockQueue+0x64>
                    vTaskMissedYield();
 800049c:	f001 f88a 	bl	80015b4 <vTaskMissedYield>
 80004a0:	e7f2      	b.n	8000488 <prvUnlockQueue+0x64>
        pxQueue->cRxLock = queueUNLOCKED;
 80004a2:	23ff      	movs	r3, #255	; 0xff
 80004a4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
 80004a8:	f001 fb26 	bl	8001af8 <vPortExitCritical>
}
 80004ac:	bd70      	pop	{r4, r5, r6, pc}

080004ae <xQueueGenericReset>:
{
 80004ae:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
 80004b0:	b180      	cbz	r0, 80004d4 <xQueueGenericReset+0x26>
 80004b2:	460d      	mov	r5, r1
 80004b4:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
 80004b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80004b8:	b11b      	cbz	r3, 80004c2 <xQueueGenericReset+0x14>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80004ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80004bc:	fba2 2303 	umull	r2, r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
 80004c0:	b18b      	cbz	r3, 80004e6 <xQueueGenericReset+0x38>
 80004c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004c6:	f383 8811 	msr	BASEPRI, r3
 80004ca:	f3bf 8f6f 	isb	sy
 80004ce:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 80004d2:	e7fe      	b.n	80004d2 <xQueueGenericReset+0x24>
 80004d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004d8:	f383 8811 	msr	BASEPRI, r3
 80004dc:	f3bf 8f6f 	isb	sy
 80004e0:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 80004e4:	e7fe      	b.n	80004e4 <xQueueGenericReset+0x36>
        taskENTER_CRITICAL();
 80004e6:	f001 fae5 	bl	8001ab4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004ea:	6822      	ldr	r2, [r4, #0]
 80004ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80004ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004f0:	fb01 f303 	mul.w	r3, r1, r3
 80004f4:	18d0      	adds	r0, r2, r3
 80004f6:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80004f8:	2000      	movs	r0, #0
 80004fa:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80004fc:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004fe:	1a5b      	subs	r3, r3, r1
 8000500:	4413      	add	r3, r2
 8000502:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000504:	23ff      	movs	r3, #255	; 0xff
 8000506:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800050a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 800050e:	b9b5      	cbnz	r5, 800053e <xQueueGenericReset+0x90>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000510:	6923      	ldr	r3, [r4, #16]
 8000512:	b91b      	cbnz	r3, 800051c <xQueueGenericReset+0x6e>
        taskEXIT_CRITICAL();
 8000514:	f001 faf0 	bl	8001af8 <vPortExitCritical>
}
 8000518:	2001      	movs	r0, #1
 800051a:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800051c:	f104 0010 	add.w	r0, r4, #16
 8000520:	f000 ff74 	bl	800140c <xTaskRemoveFromEventList>
 8000524:	2800      	cmp	r0, #0
 8000526:	d0f5      	beq.n	8000514 <xQueueGenericReset+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
 8000528:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800052c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000530:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000534:	f3bf 8f4f 	dsb	sy
 8000538:	f3bf 8f6f 	isb	sy
 800053c:	e7ea      	b.n	8000514 <xQueueGenericReset+0x66>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800053e:	f104 0010 	add.w	r0, r4, #16
 8000542:	f7ff fe95 	bl	8000270 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000546:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800054a:	f7ff fe91 	bl	8000270 <vListInitialise>
 800054e:	e7e1      	b.n	8000514 <xQueueGenericReset+0x66>

08000550 <xQueueGenericCreateStatic>:
        configASSERT( pxStaticQueue );
 8000550:	b173      	cbz	r3, 8000570 <xQueueGenericCreateStatic+0x20>
    {
 8000552:	b510      	push	{r4, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	461c      	mov	r4, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000558:	b108      	cbz	r0, 800055e <xQueueGenericCreateStatic+0xe>
            ( pxStaticQueue != NULL ) &&
 800055a:	b192      	cbz	r2, 8000582 <xQueueGenericCreateStatic+0x32>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800055c:	b9f1      	cbnz	r1, 800059c <xQueueGenericCreateStatic+0x4c>
 800055e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000562:	f383 8811 	msr	BASEPRI, r3
 8000566:	f3bf 8f6f 	isb	sy
 800056a:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 800056e:	e7fe      	b.n	800056e <xQueueGenericCreateStatic+0x1e>
 8000570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000574:	f383 8811 	msr	BASEPRI, r3
 8000578:	f3bf 8f6f 	isb	sy
 800057c:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticQueue );
 8000580:	e7fe      	b.n	8000580 <xQueueGenericCreateStatic+0x30>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8000582:	2900      	cmp	r1, #0
 8000584:	d1eb      	bne.n	800055e <xQueueGenericCreateStatic+0xe>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8000586:	2354      	movs	r3, #84	; 0x54
 8000588:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800058a:	9b01      	ldr	r3, [sp, #4]
 800058c:	2b54      	cmp	r3, #84	; 0x54
 800058e:	d10a      	bne.n	80005a6 <xQueueGenericCreateStatic+0x56>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8000590:	9b01      	ldr	r3, [sp, #4]
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000592:	2301      	movs	r3, #1
 8000594:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000598:	4622      	mov	r2, r4
 800059a:	e011      	b.n	80005c0 <xQueueGenericCreateStatic+0x70>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 800059c:	2354      	movs	r3, #84	; 0x54
 800059e:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80005a0:	9b01      	ldr	r3, [sp, #4]
 80005a2:	2b54      	cmp	r3, #84	; 0x54
 80005a4:	d008      	beq.n	80005b8 <xQueueGenericCreateStatic+0x68>
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	e7fe      	b.n	80005b6 <xQueueGenericCreateStatic+0x66>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80005b8:	9b01      	ldr	r3, [sp, #4]
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80005ba:	2301      	movs	r3, #1
 80005bc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 80005c0:	6022      	str	r2, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
 80005c2:	63e0      	str	r0, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005c4:	6421      	str	r1, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005c6:	2101      	movs	r1, #1
 80005c8:	4620      	mov	r0, r4
 80005ca:	f7ff ff70 	bl	80004ae <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 80005ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80005d2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            pxNewQueue->pxQueueSetContainer = NULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	64a3      	str	r3, [r4, #72]	; 0x48
    }
 80005da:	4620      	mov	r0, r4
 80005dc:	b002      	add	sp, #8
 80005de:	bd10      	pop	{r4, pc}

080005e0 <xQueueGenericCreate>:
    {
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005e2:	b150      	cbz	r0, 80005fa <xQueueGenericCreate+0x1a>
 80005e4:	460d      	mov	r5, r1
 80005e6:	4614      	mov	r4, r2
 80005e8:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005ea:	fba0 2301 	umull	r2, r3, r0, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005ee:	b923      	cbnz	r3, 80005fa <xQueueGenericCreate+0x1a>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80005f0:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005f4:	f110 0f55 	cmn.w	r0, #85	; 0x55
 80005f8:	d908      	bls.n	800060c <xQueueGenericCreate+0x2c>
 80005fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fe:	f383 8811 	msr	BASEPRI, r3
 8000602:	f3bf 8f6f 	isb	sy
 8000606:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 800060a:	e7fe      	b.n	800060a <xQueueGenericCreate+0x2a>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800060c:	3054      	adds	r0, #84	; 0x54
 800060e:	f001 fba1 	bl	8001d54 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8000612:	4607      	mov	r7, r0
 8000614:	b180      	cbz	r0, 8000638 <xQueueGenericCreate+0x58>
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000616:	2300      	movs	r3, #0
 8000618:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 800061c:	b175      	cbz	r5, 800063c <xQueueGenericCreate+0x5c>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800061e:	f100 0354 	add.w	r3, r0, #84	; 0x54
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000622:	603b      	str	r3, [r7, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8000624:	63fe      	str	r6, [r7, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000626:	643d      	str	r5, [r7, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000628:	2101      	movs	r1, #1
 800062a:	4638      	mov	r0, r7
 800062c:	f7ff ff3f 	bl	80004ae <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 8000630:	f887 4050 	strb.w	r4, [r7, #80]	; 0x50
            pxNewQueue->pxQueueSetContainer = NULL;
 8000634:	2300      	movs	r3, #0
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
    }
 8000638:	4638      	mov	r0, r7
 800063a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800063c:	4603      	mov	r3, r0
 800063e:	e7f0      	b.n	8000622 <xQueueGenericCreate+0x42>

08000640 <xQueueGenericSend>:
{
 8000640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000644:	b085      	sub	sp, #20
 8000646:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 8000648:	b188      	cbz	r0, 800066e <xQueueGenericSend+0x2e>
 800064a:	460e      	mov	r6, r1
 800064c:	461d      	mov	r5, r3
 800064e:	4604      	mov	r4, r0
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000650:	b1b1      	cbz	r1, 8000680 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000652:	2d02      	cmp	r5, #2
 8000654:	d120      	bne.n	8000698 <xQueueGenericSend+0x58>
 8000656:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000658:	2b01      	cmp	r3, #1
 800065a:	d01d      	beq.n	8000698 <xQueueGenericSend+0x58>
 800065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000660:	f383 8811 	msr	BASEPRI, r3
 8000664:	f3bf 8f6f 	isb	sy
 8000668:	f3bf 8f4f 	dsb	sy
 800066c:	e7fe      	b.n	800066c <xQueueGenericSend+0x2c>
 800066e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000672:	f383 8811 	msr	BASEPRI, r3
 8000676:	f3bf 8f6f 	isb	sy
 800067a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 800067e:	e7fe      	b.n	800067e <xQueueGenericSend+0x3e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000680:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0e5      	beq.n	8000652 <xQueueGenericSend+0x12>
 8000686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	e7fe      	b.n	8000696 <xQueueGenericSend+0x56>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000698:	f000 ff92 	bl	80015c0 <xTaskGetSchedulerState>
 800069c:	b950      	cbnz	r0, 80006b4 <xQueueGenericSend+0x74>
 800069e:	9b01      	ldr	r3, [sp, #4]
 80006a0:	b163      	cbz	r3, 80006bc <xQueueGenericSend+0x7c>
 80006a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	e7fe      	b.n	80006b2 <xQueueGenericSend+0x72>
 80006b4:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
 80006b8:	2700      	movs	r7, #0
 80006ba:	e050      	b.n	800075e <xQueueGenericSend+0x11e>
 80006bc:	f04f 0800 	mov.w	r8, #0
 80006c0:	e7fa      	b.n	80006b8 <xQueueGenericSend+0x78>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006c2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80006c4:	462a      	mov	r2, r5
 80006c6:	4631      	mov	r1, r6
 80006c8:	4620      	mov	r0, r4
 80006ca:	f7ff fe15 	bl	80002f8 <prvCopyDataToQueue>
                        if( pxQueue->pxQueueSetContainer != NULL )
 80006ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80006d0:	b1b3      	cbz	r3, 8000700 <xQueueGenericSend+0xc0>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80006d2:	2d02      	cmp	r5, #2
 80006d4:	f000 80a0 	beq.w	8000818 <xQueueGenericSend+0x1d8>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80006d8:	4620      	mov	r0, r4
 80006da:	f7ff fe48 	bl	800036e <prvNotifyQueueSetContainer>
 80006de:	b148      	cbz	r0, 80006f4 <xQueueGenericSend+0xb4>
                                queueYIELD_IF_USING_PREEMPTION();
 80006e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80006e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80006ec:	f3bf 8f4f 	dsb	sy
 80006f0:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80006f4:	f001 fa00 	bl	8001af8 <vPortExitCritical>
                return pdPASS;
 80006f8:	2001      	movs	r0, #1
}
 80006fa:	b005      	add	sp, #20
 80006fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000702:	b963      	cbnz	r3, 800071e <xQueueGenericSend+0xde>
                            else if( xYieldRequired != pdFALSE )
 8000704:	2800      	cmp	r0, #0
 8000706:	d0f5      	beq.n	80006f4 <xQueueGenericSend+0xb4>
                                queueYIELD_IF_USING_PREEMPTION();
 8000708:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800070c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000710:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000714:	f3bf 8f4f 	dsb	sy
 8000718:	f3bf 8f6f 	isb	sy
 800071c:	e7ea      	b.n	80006f4 <xQueueGenericSend+0xb4>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800071e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000722:	f000 fe73 	bl	800140c <xTaskRemoveFromEventList>
 8000726:	2800      	cmp	r0, #0
 8000728:	d0e4      	beq.n	80006f4 <xQueueGenericSend+0xb4>
                                    queueYIELD_IF_USING_PREEMPTION();
 800072a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800072e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000732:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000736:	f3bf 8f4f 	dsb	sy
 800073a:	f3bf 8f6f 	isb	sy
 800073e:	e7d9      	b.n	80006f4 <xQueueGenericSend+0xb4>
                    taskEXIT_CRITICAL();
 8000740:	f001 f9da 	bl	8001af8 <vPortExitCritical>
                    return errQUEUE_FULL;
 8000744:	2000      	movs	r0, #0
 8000746:	e7d8      	b.n	80006fa <xQueueGenericSend+0xba>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000748:	a802      	add	r0, sp, #8
 800074a:	f000 fed5 	bl	80014f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800074e:	e014      	b.n	800077a <xQueueGenericSend+0x13a>
                prvUnlockQueue( pxQueue );
 8000750:	4620      	mov	r0, r4
 8000752:	f7ff fe67 	bl	8000424 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000756:	f000 fcb9 	bl	80010cc <xTaskResumeAll>
 800075a:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
 800075e:	f001 f9a9 	bl	8001ab4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000762:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000764:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000766:	429a      	cmp	r2, r3
 8000768:	d3ab      	bcc.n	80006c2 <xQueueGenericSend+0x82>
 800076a:	2d02      	cmp	r5, #2
 800076c:	d04a      	beq.n	8000804 <xQueueGenericSend+0x1c4>
                if( xTicksToWait == ( TickType_t ) 0 )
 800076e:	9b01      	ldr	r3, [sp, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0e5      	beq.n	8000740 <xQueueGenericSend+0x100>
                else if( xEntryTimeSet == pdFALSE )
 8000774:	f1b8 0f00 	cmp.w	r8, #0
 8000778:	d0e6      	beq.n	8000748 <xQueueGenericSend+0x108>
        taskEXIT_CRITICAL();
 800077a:	f001 f9bd 	bl	8001af8 <vPortExitCritical>
        vTaskSuspendAll();
 800077e:	f000 fbbd 	bl	8000efc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000782:	f001 f997 	bl	8001ab4 <vPortEnterCritical>
 8000786:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800078a:	b252      	sxtb	r2, r2
 800078c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000790:	bf08      	it	eq
 8000792:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8000796:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800079a:	b252      	sxtb	r2, r2
 800079c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80007a0:	bf08      	it	eq
 80007a2:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80007a6:	f001 f9a7 	bl	8001af8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007aa:	a901      	add	r1, sp, #4
 80007ac:	a802      	add	r0, sp, #8
 80007ae:	f000 feaf 	bl	8001510 <xTaskCheckForTimeOut>
 80007b2:	bb00      	cbnz	r0, 80007f6 <xQueueGenericSend+0x1b6>
    taskENTER_CRITICAL();
 80007b4:	f001 f97e 	bl	8001ab4 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80007b8:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 80007bc:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
 80007c0:	f001 f99a 	bl	8001af8 <vPortExitCritical>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80007c4:	45c1      	cmp	r9, r8
 80007c6:	d1c3      	bne.n	8000750 <xQueueGenericSend+0x110>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80007c8:	9901      	ldr	r1, [sp, #4]
 80007ca:	f104 0010 	add.w	r0, r4, #16
 80007ce:	f000 fddb 	bl	8001388 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80007d2:	4620      	mov	r0, r4
 80007d4:	f7ff fe26 	bl	8000424 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80007d8:	f000 fc78 	bl	80010cc <xTaskResumeAll>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d1bc      	bne.n	800075a <xQueueGenericSend+0x11a>
                    portYIELD_WITHIN_API();
 80007e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80007e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	f3bf 8f6f 	isb	sy
 80007f4:	e7b1      	b.n	800075a <xQueueGenericSend+0x11a>
            prvUnlockQueue( pxQueue );
 80007f6:	4620      	mov	r0, r4
 80007f8:	f7ff fe14 	bl	8000424 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80007fc:	f000 fc66 	bl	80010cc <xTaskResumeAll>
            return errQUEUE_FULL;
 8000800:	2000      	movs	r0, #0
 8000802:	e77a      	b.n	80006fa <xQueueGenericSend+0xba>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000804:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000806:	2202      	movs	r2, #2
 8000808:	4631      	mov	r1, r6
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff fd74 	bl	80002f8 <prvCopyDataToQueue>
                        if( pxQueue->pxQueueSetContainer != NULL )
 8000810:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000812:	2b00      	cmp	r3, #0
 8000814:	f43f af74 	beq.w	8000700 <xQueueGenericSend+0xc0>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8000818:	2f00      	cmp	r7, #0
 800081a:	f47f af6b 	bne.w	80006f4 <xQueueGenericSend+0xb4>
 800081e:	e75b      	b.n	80006d8 <xQueueGenericSend+0x98>

08000820 <xQueueReceive>:
{
 8000820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000824:	b084      	sub	sp, #16
 8000826:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8000828:	b180      	cbz	r0, 800084c <xQueueReceive+0x2c>
 800082a:	460e      	mov	r6, r1
 800082c:	4604      	mov	r4, r0
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800082e:	b1b1      	cbz	r1, 800085e <xQueueReceive+0x3e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000830:	f000 fec6 	bl	80015c0 <xTaskGetSchedulerState>
 8000834:	b9f8      	cbnz	r0, 8000876 <xQueueReceive+0x56>
 8000836:	9b01      	ldr	r3, [sp, #4]
 8000838:	b30b      	cbz	r3, 800087e <xQueueReceive+0x5e>
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	e7fe      	b.n	800084a <xQueueReceive+0x2a>
 800084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000850:	f383 8811 	msr	BASEPRI, r3
 8000854:	f3bf 8f6f 	isb	sy
 8000858:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 800085c:	e7fe      	b.n	800085c <xQueueReceive+0x3c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800085e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0e5      	beq.n	8000830 <xQueueReceive+0x10>
 8000864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000868:	f383 8811 	msr	BASEPRI, r3
 800086c:	f3bf 8f6f 	isb	sy
 8000870:	f3bf 8f4f 	dsb	sy
 8000874:	e7fe      	b.n	8000874 <xQueueReceive+0x54>
 8000876:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
 800087a:	2700      	movs	r7, #0
 800087c:	e03b      	b.n	80008f6 <xQueueReceive+0xd6>
 800087e:	f04f 0800 	mov.w	r8, #0
 8000882:	e7fa      	b.n	800087a <xQueueReceive+0x5a>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000884:	4631      	mov	r1, r6
 8000886:	4620      	mov	r0, r4
 8000888:	f7ff fdba 	bl	8000400 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800088c:	3d01      	subs	r5, #1
 800088e:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000890:	6923      	ldr	r3, [r4, #16]
 8000892:	b92b      	cbnz	r3, 80008a0 <xQueueReceive+0x80>
                taskEXIT_CRITICAL();
 8000894:	f001 f930 	bl	8001af8 <vPortExitCritical>
                return pdPASS;
 8000898:	2001      	movs	r0, #1
}
 800089a:	b004      	add	sp, #16
 800089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008a0:	f104 0010 	add.w	r0, r4, #16
 80008a4:	f000 fdb2 	bl	800140c <xTaskRemoveFromEventList>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d0f3      	beq.n	8000894 <xQueueReceive+0x74>
                        queueYIELD_IF_USING_PREEMPTION();
 80008ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80008b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80008b8:	f3bf 8f4f 	dsb	sy
 80008bc:	f3bf 8f6f 	isb	sy
 80008c0:	e7e8      	b.n	8000894 <xQueueReceive+0x74>
                    taskEXIT_CRITICAL();
 80008c2:	f001 f919 	bl	8001af8 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80008c6:	2000      	movs	r0, #0
 80008c8:	e7e7      	b.n	800089a <xQueueReceive+0x7a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008ca:	a802      	add	r0, sp, #8
 80008cc:	f000 fe14 	bl	80014f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008d0:	e01c      	b.n	800090c <xQueueReceive+0xec>
                prvUnlockQueue( pxQueue );
 80008d2:	4620      	mov	r0, r4
 80008d4:	f7ff fda6 	bl	8000424 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80008d8:	f000 fbf8 	bl	80010cc <xTaskResumeAll>
 80008dc:	e009      	b.n	80008f2 <xQueueReceive+0xd2>
            prvUnlockQueue( pxQueue );
 80008de:	4620      	mov	r0, r4
 80008e0:	f7ff fda0 	bl	8000424 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80008e4:	f000 fbf2 	bl	80010cc <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008e8:	4620      	mov	r0, r4
 80008ea:	f7ff fcfa 	bl	80002e2 <prvIsQueueEmpty>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d146      	bne.n	8000980 <xQueueReceive+0x160>
 80008f2:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
 80008f6:	f001 f8dd 	bl	8001ab4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80008fa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d1c1      	bne.n	8000884 <xQueueReceive+0x64>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000900:	9b01      	ldr	r3, [sp, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0dd      	beq.n	80008c2 <xQueueReceive+0xa2>
                else if( xEntryTimeSet == pdFALSE )
 8000906:	f1b8 0f00 	cmp.w	r8, #0
 800090a:	d0de      	beq.n	80008ca <xQueueReceive+0xaa>
        taskEXIT_CRITICAL();
 800090c:	f001 f8f4 	bl	8001af8 <vPortExitCritical>
        vTaskSuspendAll();
 8000910:	f000 faf4 	bl	8000efc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000914:	f001 f8ce 	bl	8001ab4 <vPortEnterCritical>
 8000918:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800091c:	b25b      	sxtb	r3, r3
 800091e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000922:	bf08      	it	eq
 8000924:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8000928:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800092c:	b25b      	sxtb	r3, r3
 800092e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000932:	bf08      	it	eq
 8000934:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8000938:	f001 f8de 	bl	8001af8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800093c:	a901      	add	r1, sp, #4
 800093e:	a802      	add	r0, sp, #8
 8000940:	f000 fde6 	bl	8001510 <xTaskCheckForTimeOut>
 8000944:	2800      	cmp	r0, #0
 8000946:	d1ca      	bne.n	80008de <xQueueReceive+0xbe>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000948:	4620      	mov	r0, r4
 800094a:	f7ff fcca 	bl	80002e2 <prvIsQueueEmpty>
 800094e:	2800      	cmp	r0, #0
 8000950:	d0bf      	beq.n	80008d2 <xQueueReceive+0xb2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000952:	9901      	ldr	r1, [sp, #4]
 8000954:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000958:	f000 fd16 	bl	8001388 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800095c:	4620      	mov	r0, r4
 800095e:	f7ff fd61 	bl	8000424 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8000962:	f000 fbb3 	bl	80010cc <xTaskResumeAll>
 8000966:	2800      	cmp	r0, #0
 8000968:	d1c3      	bne.n	80008f2 <xQueueReceive+0xd2>
                    portYIELD_WITHIN_API();
 800096a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800096e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000972:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	e7b8      	b.n	80008f2 <xQueueReceive+0xd2>
                return errQUEUE_EMPTY;
 8000980:	2000      	movs	r0, #0
 8000982:	e78a      	b.n	800089a <xQueueReceive+0x7a>

08000984 <vQueueAddToRegistry>:
        configASSERT( xQueue );
 8000984:	b130      	cbz	r0, 8000994 <vQueueAddToRegistry+0x10>
    {
 8000986:	b430      	push	{r4, r5}
 8000988:	4604      	mov	r4, r0
        if( pcQueueName != NULL )
 800098a:	b309      	cbz	r1, 80009d0 <vQueueAddToRegistry+0x4c>
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <vQueueAddToRegistry+0x50>)
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800098e:	2000      	movs	r0, #0
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000990:	4602      	mov	r2, r0
 8000992:	e010      	b.n	80009b6 <vQueueAddToRegistry+0x32>
 8000994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000998:	f383 8811 	msr	BASEPRI, r3
 800099c:	f3bf 8f6f 	isb	sy
 80009a0:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 80009a4:	e7fe      	b.n	80009a4 <vQueueAddToRegistry+0x20>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80009a6:	480b      	ldr	r0, [pc, #44]	; (80009d4 <vQueueAddToRegistry+0x50>)
 80009a8:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
        if( pxEntryToWrite != NULL )
 80009ac:	e00e      	b.n	80009cc <vQueueAddToRegistry+0x48>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80009ae:	3201      	adds	r2, #1
 80009b0:	3308      	adds	r3, #8
 80009b2:	2a05      	cmp	r2, #5
 80009b4:	d009      	beq.n	80009ca <vQueueAddToRegistry+0x46>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80009b6:	685d      	ldr	r5, [r3, #4]
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	d0f4      	beq.n	80009a6 <vQueueAddToRegistry+0x22>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80009bc:	2800      	cmp	r0, #0
 80009be:	d1f6      	bne.n	80009ae <vQueueAddToRegistry+0x2a>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80009c0:	681d      	ldr	r5, [r3, #0]
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	bf08      	it	eq
 80009c6:	4618      	moveq	r0, r3
 80009c8:	e7f1      	b.n	80009ae <vQueueAddToRegistry+0x2a>
        if( pxEntryToWrite != NULL )
 80009ca:	b108      	cbz	r0, 80009d0 <vQueueAddToRegistry+0x4c>
            pxEntryToWrite->pcQueueName = pcQueueName;
 80009cc:	6001      	str	r1, [r0, #0]
            pxEntryToWrite->xHandle = xQueue;
 80009ce:	6044      	str	r4, [r0, #4]
    }
 80009d0:	bc30      	pop	{r4, r5}
 80009d2:	4770      	bx	lr
 80009d4:	200000d0 	.word	0x200000d0

080009d8 <vQueueWaitForMessageRestricted>:
    {
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	4604      	mov	r4, r0
 80009dc:	460d      	mov	r5, r1
 80009de:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
 80009e0:	f001 f868 	bl	8001ab4 <vPortEnterCritical>
 80009e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ee:	bf04      	itt	eq
 80009f0:	2300      	moveq	r3, #0
 80009f2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80009f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	bf04      	itt	eq
 8000a02:	2300      	moveq	r3, #0
 8000a04:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8000a08:	f001 f876 	bl	8001af8 <vPortExitCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a0e:	b11b      	cbz	r3, 8000a18 <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
 8000a10:	4620      	mov	r0, r4
 8000a12:	f7ff fd07 	bl	8000424 <prvUnlockQueue>
    }
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000a18:	4632      	mov	r2, r6
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000a20:	f000 fcca 	bl	80013b8 <vTaskPlaceOnEventListRestricted>
 8000a24:	e7f4      	b.n	8000a10 <vQueueWaitForMessageRestricted+0x38>
	...

08000a28 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <prvResetNextTaskUnblockTime+0x20>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b923      	cbnz	r3, 8000a3a <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <prvResetNextTaskUnblockTime+0x24>)
 8000a32:	f04f 32ff 	mov.w	r2, #4294967295
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	4770      	bx	lr
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000a3a:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <prvResetNextTaskUnblockTime+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <prvResetNextTaskUnblockTime+0x24>)
 8000a44:	601a      	str	r2, [r3, #0]
    }
}
 8000a46:	4770      	bx	lr
 8000a48:	200000fc 	.word	0x200000fc
 8000a4c:	200001b0 	.word	0x200001b0

08000a50 <prvInitialiseNewTask>:
{
 8000a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a54:	4607      	mov	r7, r0
 8000a56:	468a      	mov	sl, r1
 8000a58:	4698      	mov	r8, r3
 8000a5a:	9e08      	ldr	r6, [sp, #32]
 8000a5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000a5e:	0095      	lsls	r5, r2, #2
 8000a60:	462a      	mov	r2, r5
 8000a62:	21a5      	movs	r1, #165	; 0xa5
 8000a64:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000a66:	f002 f98f 	bl	8002d88 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000a6a:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
    if( pcName != NULL )
 8000a6e:	f1ba 0f00 	cmp.w	sl, #0
 8000a72:	d01a      	beq.n	8000aaa <prvInitialiseNewTask+0x5a>
 8000a74:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000a78:	f104 0333 	add.w	r3, r4, #51	; 0x33
 8000a7c:	f10a 0a09 	add.w	sl, sl, #9
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a80:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000a84:	f803 1f01 	strb.w	r1, [r3, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8000a88:	b109      	cbz	r1, 8000a8e <prvInitialiseNewTask+0x3e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a8a:	4552      	cmp	r2, sl
 8000a8c:	d1f8      	bne.n	8000a80 <prvInitialiseNewTask+0x30>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000a94:	2e04      	cmp	r6, #4
 8000a96:	d90c      	bls.n	8000ab2 <prvInitialiseNewTask+0x62>
 8000a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f3bf 8f6f 	isb	sy
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	e7fe      	b.n	8000aa8 <prvInitialiseNewTask+0x58>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8000ab0:	e7f0      	b.n	8000a94 <prvInitialiseNewTask+0x44>
    pxNewTCB->uxPriority = uxPriority;
 8000ab2:	62e6      	str	r6, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8000ab4:	64a6      	str	r6, [r4, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000ab6:	f04f 0a00 	mov.w	sl, #0
 8000aba:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000abe:	1d20      	adds	r0, r4, #4
 8000ac0:	f7ff fbe1 	bl	8000286 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000ac4:	f104 0018 	add.w	r0, r4, #24
 8000ac8:	f7ff fbdd 	bl	8000286 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000acc:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ace:	f1c6 0605 	rsb	r6, r6, #5
 8000ad2:	61a6      	str	r6, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000ad4:	6264      	str	r4, [r4, #36]	; 0x24
            pxNewTCB->pxTaskTag = NULL;
 8000ad6:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
            pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8000ada:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8000ade:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 8000ae2:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000ae6:	f8c4 a060 	str.w	sl, [r4, #96]	; 0x60
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000aea:	f884 a064 	strb.w	sl, [r4, #100]	; 0x64
            pxNewTCB->ucDelayAborted = pdFALSE;
 8000aee:	f884 a066 	strb.w	sl, [r4, #102]	; 0x66
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000af2:	3d04      	subs	r5, #4
 8000af4:	444d      	add	r5, r9
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000af6:	4642      	mov	r2, r8
 8000af8:	4639      	mov	r1, r7
 8000afa:	f025 0007 	bic.w	r0, r5, #7
 8000afe:	f000 ffb1 	bl	8001a64 <pxPortInitialiseStack>
 8000b02:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8000b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b06:	b103      	cbz	r3, 8000b0a <prvInitialiseNewTask+0xba>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000b08:	601c      	str	r4, [r3, #0]
}
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08000b10 <prvAddNewTaskToReadyList>:
{
 8000b10:	b570      	push	{r4, r5, r6, lr}
 8000b12:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000b14:	f000 ffce 	bl	8001ab4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8000b18:	4a37      	ldr	r2, [pc, #220]	; (8000bf8 <prvAddNewTaskToReadyList+0xe8>)
 8000b1a:	6813      	ldr	r3, [r2, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <prvAddNewTaskToReadyList+0xec>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d042      	beq.n	8000bae <prvAddNewTaskToReadyList+0x9e>
            if( xSchedulerRunning == pdFALSE )
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <prvAddNewTaskToReadyList+0xf0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	b93b      	cbnz	r3, 8000b3e <prvAddNewTaskToReadyList+0x2e>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <prvAddNewTaskToReadyList+0xec>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b36:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8000b38:	bf9c      	itt	ls
 8000b3a:	4b30      	ldrls	r3, [pc, #192]	; (8000bfc <prvAddNewTaskToReadyList+0xec>)
 8000b3c:	601c      	strls	r4, [r3, #0]
        uxTaskNumber++;
 8000b3e:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <prvAddNewTaskToReadyList+0xf4>)
 8000b40:	6813      	ldr	r3, [r2, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000b46:	6423      	str	r3, [r4, #64]	; 0x40
        prvAddTaskToReadyList( pxNewTCB );
 8000b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b4a:	492f      	ldr	r1, [pc, #188]	; (8000c08 <prvAddNewTaskToReadyList+0xf8>)
 8000b4c:	6808      	ldr	r0, [r1, #0]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	409a      	lsls	r2, r3
 8000b52:	4302      	orrs	r2, r0
 8000b54:	600a      	str	r2, [r1, #0]
 8000b56:	4a2d      	ldr	r2, [pc, #180]	; (8000c0c <prvAddNewTaskToReadyList+0xfc>)
 8000b58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	60a3      	str	r3, [r4, #8]
 8000b64:	6898      	ldr	r0, [r3, #8]
 8000b66:	60e0      	str	r0, [r4, #12]
 8000b68:	1d21      	adds	r1, r4, #4
 8000b6a:	6041      	str	r1, [r0, #4]
 8000b6c:	6099      	str	r1, [r3, #8]
 8000b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b70:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000b74:	0088      	lsls	r0, r1, #2
 8000b76:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8000b7a:	6161      	str	r1, [r4, #20]
 8000b7c:	5811      	ldr	r1, [r2, r0]
 8000b7e:	3101      	adds	r1, #1
 8000b80:	5011      	str	r1, [r2, r0]
    taskEXIT_CRITICAL();
 8000b82:	f000 ffb9 	bl	8001af8 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <prvAddNewTaskToReadyList+0xf0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	b17b      	cbz	r3, 8000bac <prvAddNewTaskToReadyList+0x9c>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <prvAddNewTaskToReadyList+0xec>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d209      	bcs.n	8000bac <prvAddNewTaskToReadyList+0x9c>
            taskYIELD_IF_USING_PREEMPTION();
 8000b98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ba0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	f3bf 8f6f 	isb	sy
}
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
            pxCurrentTCB = pxNewTCB;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <prvAddNewTaskToReadyList+0xec>)
 8000bb0:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000bb2:	6813      	ldr	r3, [r2, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d1c2      	bne.n	8000b3e <prvAddNewTaskToReadyList+0x2e>
 8000bb8:	4d14      	ldr	r5, [pc, #80]	; (8000c0c <prvAddNewTaskToReadyList+0xfc>)
 8000bba:	f105 0664 	add.w	r6, r5, #100	; 0x64
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	f7ff fb56 	bl	8000270 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000bc4:	3514      	adds	r5, #20
 8000bc6:	42b5      	cmp	r5, r6
 8000bc8:	d1f9      	bne.n	8000bbe <prvAddNewTaskToReadyList+0xae>
    vListInitialise( &xDelayedTaskList1 );
 8000bca:	4e11      	ldr	r6, [pc, #68]	; (8000c10 <prvAddNewTaskToReadyList+0x100>)
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f7ff fb4f 	bl	8000270 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000bd2:	4d10      	ldr	r5, [pc, #64]	; (8000c14 <prvAddNewTaskToReadyList+0x104>)
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f7ff fb4b 	bl	8000270 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000bda:	480f      	ldr	r0, [pc, #60]	; (8000c18 <prvAddNewTaskToReadyList+0x108>)
 8000bdc:	f7ff fb48 	bl	8000270 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8000be0:	480e      	ldr	r0, [pc, #56]	; (8000c1c <prvAddNewTaskToReadyList+0x10c>)
 8000be2:	f7ff fb45 	bl	8000270 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <prvAddNewTaskToReadyList+0x110>)
 8000be8:	f7ff fb42 	bl	8000270 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <prvAddNewTaskToReadyList+0x114>)
 8000bee:	601e      	str	r6, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <prvAddNewTaskToReadyList+0x118>)
 8000bf2:	601d      	str	r5, [r3, #0]
}
 8000bf4:	e7a3      	b.n	8000b3e <prvAddNewTaskToReadyList+0x2e>
 8000bf6:	bf00      	nop
 8000bf8:	20000170 	.word	0x20000170
 8000bfc:	200000f8 	.word	0x200000f8
 8000c00:	200001d0 	.word	0x200001d0
 8000c04:	2000017c 	.word	0x2000017c
 8000c08:	20000180 	.word	0x20000180
 8000c0c:	20000104 	.word	0x20000104
 8000c10:	20000184 	.word	0x20000184
 8000c14:	20000198 	.word	0x20000198
 8000c18:	200001bc 	.word	0x200001bc
 8000c1c:	200001e8 	.word	0x200001e8
 8000c20:	200001d4 	.word	0x200001d4
 8000c24:	200000fc 	.word	0x200000fc
 8000c28:	20000100 	.word	0x20000100

08000c2c <prvDeleteTCB>:
    {
 8000c2c:	b510      	push	{r4, lr}
 8000c2e:	4604      	mov	r4, r0
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8000c30:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8000c34:	b163      	cbz	r3, 8000c50 <prvDeleteTCB+0x24>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d011      	beq.n	8000c5e <prvDeleteTCB+0x32>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d00e      	beq.n	8000c5c <prvDeleteTCB+0x30>
 8000c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c42:	f383 8811 	msr	BASEPRI, r3
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	f3bf 8f4f 	dsb	sy
 8000c4e:	e7fe      	b.n	8000c4e <prvDeleteTCB+0x22>
                    vPortFreeStack( pxTCB->pxStack );
 8000c50:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8000c52:	f001 f92d 	bl	8001eb0 <vPortFree>
                    vPortFree( pxTCB );
 8000c56:	4620      	mov	r0, r4
 8000c58:	f001 f92a 	bl	8001eb0 <vPortFree>
    }
 8000c5c:	bd10      	pop	{r4, pc}
                    vPortFree( pxTCB );
 8000c5e:	f001 f927 	bl	8001eb0 <vPortFree>
 8000c62:	e7fb      	b.n	8000c5c <prvDeleteTCB+0x30>

08000c64 <prvIdleTask>:
{
 8000c64:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000c66:	4c15      	ldr	r4, [pc, #84]	; (8000cbc <prvIdleTask+0x58>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c68:	4f15      	ldr	r7, [pc, #84]	; (8000cc0 <prvIdleTask+0x5c>)
                    --uxCurrentNumberOfTasks;
 8000c6a:	4e16      	ldr	r6, [pc, #88]	; (8000cc4 <prvIdleTask+0x60>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000c6c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000cc8 <prvIdleTask+0x64>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	b1a3      	cbz	r3, 8000c9e <prvIdleTask+0x3a>
                taskENTER_CRITICAL();
 8000c74:	f000 ff1e 	bl	8001ab4 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c7c:	1d28      	adds	r0, r5, #4
 8000c7e:	f7ff fb1e 	bl	80002be <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000c82:	6833      	ldr	r3, [r6, #0]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	6033      	str	r3, [r6, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 8000c8e:	f000 ff33 	bl	8001af8 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 8000c92:	4628      	mov	r0, r5
 8000c94:	f7ff ffca 	bl	8000c2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1ea      	bne.n	8000c74 <prvIdleTask+0x10>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d9e4      	bls.n	8000c70 <prvIdleTask+0xc>
                    taskYIELD();
 8000ca6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000cb2:	f3bf 8f4f 	dsb	sy
 8000cb6:	f3bf 8f6f 	isb	sy
 8000cba:	e7d9      	b.n	8000c70 <prvIdleTask+0xc>
 8000cbc:	20000174 	.word	0x20000174
 8000cc0:	200001e8 	.word	0x200001e8
 8000cc4:	20000170 	.word	0x20000170
 8000cc8:	20000104 	.word	0x20000104

08000ccc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000cd2:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8000cd4:	681e      	ldr	r6, [r3, #0]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	3004      	adds	r0, #4
 8000ce4:	f7ff faeb 	bl	80002be <uxListRemove>
 8000ce8:	b948      	cbnz	r0, 8000cfe <prvAddCurrentTaskToDelayedList+0x32>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4920      	ldr	r1, [pc, #128]	; (8000d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8000cf0:	680b      	ldr	r3, [r1, #0]
 8000cf2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4082      	lsls	r2, r0
 8000cf8:	ea23 0302 	bic.w	r3, r3, r2
 8000cfc:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000cfe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d02:	d00d      	beq.n	8000d20 <prvAddCurrentTaskToDelayedList+0x54>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000d04:	4434      	add	r4, r6

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
 8000d0c:	42a6      	cmp	r6, r4
 8000d0e:	d91d      	bls.n	8000d4c <prvAddCurrentTaskToDelayedList+0x80>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <prvAddCurrentTaskToDelayedList+0xa8>)
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	3104      	adds	r1, #4
 8000d1a:	f7ff fab7 	bl	800028c <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000d20:	2d00      	cmp	r5, #0
 8000d22:	d0ef      	beq.n	8000d04 <prvAddCurrentTaskToDelayedList+0x38>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <prvAddCurrentTaskToDelayedList+0xac>)
 8000d26:	6851      	ldr	r1, [r2, #4]
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	6081      	str	r1, [r0, #8]
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	688c      	ldr	r4, [r1, #8]
 8000d32:	60c4      	str	r4, [r0, #12]
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	3004      	adds	r0, #4
 8000d38:	6060      	str	r0, [r4, #4]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	3004      	adds	r0, #4
 8000d3e:	6088      	str	r0, [r1, #8]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	615a      	str	r2, [r3, #20]
 8000d44:	6813      	ldr	r3, [r2, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e7e8      	b.n	8000d1e <prvAddCurrentTaskToDelayedList+0x52>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	3104      	adds	r1, #4
 8000d56:	f7ff fa99 	bl	800028c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	42a3      	cmp	r3, r4
                        xNextTaskUnblockTime = xTimeToWake;
 8000d60:	bf84      	itt	hi
 8000d62:	4b07      	ldrhi	r3, [pc, #28]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000d64:	601c      	strhi	r4, [r3, #0]
}
 8000d66:	e7da      	b.n	8000d1e <prvAddCurrentTaskToDelayedList+0x52>
 8000d68:	200001fc 	.word	0x200001fc
 8000d6c:	200000f8 	.word	0x200000f8
 8000d70:	20000180 	.word	0x20000180
 8000d74:	20000100 	.word	0x20000100
 8000d78:	200001d4 	.word	0x200001d4
 8000d7c:	200000fc 	.word	0x200000fc
 8000d80:	200001b0 	.word	0x200001b0

08000d84 <xTaskCreateStatic>:
    {
 8000d84:	b530      	push	{r4, r5, lr}
 8000d86:	b087      	sub	sp, #28
 8000d88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
        configASSERT( puxStackBuffer != NULL );
 8000d8a:	b17c      	cbz	r4, 8000dac <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8000d8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d8e:	b1b5      	cbz	r5, 8000dbe <xTaskCreateStatic+0x3a>
                volatile size_t xSize = sizeof( StaticTask_t );
 8000d90:	2568      	movs	r5, #104	; 0x68
 8000d92:	9504      	str	r5, [sp, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 8000d94:	9d04      	ldr	r5, [sp, #16]
 8000d96:	2d68      	cmp	r5, #104	; 0x68
 8000d98:	d01a      	beq.n	8000dd0 <xTaskCreateStatic+0x4c>
 8000d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9e:	f383 8811 	msr	BASEPRI, r3
 8000da2:	f3bf 8f6f 	isb	sy
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	e7fe      	b.n	8000daa <xTaskCreateStatic+0x26>
 8000dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db0:	f383 8811 	msr	BASEPRI, r3
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	f3bf 8f4f 	dsb	sy
        configASSERT( puxStackBuffer != NULL );
 8000dbc:	e7fe      	b.n	8000dbc <xTaskCreateStatic+0x38>
 8000dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc2:	f383 8811 	msr	BASEPRI, r3
 8000dc6:	f3bf 8f6f 	isb	sy
 8000dca:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskBuffer != NULL );
 8000dce:	e7fe      	b.n	8000dce <xTaskCreateStatic+0x4a>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8000dd0:	9d04      	ldr	r5, [sp, #16]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000dd4:	632c      	str	r4, [r5, #48]	; 0x30
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000dd6:	2402      	movs	r4, #2
 8000dd8:	f885 4065 	strb.w	r4, [r5, #101]	; 0x65
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000ddc:	2400      	movs	r4, #0
 8000dde:	9403      	str	r4, [sp, #12]
 8000de0:	9502      	str	r5, [sp, #8]
 8000de2:	ac05      	add	r4, sp, #20
 8000de4:	9401      	str	r4, [sp, #4]
 8000de6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8000de8:	9400      	str	r4, [sp, #0]
 8000dea:	f7ff fe31 	bl	8000a50 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000dee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000df0:	f7ff fe8e 	bl	8000b10 <prvAddNewTaskToReadyList>
    }
 8000df4:	9805      	ldr	r0, [sp, #20]
 8000df6:	b007      	add	sp, #28
 8000df8:	bd30      	pop	{r4, r5, pc}

08000dfa <xTaskCreate>:
    {
 8000dfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	4607      	mov	r7, r0
 8000e02:	4688      	mov	r8, r1
 8000e04:	4614      	mov	r4, r2
 8000e06:	461e      	mov	r6, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e08:	0090      	lsls	r0, r2, #2
 8000e0a:	f000 ffa3 	bl	8001d54 <pvPortMalloc>
                if( pxStack != NULL )
 8000e0e:	b308      	cbz	r0, 8000e54 <xTaskCreate+0x5a>
 8000e10:	4681      	mov	r9, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e12:	2068      	movs	r0, #104	; 0x68
 8000e14:	f000 ff9e 	bl	8001d54 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8000e18:	4605      	mov	r5, r0
 8000e1a:	b1a8      	cbz	r0, 8000e48 <xTaskCreate+0x4e>
                        pxNewTCB->pxStack = pxStack;
 8000e1c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e26:	9303      	str	r3, [sp, #12]
 8000e28:	9002      	str	r0, [sp, #8]
 8000e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4633      	mov	r3, r6
 8000e34:	4622      	mov	r2, r4
 8000e36:	4641      	mov	r1, r8
 8000e38:	4638      	mov	r0, r7
 8000e3a:	f7ff fe09 	bl	8000a50 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f7ff fe66 	bl	8000b10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000e44:	2001      	movs	r0, #1
 8000e46:	e007      	b.n	8000e58 <xTaskCreate+0x5e>
                        vPortFreeStack( pxStack );
 8000e48:	4648      	mov	r0, r9
 8000e4a:	f001 f831 	bl	8001eb0 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e52:	e001      	b.n	8000e58 <xTaskCreate+0x5e>
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8000e58:	b005      	add	sp, #20
 8000e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000e60 <vTaskStartScheduler>:
{
 8000e60:	b510      	push	{r4, lr}
 8000e62:	b088      	sub	sp, #32
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8000e64:	2400      	movs	r4, #0
 8000e66:	9405      	str	r4, [sp, #20]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8000e68:	9406      	str	r4, [sp, #24]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8000e6a:	aa07      	add	r2, sp, #28
 8000e6c:	a906      	add	r1, sp, #24
 8000e6e:	a805      	add	r0, sp, #20
 8000e70:	f001 f914 	bl	800209c <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8000e74:	9b05      	ldr	r3, [sp, #20]
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	9b06      	ldr	r3, [sp, #24]
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	9400      	str	r4, [sp, #0]
 8000e7e:	4623      	mov	r3, r4
 8000e80:	9a07      	ldr	r2, [sp, #28]
 8000e82:	4917      	ldr	r1, [pc, #92]	; (8000ee0 <vTaskStartScheduler+0x80>)
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <vTaskStartScheduler+0x84>)
 8000e86:	f7ff ff7d 	bl	8000d84 <xTaskCreateStatic>
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <vTaskStartScheduler+0x88>)
 8000e8c:	6018      	str	r0, [r3, #0]
            if( xIdleTaskHandle != NULL )
 8000e8e:	b310      	cbz	r0, 8000ed6 <vTaskStartScheduler+0x76>
                xReturn = xTimerCreateTimerTask();
 8000e90:	f000 fd78 	bl	8001984 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8000e94:	2801      	cmp	r0, #1
 8000e96:	d00b      	beq.n	8000eb0 <vTaskStartScheduler+0x50>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000e9c:	d11b      	bne.n	8000ed6 <vTaskStartScheduler+0x76>
 8000e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea2:	f383 8811 	msr	BASEPRI, r3
 8000ea6:	f3bf 8f6f 	isb	sy
 8000eaa:	f3bf 8f4f 	dsb	sy
 8000eae:	e7fe      	b.n	8000eae <vTaskStartScheduler+0x4e>
 8000eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb4:	f383 8811 	msr	BASEPRI, r3
 8000eb8:	f3bf 8f6f 	isb	sy
 8000ebc:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <vTaskStartScheduler+0x8c>)
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <vTaskStartScheduler+0x90>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <vTaskStartScheduler+0x94>)
 8000ed0:	601c      	str	r4, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 8000ed2:	f000 fe81 	bl	8001bd8 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <vTaskStartScheduler+0x98>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
}
 8000eda:	b008      	add	sp, #32
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	bf00      	nop
 8000ee0:	08003d74 	.word	0x08003d74
 8000ee4:	08000c65 	.word	0x08000c65
 8000ee8:	200001ac 	.word	0x200001ac
 8000eec:	200001b0 	.word	0x200001b0
 8000ef0:	200001d0 	.word	0x200001d0
 8000ef4:	200001fc 	.word	0x200001fc
 8000ef8:	20000000 	.word	0x20000000

08000efc <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8000efc:	4a02      	ldr	r2, [pc, #8]	; (8000f08 <vTaskSuspendAll+0xc>)
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000178 	.word	0x20000178

08000f0c <xTaskGetTickCount>:
        xTicks = xTickCount;
 8000f0c:	4b01      	ldr	r3, [pc, #4]	; (8000f14 <xTaskGetTickCount+0x8>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200001fc 	.word	0x200001fc

08000f18 <xTaskIncrementTick>:
{
 8000f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f1c:	4b60      	ldr	r3, [pc, #384]	; (80010a0 <xTaskIncrementTick+0x188>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 80b6 	bne.w	8001092 <xTaskIncrementTick+0x17a>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000f26:	4b5f      	ldr	r3, [pc, #380]	; (80010a4 <xTaskIncrementTick+0x18c>)
 8000f28:	681c      	ldr	r4, [r3, #0]
 8000f2a:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8000f2c:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000f2e:	b9c4      	cbnz	r4, 8000f62 <xTaskIncrementTick+0x4a>
            taskSWITCH_DELAYED_LISTS();
 8000f30:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <xTaskIncrementTick+0x190>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	b143      	cbz	r3, 8000f4a <xTaskIncrementTick+0x32>
 8000f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	f3bf 8f6f 	isb	sy
 8000f44:	f3bf 8f4f 	dsb	sy
 8000f48:	e7fe      	b.n	8000f48 <xTaskIncrementTick+0x30>
 8000f4a:	4a57      	ldr	r2, [pc, #348]	; (80010a8 <xTaskIncrementTick+0x190>)
 8000f4c:	6811      	ldr	r1, [r2, #0]
 8000f4e:	4b57      	ldr	r3, [pc, #348]	; (80010ac <xTaskIncrementTick+0x194>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	6010      	str	r0, [r2, #0]
 8000f54:	6019      	str	r1, [r3, #0]
 8000f56:	4a56      	ldr	r2, [pc, #344]	; (80010b0 <xTaskIncrementTick+0x198>)
 8000f58:	6813      	ldr	r3, [r2, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	f7ff fd63 	bl	8000a28 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000f62:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <xTaskIncrementTick+0x19c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	f200 8081 	bhi.w	800106e <xTaskIncrementTick+0x156>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f6c:	4b4e      	ldr	r3, [pc, #312]	; (80010a8 <xTaskIncrementTick+0x190>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	b153      	cbz	r3, 8000f8a <xTaskIncrementTick+0x72>
    BaseType_t xSwitchRequired = pdFALSE;
 8000f74:	2000      	movs	r0, #0
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f76:	494c      	ldr	r1, [pc, #304]	; (80010a8 <xTaskIncrementTick+0x190>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000f78:	4605      	mov	r5, r0
                    prvAddTaskToReadyList( pxTCB );
 8000f7a:	f8df c14c 	ldr.w	ip, [pc, #332]	; 80010c8 <xTaskIncrementTick+0x1b0>
 8000f7e:	f04f 0b01 	mov.w	fp, #1
 8000f82:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <xTaskIncrementTick+0x1a0>)
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f84:	f8df e134 	ldr.w	lr, [pc, #308]	; 80010bc <xTaskIncrementTick+0x1a4>
 8000f88:	e03a      	b.n	8001000 <xTaskIncrementTick+0xe8>
    BaseType_t xSwitchRequired = pdFALSE;
 8000f8a:	2000      	movs	r0, #0
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f8c:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <xTaskIncrementTick+0x19c>)
 8000f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f92:	601a      	str	r2, [r3, #0]
                    break;
 8000f94:	e06c      	b.n	8001070 <xTaskIncrementTick+0x158>
                        xNextTaskUnblockTime = xItemValue;
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <xTaskIncrementTick+0x19c>)
 8000f98:	601f      	str	r7, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000f9a:	e069      	b.n	8001070 <xTaskIncrementTick+0x158>
                    prvAddTaskToReadyList( pxTCB );
 8000f9c:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8000f9e:	f8dc a000 	ldr.w	sl, [ip]
 8000fa2:	fa0b f907 	lsl.w	r9, fp, r7
 8000fa6:	ea49 090a 	orr.w	r9, r9, sl
 8000faa:	f8cc 9000 	str.w	r9, [ip]
 8000fae:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8000fb2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8000fb6:	687f      	ldr	r7, [r7, #4]
 8000fb8:	609f      	str	r7, [r3, #8]
 8000fba:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8000fbe:	f8c3 900c 	str.w	r9, [r3, #12]
 8000fc2:	f8c9 8004 	str.w	r8, [r9, #4]
 8000fc6:	f8c7 8008 	str.w	r8, [r7, #8]
 8000fca:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8000fcc:	eb07 0887 	add.w	r8, r7, r7, lsl #2
 8000fd0:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8000fd4:	f8c3 9014 	str.w	r9, [r3, #20]
 8000fd8:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 8000fdc:	f108 0801 	add.w	r8, r8, #1
 8000fe0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8000fe4:	f842 8027 	str.w	r8, [r2, r7, lsl #2]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fe8:	f8de 8000 	ldr.w	r8, [lr]
 8000fec:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8000fee:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 8000ff2:	429f      	cmp	r7, r3
 8000ff4:	bf28      	it	cs
 8000ff6:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ff8:	680b      	ldr	r3, [r1, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0c5      	beq.n	8000f8c <xTaskIncrementTick+0x74>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001000:	680b      	ldr	r3, [r1, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001006:	685f      	ldr	r7, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8001008:	42bc      	cmp	r4, r7
 800100a:	d3c4      	bcc.n	8000f96 <xTaskIncrementTick+0x7e>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800100c:	695f      	ldr	r7, [r3, #20]
 800100e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001012:	689e      	ldr	r6, [r3, #8]
 8001014:	f8c6 8008 	str.w	r8, [r6, #8]
 8001018:	689e      	ldr	r6, [r3, #8]
 800101a:	f8c8 6004 	str.w	r6, [r8, #4]
 800101e:	f103 0804 	add.w	r8, r3, #4
 8001022:	687e      	ldr	r6, [r7, #4]
 8001024:	4546      	cmp	r6, r8
 8001026:	bf04      	itt	eq
 8001028:	68de      	ldreq	r6, [r3, #12]
 800102a:	607e      	streq	r6, [r7, #4]
 800102c:	615d      	str	r5, [r3, #20]
 800102e:	f8d7 9000 	ldr.w	r9, [r7]
 8001032:	f109 39ff 	add.w	r9, r9, #4294967295
 8001036:	f8c7 9000 	str.w	r9, [r7]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800103a:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800103e:	f1b9 0f00 	cmp.w	r9, #0
 8001042:	d0ab      	beq.n	8000f9c <xTaskIncrementTick+0x84>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001044:	6a1f      	ldr	r7, [r3, #32]
 8001046:	69de      	ldr	r6, [r3, #28]
 8001048:	60b7      	str	r7, [r6, #8]
 800104a:	69de      	ldr	r6, [r3, #28]
 800104c:	607e      	str	r6, [r7, #4]
 800104e:	f103 0718 	add.w	r7, r3, #24
 8001052:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001056:	42be      	cmp	r6, r7
 8001058:	bf04      	itt	eq
 800105a:	6a1f      	ldreq	r7, [r3, #32]
 800105c:	f8c9 7004 	streq.w	r7, [r9, #4]
 8001060:	629d      	str	r5, [r3, #40]	; 0x28
 8001062:	f8d9 7000 	ldr.w	r7, [r9]
 8001066:	3f01      	subs	r7, #1
 8001068:	f8c9 7000 	str.w	r7, [r9]
 800106c:	e796      	b.n	8000f9c <xTaskIncrementTick+0x84>
    BaseType_t xSwitchRequired = pdFALSE;
 800106e:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <xTaskIncrementTick+0x1a4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <xTaskIncrementTick+0x1a0>)
 800107e:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
 8001080:	2b02      	cmp	r3, #2
 8001082:	bf28      	it	cs
 8001084:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <xTaskIncrementTick+0x1a8>)
 8001088:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 800108a:	2b00      	cmp	r3, #0
 800108c:	bf18      	it	ne
 800108e:	2001      	movne	r0, #1
 8001090:	e004      	b.n	800109c <xTaskIncrementTick+0x184>
        ++xPendedTicks;
 8001092:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <xTaskIncrementTick+0x1ac>)
 8001094:	6813      	ldr	r3, [r2, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
 800109a:	2000      	movs	r0, #0
}
 800109c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010a0:	20000178 	.word	0x20000178
 80010a4:	200001fc 	.word	0x200001fc
 80010a8:	200000fc 	.word	0x200000fc
 80010ac:	20000100 	.word	0x20000100
 80010b0:	200001b4 	.word	0x200001b4
 80010b4:	200001b0 	.word	0x200001b0
 80010b8:	20000104 	.word	0x20000104
 80010bc:	200000f8 	.word	0x200000f8
 80010c0:	20000200 	.word	0x20000200
 80010c4:	200001b8 	.word	0x200001b8
 80010c8:	20000180 	.word	0x20000180

080010cc <xTaskResumeAll>:
    configASSERT( uxSchedulerSuspended );
 80010cc:	4b55      	ldr	r3, [pc, #340]	; (8001224 <xTaskResumeAll+0x158>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	b943      	cbnz	r3, 80010e4 <xTaskResumeAll+0x18>
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	e7fe      	b.n	80010e2 <xTaskResumeAll+0x16>
{
 80010e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    taskENTER_CRITICAL();
 80010e8:	f000 fce4 	bl	8001ab4 <vPortEnterCritical>
        --uxSchedulerSuspended;
 80010ec:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <xTaskResumeAll+0x158>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	3a01      	subs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 808b 	bne.w	8001212 <xTaskResumeAll+0x146>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010fc:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <xTaskResumeAll+0x15c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 808c 	beq.w	800121e <xTaskResumeAll+0x152>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001106:	4b49      	ldr	r3, [pc, #292]	; (800122c <xTaskResumeAll+0x160>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d061      	beq.n	80011d2 <xTaskResumeAll+0x106>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800110e:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800122c <xTaskResumeAll+0x160>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001112:	2000      	movs	r0, #0
                    prvAddTaskToReadyList( pxTCB );
 8001114:	4946      	ldr	r1, [pc, #280]	; (8001230 <xTaskResumeAll+0x164>)
 8001116:	f04f 0e01 	mov.w	lr, #1
 800111a:	4a46      	ldr	r2, [pc, #280]	; (8001234 <xTaskResumeAll+0x168>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800111c:	4c46      	ldr	r4, [pc, #280]	; (8001238 <xTaskResumeAll+0x16c>)
                        xYieldPending = pdTRUE;
 800111e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8001240 <xTaskResumeAll+0x174>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001122:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001126:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001128:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800112a:	6a1f      	ldr	r7, [r3, #32]
 800112c:	69dd      	ldr	r5, [r3, #28]
 800112e:	60af      	str	r7, [r5, #8]
 8001130:	69dd      	ldr	r5, [r3, #28]
 8001132:	607d      	str	r5, [r7, #4]
 8001134:	f103 0718 	add.w	r7, r3, #24
 8001138:	6875      	ldr	r5, [r6, #4]
 800113a:	42bd      	cmp	r5, r7
 800113c:	bf04      	itt	eq
 800113e:	6a1d      	ldreq	r5, [r3, #32]
 8001140:	6075      	streq	r5, [r6, #4]
 8001142:	6298      	str	r0, [r3, #40]	; 0x28
 8001144:	6837      	ldr	r7, [r6, #0]
 8001146:	3f01      	subs	r7, #1
 8001148:	6037      	str	r7, [r6, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800114a:	695e      	ldr	r6, [r3, #20]
 800114c:	68df      	ldr	r7, [r3, #12]
 800114e:	689d      	ldr	r5, [r3, #8]
 8001150:	60af      	str	r7, [r5, #8]
 8001152:	689d      	ldr	r5, [r3, #8]
 8001154:	607d      	str	r5, [r7, #4]
 8001156:	1d1f      	adds	r7, r3, #4
 8001158:	6875      	ldr	r5, [r6, #4]
 800115a:	42bd      	cmp	r5, r7
 800115c:	bf04      	itt	eq
 800115e:	68dd      	ldreq	r5, [r3, #12]
 8001160:	6075      	streq	r5, [r6, #4]
 8001162:	6158      	str	r0, [r3, #20]
 8001164:	f8d6 8000 	ldr.w	r8, [r6]
 8001168:	f108 38ff 	add.w	r8, r8, #4294967295
 800116c:	f8c6 8000 	str.w	r8, [r6]
                    prvAddTaskToReadyList( pxTCB );
 8001170:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001172:	f8d1 9000 	ldr.w	r9, [r1]
 8001176:	fa0e f806 	lsl.w	r8, lr, r6
 800117a:	ea48 0809 	orr.w	r8, r8, r9
 800117e:	f8c1 8000 	str.w	r8, [r1]
 8001182:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001186:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800118a:	6876      	ldr	r6, [r6, #4]
 800118c:	609e      	str	r6, [r3, #8]
 800118e:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8001192:	f8c3 800c 	str.w	r8, [r3, #12]
 8001196:	f8c8 7004 	str.w	r7, [r8, #4]
 800119a:	60b7      	str	r7, [r6, #8]
 800119c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800119e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80011a2:	eb02 0887 	add.w	r8, r2, r7, lsl #2
 80011a6:	f8c3 8014 	str.w	r8, [r3, #20]
 80011aa:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 80011ae:	3701      	adds	r7, #1
 80011b0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80011b4:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011b8:	6827      	ldr	r7, [r4, #0]
 80011ba:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	429e      	cmp	r6, r3
                        xYieldPending = pdTRUE;
 80011c0:	bf28      	it	cs
 80011c2:	f8ca e000 	strcs.w	lr, [sl]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011c6:	f8dc 3000 	ldr.w	r3, [ip]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1a9      	bne.n	8001122 <xTaskResumeAll+0x56>
                    prvResetNextTaskUnblockTime();
 80011ce:	f7ff fc2b 	bl	8000a28 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <xTaskResumeAll+0x170>)
 80011d4:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 80011d6:	b16c      	cbz	r4, 80011f4 <xTaskResumeAll+0x128>
                                xYieldPending = pdTRUE;
 80011d8:	4e19      	ldr	r6, [pc, #100]	; (8001240 <xTaskResumeAll+0x174>)
 80011da:	2501      	movs	r5, #1
 80011dc:	e001      	b.n	80011e2 <xTaskResumeAll+0x116>
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80011de:	3c01      	subs	r4, #1
 80011e0:	d005      	beq.n	80011ee <xTaskResumeAll+0x122>
                            if( xTaskIncrementTick() != pdFALSE )
 80011e2:	f7ff fe99 	bl	8000f18 <xTaskIncrementTick>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d0f9      	beq.n	80011de <xTaskResumeAll+0x112>
                                xYieldPending = pdTRUE;
 80011ea:	6035      	str	r5, [r6, #0]
 80011ec:	e7f7      	b.n	80011de <xTaskResumeAll+0x112>
                        xPendedTicks = 0;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <xTaskResumeAll+0x170>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <xTaskResumeAll+0x174>)
 80011f6:	681c      	ldr	r4, [r3, #0]
 80011f8:	b164      	cbz	r4, 8001214 <xTaskResumeAll+0x148>
                    taskYIELD_IF_USING_PREEMPTION();
 80011fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001202:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001206:	f3bf 8f4f 	dsb	sy
 800120a:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 800120e:	2401      	movs	r4, #1
 8001210:	e000      	b.n	8001214 <xTaskResumeAll+0x148>
    BaseType_t xAlreadyYielded = pdFALSE;
 8001212:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8001214:	f000 fc70 	bl	8001af8 <vPortExitCritical>
}
 8001218:	4620      	mov	r0, r4
 800121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
 800121e:	2400      	movs	r4, #0
 8001220:	e7f8      	b.n	8001214 <xTaskResumeAll+0x148>
 8001222:	bf00      	nop
 8001224:	20000178 	.word	0x20000178
 8001228:	20000170 	.word	0x20000170
 800122c:	200001bc 	.word	0x200001bc
 8001230:	20000180 	.word	0x20000180
 8001234:	20000104 	.word	0x20000104
 8001238:	200000f8 	.word	0x200000f8
 800123c:	200001b8 	.word	0x200001b8
 8001240:	20000200 	.word	0x20000200

08001244 <vTaskDelay>:
    {
 8001244:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001246:	b1a8      	cbz	r0, 8001274 <vTaskDelay+0x30>
 8001248:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <vTaskDelay+0x48>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b143      	cbz	r3, 8001262 <vTaskDelay+0x1e>
 8001250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001254:	f383 8811 	msr	BASEPRI, r3
 8001258:	f3bf 8f6f 	isb	sy
 800125c:	f3bf 8f4f 	dsb	sy
 8001260:	e7fe      	b.n	8001260 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8001262:	f7ff fe4b 	bl	8000efc <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001266:	2100      	movs	r1, #0
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fd2f 	bl	8000ccc <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 800126e:	f7ff ff2d 	bl	80010cc <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8001272:	b948      	cbnz	r0, 8001288 <vTaskDelay+0x44>
            portYIELD_WITHIN_API();
 8001274:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800127c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001280:	f3bf 8f4f 	dsb	sy
 8001284:	f3bf 8f6f 	isb	sy
    }
 8001288:	bd10      	pop	{r4, pc}
 800128a:	bf00      	nop
 800128c:	20000178 	.word	0x20000178

08001290 <vTaskSwitchContext>:
{
 8001290:	b508      	push	{r3, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <vTaskSwitchContext+0xdc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b11b      	cbz	r3, 80012a0 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 8001298:	4b35      	ldr	r3, [pc, #212]	; (8001370 <vTaskSwitchContext+0xe0>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]
}
 800129e:	bd08      	pop	{r3, pc}
        xYieldPending = pdFALSE;
 80012a0:	2200      	movs	r2, #0
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <vTaskSwitchContext+0xe0>)
 80012a4:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <vTaskSwitchContext+0xe4>)
 80012a8:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a32      	ldr	r2, [pc, #200]	; (8001378 <vTaskSwitchContext+0xe8>)
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d907      	bls.n	80012c4 <vTaskSwitchContext+0x34>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <vTaskSwitchContext+0xe4>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <vTaskSwitchContext+0xec>)
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	4403      	add	r3, r0
 80012c2:	65cb      	str	r3, [r1, #92]	; 0x5c
                ulTaskSwitchedInTime = ulTotalRunTime;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <vTaskSwitchContext+0xe4>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <vTaskSwitchContext+0xe8>)
 80012ca:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <vTaskSwitchContext+0xec>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80012d8:	d103      	bne.n	80012e2 <vTaskSwitchContext+0x52>
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80012e0:	d01b      	beq.n	800131a <vTaskSwitchContext+0x8a>
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <vTaskSwitchContext+0xec>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	6819      	ldr	r1, [r3, #0]
 80012e8:	3134      	adds	r1, #52	; 0x34
 80012ea:	f000 feef 	bl	80020cc <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <vTaskSwitchContext+0xf0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f1c3 031f 	rsb	r3, r3, #31
 80012fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001300:	0092      	lsls	r2, r2, #2
 8001302:	4920      	ldr	r1, [pc, #128]	; (8001384 <vTaskSwitchContext+0xf4>)
 8001304:	588a      	ldr	r2, [r1, r2]
 8001306:	b98a      	cbnz	r2, 800132c <vTaskSwitchContext+0x9c>
        __asm volatile
 8001308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800130c:	f383 8811 	msr	BASEPRI, r3
 8001310:	f3bf 8f6f 	isb	sy
 8001314:	f3bf 8f4f 	dsb	sy
 8001318:	e7fe      	b.n	8001318 <vTaskSwitchContext+0x88>
        taskCHECK_FOR_STACK_OVERFLOW();
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8001320:	d1df      	bne.n	80012e2 <vTaskSwitchContext+0x52>
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8001328:	d1db      	bne.n	80012e2 <vTaskSwitchContext+0x52>
 800132a:	e7e0      	b.n	80012ee <vTaskSwitchContext+0x5e>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800132c:	4a15      	ldr	r2, [pc, #84]	; (8001384 <vTaskSwitchContext+0xf4>)
 800132e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001332:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001336:	6848      	ldr	r0, [r1, #4]
 8001338:	6840      	ldr	r0, [r0, #4]
 800133a:	6048      	str	r0, [r1, #4]
 800133c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001340:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001344:	3208      	adds	r2, #8
 8001346:	4290      	cmp	r0, r2
 8001348:	d009      	beq.n	800135e <vTaskSwitchContext+0xce>
 800134a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800134e:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <vTaskSwitchContext+0xf4>)
 8001350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <vTaskSwitchContext+0xec>)
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	e79f      	b.n	800129e <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800135e:	6840      	ldr	r0, [r0, #4]
 8001360:	4a08      	ldr	r2, [pc, #32]	; (8001384 <vTaskSwitchContext+0xf4>)
 8001362:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001366:	6050      	str	r0, [r2, #4]
 8001368:	e7ef      	b.n	800134a <vTaskSwitchContext+0xba>
 800136a:	bf00      	nop
 800136c:	20000178 	.word	0x20000178
 8001370:	20000200 	.word	0x20000200
 8001374:	2000016c 	.word	0x2000016c
 8001378:	20000168 	.word	0x20000168
 800137c:	200000f8 	.word	0x200000f8
 8001380:	20000180 	.word	0x20000180
 8001384:	20000104 	.word	0x20000104

08001388 <vTaskPlaceOnEventList>:
    configASSERT( pxEventList );
 8001388:	b158      	cbz	r0, 80013a2 <vTaskPlaceOnEventList+0x1a>
{
 800138a:	b510      	push	{r4, lr}
 800138c:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <vTaskPlaceOnEventList+0x2c>)
 8001390:	6811      	ldr	r1, [r2, #0]
 8001392:	3118      	adds	r1, #24
 8001394:	f7fe ff7a 	bl	800028c <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001398:	2101      	movs	r1, #1
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fc96 	bl	8000ccc <prvAddCurrentTaskToDelayedList>
}
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a6:	f383 8811 	msr	BASEPRI, r3
 80013aa:	f3bf 8f6f 	isb	sy
 80013ae:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
 80013b2:	e7fe      	b.n	80013b2 <vTaskPlaceOnEventList+0x2a>
 80013b4:	200000f8 	.word	0x200000f8

080013b8 <vTaskPlaceOnEventListRestricted>:
    {
 80013b8:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxEventList );
 80013ba:	b1e0      	cbz	r0, 80013f6 <vTaskPlaceOnEventListRestricted+0x3e>
 80013bc:	468c      	mov	ip, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	4605      	mov	r5, r0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80013c2:	6842      	ldr	r2, [r0, #4]
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <vTaskPlaceOnEventListRestricted+0x50>)
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	61c2      	str	r2, [r0, #28]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	6894      	ldr	r4, [r2, #8]
 80013ce:	6204      	str	r4, [r0, #32]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	3018      	adds	r0, #24
 80013d4:	6060      	str	r0, [r4, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	3018      	adds	r0, #24
 80013da:	6090      	str	r0, [r2, #8]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	629d      	str	r5, [r3, #40]	; 0x28
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	602b      	str	r3, [r5, #0]
            xTicksToWait = portMAX_DELAY;
 80013e6:	2900      	cmp	r1, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80013e8:	bf0c      	ite	eq
 80013ea:	4660      	moveq	r0, ip
 80013ec:	f04f 30ff 	movne.w	r0, #4294967295
 80013f0:	f7ff fc6c 	bl	8000ccc <prvAddCurrentTaskToDelayedList>
    }
 80013f4:	bd38      	pop	{r3, r4, r5, pc}
 80013f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fa:	f383 8811 	msr	BASEPRI, r3
 80013fe:	f3bf 8f6f 	isb	sy
 8001402:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventList );
 8001406:	e7fe      	b.n	8001406 <vTaskPlaceOnEventListRestricted+0x4e>
 8001408:	200000f8 	.word	0x200000f8

0800140c <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800140c:	68c3      	ldr	r3, [r0, #12]
 800140e:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8001410:	2b00      	cmp	r3, #0
 8001412:	d04f      	beq.n	80014b4 <xTaskRemoveFromEventList+0xa8>
{
 8001414:	b430      	push	{r4, r5}
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001418:	69d8      	ldr	r0, [r3, #28]
 800141a:	6a19      	ldr	r1, [r3, #32]
 800141c:	6081      	str	r1, [r0, #8]
 800141e:	69d8      	ldr	r0, [r3, #28]
 8001420:	6048      	str	r0, [r1, #4]
 8001422:	f103 0018 	add.w	r0, r3, #24
 8001426:	6851      	ldr	r1, [r2, #4]
 8001428:	4281      	cmp	r1, r0
 800142a:	bf04      	itt	eq
 800142c:	6a19      	ldreq	r1, [r3, #32]
 800142e:	6051      	streq	r1, [r2, #4]
 8001430:	2100      	movs	r1, #0
 8001432:	6299      	str	r1, [r3, #40]	; 0x28
 8001434:	6811      	ldr	r1, [r2, #0]
 8001436:	3901      	subs	r1, #1
 8001438:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <xTaskRemoveFromEventList+0xd4>)
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	2a00      	cmp	r2, #0
 8001440:	d141      	bne.n	80014c6 <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	6898      	ldr	r0, [r3, #8]
 8001446:	68d9      	ldr	r1, [r3, #12]
 8001448:	6081      	str	r1, [r0, #8]
 800144a:	6898      	ldr	r0, [r3, #8]
 800144c:	6048      	str	r0, [r1, #4]
 800144e:	1d18      	adds	r0, r3, #4
 8001450:	6851      	ldr	r1, [r2, #4]
 8001452:	4281      	cmp	r1, r0
 8001454:	bf04      	itt	eq
 8001456:	68d9      	ldreq	r1, [r3, #12]
 8001458:	6051      	streq	r1, [r2, #4]
 800145a:	2100      	movs	r1, #0
 800145c:	6159      	str	r1, [r3, #20]
 800145e:	6811      	ldr	r1, [r2, #0]
 8001460:	3901      	subs	r1, #1
 8001462:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001466:	4c1f      	ldr	r4, [pc, #124]	; (80014e4 <xTaskRemoveFromEventList+0xd8>)
 8001468:	6825      	ldr	r5, [r4, #0]
 800146a:	2101      	movs	r1, #1
 800146c:	4091      	lsls	r1, r2
 800146e:	4329      	orrs	r1, r5
 8001470:	6021      	str	r1, [r4, #0]
 8001472:	491d      	ldr	r1, [pc, #116]	; (80014e8 <xTaskRemoveFromEventList+0xdc>)
 8001474:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001478:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800147c:	6852      	ldr	r2, [r2, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	6894      	ldr	r4, [r2, #8]
 8001482:	60dc      	str	r4, [r3, #12]
 8001484:	6060      	str	r0, [r4, #4]
 8001486:	6090      	str	r0, [r2, #8]
 8001488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800148e:	0084      	lsls	r4, r0, #2
 8001490:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8001494:	6158      	str	r0, [r3, #20]
 8001496:	5908      	ldr	r0, [r1, r4]
 8001498:	3001      	adds	r0, #1
 800149a:	5108      	str	r0, [r1, r4]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800149c:	4a13      	ldr	r2, [pc, #76]	; (80014ec <xTaskRemoveFromEventList+0xe0>)
 800149e:	6811      	ldr	r1, [r2, #0]
 80014a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80014a4:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
 80014a6:	bf83      	ittte	hi
 80014a8:	2001      	movhi	r0, #1
 80014aa:	4b11      	ldrhi	r3, [pc, #68]	; (80014f0 <xTaskRemoveFromEventList+0xe4>)
 80014ac:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
 80014ae:	2000      	movls	r0, #0
}
 80014b0:	bc30      	pop	{r4, r5}
 80014b2:	4770      	bx	lr
 80014b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b8:	f383 8811 	msr	BASEPRI, r3
 80014bc:	f3bf 8f6f 	isb	sy
 80014c0:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
 80014c4:	e7fe      	b.n	80014c4 <xTaskRemoveFromEventList+0xb8>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <xTaskRemoveFromEventList+0xe8>)
 80014c8:	6851      	ldr	r1, [r2, #4]
 80014ca:	61d9      	str	r1, [r3, #28]
 80014cc:	688c      	ldr	r4, [r1, #8]
 80014ce:	621c      	str	r4, [r3, #32]
 80014d0:	6060      	str	r0, [r4, #4]
 80014d2:	6088      	str	r0, [r1, #8]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
 80014d6:	6811      	ldr	r1, [r2, #0]
 80014d8:	3101      	adds	r1, #1
 80014da:	6011      	str	r1, [r2, #0]
 80014dc:	e7de      	b.n	800149c <xTaskRemoveFromEventList+0x90>
 80014de:	bf00      	nop
 80014e0:	20000178 	.word	0x20000178
 80014e4:	20000180 	.word	0x20000180
 80014e8:	20000104 	.word	0x20000104
 80014ec:	200000f8 	.word	0x200000f8
 80014f0:	20000200 	.word	0x20000200
 80014f4:	200001bc 	.word	0x200001bc

080014f8 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <vTaskInternalSetTimeOutState+0x10>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80014fe:	4b03      	ldr	r3, [pc, #12]	; (800150c <vTaskInternalSetTimeOutState+0x14>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6043      	str	r3, [r0, #4]
}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200001b4 	.word	0x200001b4
 800150c:	200001fc 	.word	0x200001fc

08001510 <xTaskCheckForTimeOut>:
    configASSERT( pxTimeOut );
 8001510:	b1b0      	cbz	r0, 8001540 <xTaskCheckForTimeOut+0x30>
{
 8001512:	b570      	push	{r4, r5, r6, lr}
 8001514:	460c      	mov	r4, r1
 8001516:	4605      	mov	r5, r0
    configASSERT( pxTicksToWait );
 8001518:	b1d9      	cbz	r1, 8001552 <xTaskCheckForTimeOut+0x42>
    taskENTER_CRITICAL();
 800151a:	f000 facb 	bl	8001ab4 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <xTaskCheckForTimeOut+0x98>)
 8001520:	681a      	ldr	r2, [r3, #0]
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <xTaskCheckForTimeOut+0x9c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800152a:	b1db      	cbz	r3, 8001564 <xTaskCheckForTimeOut+0x54>
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <xTaskCheckForTimeOut+0x9c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
                xReturn = pdTRUE;
 8001536:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
 8001538:	f000 fade 	bl	8001af8 <vPortExitCritical>
}
 800153c:	4620      	mov	r0, r4
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001544:	f383 8811 	msr	BASEPRI, r3
 8001548:	f3bf 8f6f 	isb	sy
 800154c:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
 8001550:	e7fe      	b.n	8001550 <xTaskCheckForTimeOut+0x40>
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTicksToWait );
 8001562:	e7fe      	b.n	8001562 <xTaskCheckForTimeOut+0x52>
            if( *pxTicksToWait == portMAX_DELAY )
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156a:	d01a      	beq.n	80015a2 <xTaskCheckForTimeOut+0x92>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800156c:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800156e:	4810      	ldr	r0, [pc, #64]	; (80015b0 <xTaskCheckForTimeOut+0xa0>)
 8001570:	6800      	ldr	r0, [r0, #0]
 8001572:	682e      	ldr	r6, [r5, #0]
 8001574:	4286      	cmp	r6, r0
 8001576:	d005      	beq.n	8001584 <xTaskCheckForTimeOut+0x74>
 8001578:	4291      	cmp	r1, r2
 800157a:	d803      	bhi.n	8001584 <xTaskCheckForTimeOut+0x74>
            *pxTicksToWait = ( TickType_t ) 0;
 800157c:	2300      	movs	r3, #0
 800157e:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 8001580:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8001582:	e7d9      	b.n	8001538 <xTaskCheckForTimeOut+0x28>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001584:	1a50      	subs	r0, r2, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001586:	4283      	cmp	r3, r0
 8001588:	d803      	bhi.n	8001592 <xTaskCheckForTimeOut+0x82>
            *pxTicksToWait = ( TickType_t ) 0;
 800158a:	2300      	movs	r3, #0
 800158c:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 800158e:	2401      	movs	r4, #1
 8001590:	e7d2      	b.n	8001538 <xTaskCheckForTimeOut+0x28>
            *pxTicksToWait -= xElapsedTime;
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	440b      	add	r3, r1
 8001596:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001598:	4628      	mov	r0, r5
 800159a:	f7ff ffad 	bl	80014f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800159e:	2400      	movs	r4, #0
 80015a0:	e7ca      	b.n	8001538 <xTaskCheckForTimeOut+0x28>
                xReturn = pdFALSE;
 80015a2:	2400      	movs	r4, #0
 80015a4:	e7c8      	b.n	8001538 <xTaskCheckForTimeOut+0x28>
 80015a6:	bf00      	nop
 80015a8:	200001fc 	.word	0x200001fc
 80015ac:	200000f8 	.word	0x200000f8
 80015b0:	200001b4 	.word	0x200001b4

080015b4 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <vTaskMissedYield+0x8>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	4770      	bx	lr
 80015bc:	20000200 	.word	0x20000200

080015c0 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <xTaskGetSchedulerState+0x18>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b133      	cbz	r3, 80015d4 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <xTaskGetSchedulerState+0x1c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
                xReturn = taskSCHEDULER_SUSPENDED;
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf0c      	ite	eq
 80015ce:	2002      	moveq	r0, #2
 80015d0:	2000      	movne	r0, #0
 80015d2:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 80015d4:	2001      	movs	r0, #1
    }
 80015d6:	4770      	bx	lr
 80015d8:	200001d0 	.word	0x200001d0
 80015dc:	20000178 	.word	0x20000178

080015e0 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d051      	beq.n	8001688 <xTaskPriorityDisinherit+0xa8>
    {
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <xTaskPriorityDisinherit+0xb0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4283      	cmp	r3, r0
 80015ee:	d008      	beq.n	8001602 <xTaskPriorityDisinherit+0x22>
 80015f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f4:	f383 8811 	msr	BASEPRI, r3
 80015f8:	f3bf 8f6f 	isb	sy
 80015fc:	f3bf 8f4f 	dsb	sy
 8001600:	e7fe      	b.n	8001600 <xTaskPriorityDisinherit+0x20>
            configASSERT( pxTCB->uxMutexesHeld );
 8001602:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001604:	b943      	cbnz	r3, 8001618 <xTaskPriorityDisinherit+0x38>
 8001606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800160a:	f383 8811 	msr	BASEPRI, r3
 800160e:	f3bf 8f6f 	isb	sy
 8001612:	f3bf 8f4f 	dsb	sy
 8001616:	e7fe      	b.n	8001616 <xTaskPriorityDisinherit+0x36>
            ( pxTCB->uxMutexesHeld )--;
 8001618:	3b01      	subs	r3, #1
 800161a:	64c3      	str	r3, [r0, #76]	; 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800161c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800161e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001620:	4291      	cmp	r1, r2
 8001622:	d033      	beq.n	800168c <xTaskPriorityDisinherit+0xac>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001624:	b10b      	cbz	r3, 800162a <xTaskPriorityDisinherit+0x4a>
        BaseType_t xReturn = pdFALSE;
 8001626:	2000      	movs	r0, #0
    }
 8001628:	bd70      	pop	{r4, r5, r6, pc}
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800162a:	1d05      	adds	r5, r0, #4
 800162c:	4628      	mov	r0, r5
 800162e:	f7fe fe46 	bl	80002be <uxListRemove>
 8001632:	b938      	cbnz	r0, 8001644 <xTaskPriorityDisinherit+0x64>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001634:	4917      	ldr	r1, [pc, #92]	; (8001694 <xTaskPriorityDisinherit+0xb4>)
 8001636:	680b      	ldr	r3, [r1, #0]
 8001638:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800163a:	2201      	movs	r2, #1
 800163c:	4082      	lsls	r2, r0
 800163e:	ea23 0302 	bic.w	r3, r3, r2
 8001642:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001644:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001646:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001648:	f1c3 0205 	rsb	r2, r3, #5
 800164c:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 800164e:	4911      	ldr	r1, [pc, #68]	; (8001694 <xTaskPriorityDisinherit+0xb4>)
 8001650:	680e      	ldr	r6, [r1, #0]
 8001652:	2001      	movs	r0, #1
 8001654:	fa00 f203 	lsl.w	r2, r0, r3
 8001658:	4332      	orrs	r2, r6
 800165a:	600a      	str	r2, [r1, #0]
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <xTaskPriorityDisinherit+0xb8>)
 800165e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001662:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60a3      	str	r3, [r4, #8]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	60e1      	str	r1, [r4, #12]
 800166e:	604d      	str	r5, [r1, #4]
 8001670:	609d      	str	r5, [r3, #8]
 8001672:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001674:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001678:	008d      	lsls	r5, r1, #2
 800167a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800167e:	6161      	str	r1, [r4, #20]
 8001680:	5951      	ldr	r1, [r2, r5]
 8001682:	4401      	add	r1, r0
 8001684:	5151      	str	r1, [r2, r5]
                    xReturn = pdTRUE;
 8001686:	e7cf      	b.n	8001628 <xTaskPriorityDisinherit+0x48>
        BaseType_t xReturn = pdFALSE;
 8001688:	2000      	movs	r0, #0
    }
 800168a:	4770      	bx	lr
        BaseType_t xReturn = pdFALSE;
 800168c:	2000      	movs	r0, #0
 800168e:	e7cb      	b.n	8001628 <xTaskPriorityDisinherit+0x48>
 8001690:	200000f8 	.word	0x200000f8
 8001694:	20000180 	.word	0x20000180
 8001698:	20000104 	.word	0x20000104

0800169c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800169c:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800169e:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80016a0:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
 80016a2:	4291      	cmp	r1, r2
 80016a4:	d80c      	bhi.n	80016c0 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016a6:	1ad2      	subs	r2, r2, r3
 80016a8:	6983      	ldr	r3, [r0, #24]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d301      	bcc.n	80016b2 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80016ae:	2001      	movs	r0, #1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
 80016b0:	bd08      	pop	{r3, pc}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80016b2:	1d01      	adds	r1, r0, #4
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <prvInsertTimerInActiveList+0x40>)
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	f7fe fde8 	bl	800028c <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 80016bc:	2000      	movs	r0, #0
 80016be:	e7f7      	b.n	80016b0 <prvInsertTimerInActiveList+0x14>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d201      	bcs.n	80016c8 <prvInsertTimerInActiveList+0x2c>
 80016c4:	4299      	cmp	r1, r3
 80016c6:	d206      	bcs.n	80016d6 <prvInsertTimerInActiveList+0x3a>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80016c8:	1d01      	adds	r1, r0, #4
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <prvInsertTimerInActiveList+0x44>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	f7fe fddd 	bl	800028c <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 80016d2:	2000      	movs	r0, #0
 80016d4:	e7ec      	b.n	80016b0 <prvInsertTimerInActiveList+0x14>
                xProcessTimerNow = pdTRUE;
 80016d6:	2001      	movs	r0, #1
        return xProcessTimerNow;
 80016d8:	e7ea      	b.n	80016b0 <prvInsertTimerInActiveList+0x14>
 80016da:	bf00      	nop
 80016dc:	20000208 	.word	0x20000208
 80016e0:	20000204 	.word	0x20000204

080016e4 <prvReloadTimer>:
    {
 80016e4:	b570      	push	{r4, r5, r6, lr}
 80016e6:	4604      	mov	r4, r0
 80016e8:	460d      	mov	r5, r1
 80016ea:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80016ec:	e004      	b.n	80016f8 <prvReloadTimer+0x14>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80016ee:	69a3      	ldr	r3, [r4, #24]
 80016f0:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80016f2:	6a23      	ldr	r3, [r4, #32]
 80016f4:	4620      	mov	r0, r4
 80016f6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80016f8:	69a1      	ldr	r1, [r4, #24]
 80016fa:	462b      	mov	r3, r5
 80016fc:	4632      	mov	r2, r6
 80016fe:	4429      	add	r1, r5
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff ffcb 	bl	800169c <prvInsertTimerInActiveList>
 8001706:	2800      	cmp	r0, #0
 8001708:	d1f1      	bne.n	80016ee <prvReloadTimer+0xa>
    }
 800170a:	bd70      	pop	{r4, r5, r6, pc}

0800170c <prvProcessExpiredTimer>:
    {
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	4605      	mov	r5, r0
 8001710:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <prvProcessExpiredTimer+0x3c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800171a:	1d20      	adds	r0, r4, #4
 800171c:	f7fe fdcf 	bl	80002be <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001720:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001724:	f013 0f04 	tst.w	r3, #4
 8001728:	d107      	bne.n	800173a <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001732:	6a23      	ldr	r3, [r4, #32]
 8001734:	4620      	mov	r0, r4
 8001736:	4798      	blx	r3
    }
 8001738:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800173a:	4632      	mov	r2, r6
 800173c:	4629      	mov	r1, r5
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff ffd0 	bl	80016e4 <prvReloadTimer>
 8001744:	e7f5      	b.n	8001732 <prvProcessExpiredTimer+0x26>
 8001746:	bf00      	nop
 8001748:	20000204 	.word	0x20000204

0800174c <prvSampleTimeNow>:
    {
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 8001750:	f7ff fbdc 	bl	8000f0c <xTaskGetTickCount>
 8001754:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <prvSampleTimeNow+0x50>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4283      	cmp	r3, r0
 800175c:	d805      	bhi.n	800176a <prvSampleTimeNow+0x1e>
            *pxTimerListsWereSwitched = pdFALSE;
 800175e:	2300      	movs	r3, #0
 8001760:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <prvSampleTimeNow+0x50>)
 8001764:	601c      	str	r4, [r3, #0]
    }
 8001766:	4620      	mov	r0, r4
 8001768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <prvSampleTimeNow+0x54>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	b15a      	cbz	r2, 800178a <prvSampleTimeNow+0x3e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001772:	f04f 37ff 	mov.w	r7, #4294967295
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001776:	4e0a      	ldr	r6, [pc, #40]	; (80017a0 <prvSampleTimeNow+0x54>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001778:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800177a:	4639      	mov	r1, r7
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	f7ff ffc5 	bl	800170c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001782:	6833      	ldr	r3, [r6, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2a00      	cmp	r2, #0
 8001788:	d1f6      	bne.n	8001778 <prvSampleTimeNow+0x2c>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 800178a:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <prvSampleTimeNow+0x58>)
 800178c:	6810      	ldr	r0, [r2, #0]
 800178e:	4904      	ldr	r1, [pc, #16]	; (80017a0 <prvSampleTimeNow+0x54>)
 8001790:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
 8001792:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 8001794:	2301      	movs	r3, #1
 8001796:	602b      	str	r3, [r5, #0]
 8001798:	e7e3      	b.n	8001762 <prvSampleTimeNow+0x16>
 800179a:	bf00      	nop
 800179c:	20000270 	.word	0x20000270
 80017a0:	20000204 	.word	0x20000204
 80017a4:	20000208 	.word	0x20000208

080017a8 <prvTimerTask>:
    {
 80017a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ac:	b084      	sub	sp, #16
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80017ae:	4f56      	ldr	r7, [pc, #344]	; (8001908 <prvTimerTask+0x160>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80017b0:	4d56      	ldr	r5, [pc, #344]	; (800190c <prvTimerTask+0x164>)
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681e      	ldr	r6, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 80017b6:	b196      	cbz	r6, 80017de <prvTimerTask+0x36>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	681e      	ldr	r6, [r3, #0]
        vTaskSuspendAll();
 80017bc:	f7ff fb9e 	bl	8000efc <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80017c0:	a801      	add	r0, sp, #4
 80017c2:	f7ff ffc3 	bl	800174c <prvSampleTimeNow>
 80017c6:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
 80017c8:	9a01      	ldr	r2, [sp, #4]
 80017ca:	bb42      	cbnz	r2, 800181e <prvTimerTask+0x76>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80017cc:	42b0      	cmp	r0, r6
 80017ce:	d314      	bcc.n	80017fa <prvTimerTask+0x52>
                    ( void ) xTaskResumeAll();
 80017d0:	f7ff fc7c 	bl	80010cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80017d4:	4621      	mov	r1, r4
 80017d6:	4630      	mov	r0, r6
 80017d8:	f7ff ff98 	bl	800170c <prvProcessExpiredTimer>
 80017dc:	e021      	b.n	8001822 <prvTimerTask+0x7a>
        vTaskSuspendAll();
 80017de:	f7ff fb8d 	bl	8000efc <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80017e2:	a801      	add	r0, sp, #4
 80017e4:	f7ff ffb2 	bl	800174c <prvSampleTimeNow>
 80017e8:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	b9bb      	cbnz	r3, 800181e <prvTimerTask+0x76>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80017ee:	4b48      	ldr	r3, [pc, #288]	; (8001910 <prvTimerTask+0x168>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	fab2 f282 	clz	r2, r2
 80017f8:	0952      	lsrs	r2, r2, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80017fa:	1b31      	subs	r1, r6, r4
 80017fc:	6828      	ldr	r0, [r5, #0]
 80017fe:	f7ff f8eb 	bl	80009d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001802:	f7ff fc63 	bl	80010cc <xTaskResumeAll>
 8001806:	b960      	cbnz	r0, 8001822 <prvTimerTask+0x7a>
                        portYIELD_WITHIN_API();
 8001808:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800180c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001810:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	f3bf 8f6f 	isb	sy
 800181c:	e001      	b.n	8001822 <prvTimerTask+0x7a>
                ( void ) xTaskResumeAll();
 800181e:	f7ff fc55 	bl	80010cc <xTaskResumeAll>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001822:	2400      	movs	r4, #0
 8001824:	4622      	mov	r2, r4
 8001826:	a901      	add	r1, sp, #4
 8001828:	6828      	ldr	r0, [r5, #0]
 800182a:	f7fe fff9 	bl	8000820 <xQueueReceive>
 800182e:	2800      	cmp	r0, #0
 8001830:	d0bf      	beq.n	80017b2 <prvTimerTask+0xa>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001832:	9b01      	ldr	r3, [sp, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	dbf5      	blt.n	8001824 <prvTimerTask+0x7c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001838:	9e03      	ldr	r6, [sp, #12]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800183a:	6973      	ldr	r3, [r6, #20]
 800183c:	b113      	cbz	r3, 8001844 <prvTimerTask+0x9c>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800183e:	1d30      	adds	r0, r6, #4
 8001840:	f7fe fd3d 	bl	80002be <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001844:	4668      	mov	r0, sp
 8001846:	f7ff ff81 	bl	800174c <prvSampleTimeNow>
 800184a:	4680      	mov	r8, r0
                switch( xMessage.xMessageID )
 800184c:	9b01      	ldr	r3, [sp, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	2b08      	cmp	r3, #8
 8001852:	d8e7      	bhi.n	8001824 <prvTimerTask+0x7c>
 8001854:	e8df f003 	tbb	[pc, r3]
 8001858:	30290505 	.word	0x30290505
 800185c:	29050549 	.word	0x29050549
 8001860:	30          	.byte	0x30
 8001861:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001862:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800186e:	9b02      	ldr	r3, [sp, #8]
 8001870:	69b1      	ldr	r1, [r6, #24]
 8001872:	4602      	mov	r2, r0
 8001874:	4419      	add	r1, r3
 8001876:	4630      	mov	r0, r6
 8001878:	f7ff ff10 	bl	800169c <prvInsertTimerInActiveList>
 800187c:	2800      	cmp	r0, #0
 800187e:	d0d1      	beq.n	8001824 <prvTimerTask+0x7c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001880:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001884:	f013 0f04 	tst.w	r3, #4
 8001888:	d107      	bne.n	800189a <prvTimerTask+0xf2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001892:	6a33      	ldr	r3, [r6, #32]
 8001894:	4630      	mov	r0, r6
 8001896:	4798      	blx	r3
 8001898:	e7c4      	b.n	8001824 <prvTimerTask+0x7c>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800189a:	69b3      	ldr	r3, [r6, #24]
 800189c:	4642      	mov	r2, r8
 800189e:	9902      	ldr	r1, [sp, #8]
 80018a0:	4419      	add	r1, r3
 80018a2:	4630      	mov	r0, r6
 80018a4:	f7ff ff1e 	bl	80016e4 <prvReloadTimer>
 80018a8:	e7f3      	b.n	8001892 <prvTimerTask+0xea>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80018aa:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        break;
 80018b6:	e7b5      	b.n	8001824 <prvTimerTask+0x7c>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80018b8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80018c4:	9902      	ldr	r1, [sp, #8]
 80018c6:	61b1      	str	r1, [r6, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80018c8:	b131      	cbz	r1, 80018d8 <prvTimerTask+0x130>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80018ca:	4603      	mov	r3, r0
 80018cc:	4602      	mov	r2, r0
 80018ce:	4401      	add	r1, r0
 80018d0:	4630      	mov	r0, r6
 80018d2:	f7ff fee3 	bl	800169c <prvInsertTimerInActiveList>
                        break;
 80018d6:	e7a5      	b.n	8001824 <prvTimerTask+0x7c>
 80018d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018dc:	f383 8811 	msr	BASEPRI, r3
 80018e0:	f3bf 8f6f 	isb	sy
 80018e4:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80018e8:	e7fe      	b.n	80018e8 <prvTimerTask+0x140>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80018ea:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80018ee:	f013 0f02 	tst.w	r3, #2
 80018f2:	d004      	beq.n	80018fe <prvTimerTask+0x156>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 80018fc:	e792      	b.n	8001824 <prvTimerTask+0x7c>
                                    vPortFree( pxTimer );
 80018fe:	4630      	mov	r0, r6
 8001900:	f000 fad6 	bl	8001eb0 <vPortFree>
 8001904:	e78e      	b.n	8001824 <prvTimerTask+0x7c>
 8001906:	bf00      	nop
 8001908:	20000204 	.word	0x20000204
 800190c:	200002c8 	.word	0x200002c8
 8001910:	20000208 	.word	0x20000208

08001914 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001914:	b530      	push	{r4, r5, lr}
 8001916:	b083      	sub	sp, #12
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001918:	f000 f8cc 	bl	8001ab4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <prvCheckForValidListAndQueue+0x50>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b11b      	cbz	r3, 800192a <prvCheckForValidListAndQueue+0x16>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001922:	f000 f8e9 	bl	8001af8 <vPortExitCritical>
    }
 8001926:	b003      	add	sp, #12
 8001928:	bd30      	pop	{r4, r5, pc}
                vListInitialise( &xActiveTimerList1 );
 800192a:	4d0f      	ldr	r5, [pc, #60]	; (8001968 <prvCheckForValidListAndQueue+0x54>)
 800192c:	4628      	mov	r0, r5
 800192e:	f7fe fc9f 	bl	8000270 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001932:	4c0e      	ldr	r4, [pc, #56]	; (800196c <prvCheckForValidListAndQueue+0x58>)
 8001934:	4620      	mov	r0, r4
 8001936:	f7fe fc9b 	bl	8000270 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <prvCheckForValidListAndQueue+0x5c>)
 800193c:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <prvCheckForValidListAndQueue+0x60>)
 8001940:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8001942:	2300      	movs	r3, #0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <prvCheckForValidListAndQueue+0x64>)
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <prvCheckForValidListAndQueue+0x68>)
 800194a:	210c      	movs	r1, #12
 800194c:	2005      	movs	r0, #5
 800194e:	f7fe fdff 	bl	8000550 <xQueueGenericCreateStatic>
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <prvCheckForValidListAndQueue+0x50>)
 8001954:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
 8001956:	2800      	cmp	r0, #0
 8001958:	d0e3      	beq.n	8001922 <prvCheckForValidListAndQueue+0xe>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800195a:	4909      	ldr	r1, [pc, #36]	; (8001980 <prvCheckForValidListAndQueue+0x6c>)
 800195c:	f7ff f812 	bl	8000984 <vQueueAddToRegistry>
 8001960:	e7df      	b.n	8001922 <prvCheckForValidListAndQueue+0xe>
 8001962:	bf00      	nop
 8001964:	200002c8 	.word	0x200002c8
 8001968:	20000248 	.word	0x20000248
 800196c:	2000025c 	.word	0x2000025c
 8001970:	20000204 	.word	0x20000204
 8001974:	20000208 	.word	0x20000208
 8001978:	20000274 	.word	0x20000274
 800197c:	2000020c 	.word	0x2000020c
 8001980:	08003d7c 	.word	0x08003d7c

08001984 <xTimerCreateTimerTask>:
    {
 8001984:	b510      	push	{r4, lr}
 8001986:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
 8001988:	f7ff ffc4 	bl	8001914 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <xTimerCreateTimerTask+0x54>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b1cb      	cbz	r3, 80019c6 <xTimerCreateTimerTask+0x42>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8001992:	2400      	movs	r4, #0
 8001994:	9405      	str	r4, [sp, #20]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8001996:	9406      	str	r4, [sp, #24]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001998:	aa07      	add	r2, sp, #28
 800199a:	a906      	add	r1, sp, #24
 800199c:	a805      	add	r0, sp, #20
 800199e:	f000 fb89 	bl	80020b4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80019a2:	9b05      	ldr	r3, [sp, #20]
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	9b06      	ldr	r3, [sp, #24]
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2302      	movs	r3, #2
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	4623      	mov	r3, r4
 80019b0:	9a07      	ldr	r2, [sp, #28]
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <xTimerCreateTimerTask+0x58>)
 80019b4:	480a      	ldr	r0, [pc, #40]	; (80019e0 <xTimerCreateTimerTask+0x5c>)
 80019b6:	f7ff f9e5 	bl	8000d84 <xTaskCreateStatic>
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <xTimerCreateTimerTask+0x60>)
 80019bc:	6018      	str	r0, [r3, #0]
                    if( xTimerTaskHandle != NULL )
 80019be:	b110      	cbz	r0, 80019c6 <xTimerCreateTimerTask+0x42>
    }
 80019c0:	2001      	movs	r0, #1
 80019c2:	b008      	add	sp, #32
 80019c4:	bd10      	pop	{r4, pc}
 80019c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ca:	f383 8811 	msr	BASEPRI, r3
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 80019d6:	e7fe      	b.n	80019d6 <xTimerCreateTimerTask+0x52>
 80019d8:	200002c8 	.word	0x200002c8
 80019dc:	08003d84 	.word	0x08003d84
 80019e0:	080017a9 	.word	0x080017a9
 80019e4:	200002cc 	.word	0x200002cc

080019e8 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80019e8:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	9301      	str	r3, [sp, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <prvTaskExitError+0x3c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d008      	beq.n	8001a0a <prvTaskExitError+0x22>
 80019f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fc:	f383 8811 	msr	BASEPRI, r3
 8001a00:	f3bf 8f6f 	isb	sy
 8001a04:	f3bf 8f4f 	dsb	sy
 8001a08:	e7fe      	b.n	8001a08 <prvTaskExitError+0x20>
 8001a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0e:	f383 8811 	msr	BASEPRI, r3
 8001a12:	f3bf 8f6f 	isb	sy
 8001a16:	f3bf 8f4f 	dsb	sy
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0fc      	beq.n	8001a1a <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001a20:	b002      	add	sp, #8
 8001a22:	4770      	bx	lr
 8001a24:	20000004 	.word	0x20000004

08001a28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <prvPortStartFirstTask+0x24>)
 8001a2a:	6800      	ldr	r0, [r0, #0]
 8001a2c:	6800      	ldr	r0, [r0, #0]
 8001a2e:	f380 8808 	msr	MSP, r0
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f380 8814 	msr	CONTROL, r0
 8001a3a:	b662      	cpsie	i
 8001a3c:	b661      	cpsie	f
 8001a3e:	f3bf 8f4f 	dsb	sy
 8001a42:	f3bf 8f6f 	isb	sy
 8001a46:	df00      	svc	0
 8001a48:	bf00      	nop
 8001a4a:	0000      	.short	0x0000
 8001a4c:	e000ed08 	.word	0xe000ed08

08001a50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001a50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a60 <vPortEnableVFP+0x10>
 8001a54:	6801      	ldr	r1, [r0, #0]
 8001a56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a5a:	6001      	str	r1, [r0, #0]
 8001a5c:	4770      	bx	lr
 8001a5e:	0000      	.short	0x0000
 8001a60:	e000ed88 	.word	0xe000ed88

08001a64 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a68:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001a6c:	f021 0101 	bic.w	r1, r1, #1
 8001a70:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <pxPortInitialiseStack+0x28>)
 8001a76:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001a7a:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a7e:	f06f 0302 	mvn.w	r3, #2
 8001a82:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001a86:	3844      	subs	r0, #68	; 0x44
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	080019e9 	.word	0x080019e9

08001a90 <SVC_Handler>:
    __asm volatile (
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <pxCurrentTCBConst2>)
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	6808      	ldr	r0, [r1, #0]
 8001a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a9a:	f380 8809 	msr	PSP, r0
 8001a9e:	f3bf 8f6f 	isb	sy
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	f380 8811 	msr	BASEPRI, r0
 8001aaa:	4770      	bx	lr
 8001aac:	f3af 8000 	nop.w

08001ab0 <pxCurrentTCBConst2>:
 8001ab0:	200000f8 	.word	0x200000f8

08001ab4 <vPortEnterCritical>:
 8001ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab8:	f383 8811 	msr	BASEPRI, r3
 8001abc:	f3bf 8f6f 	isb	sy
 8001ac0:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <vPortEnterCritical+0x40>)
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d000      	beq.n	8001ad2 <vPortEnterCritical+0x1e>
}
 8001ad0:	4770      	bx	lr
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ad2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ad6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8001ada:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001ade:	d0f7      	beq.n	8001ad0 <vPortEnterCritical+0x1c>
 8001ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	f3bf 8f6f 	isb	sy
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	e7fe      	b.n	8001af0 <vPortEnterCritical+0x3c>
 8001af2:	bf00      	nop
 8001af4:	20000004 	.word	0x20000004

08001af8 <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <vPortExitCritical+0x28>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b943      	cbnz	r3, 8001b10 <vPortExitCritical+0x18>
 8001afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	e7fe      	b.n	8001b0e <vPortExitCritical+0x16>
    uxCriticalNesting--;
 8001b10:	3b01      	subs	r3, #1
 8001b12:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <vPortExitCritical+0x28>)
 8001b14:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8001b16:	b90b      	cbnz	r3, 8001b1c <vPortExitCritical+0x24>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001b18:	f383 8811 	msr	BASEPRI, r3
}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000004 	.word	0x20000004
	...

08001b30 <PendSV_Handler>:
    __asm volatile
 8001b30:	f3ef 8009 	mrs	r0, PSP
 8001b34:	f3bf 8f6f 	isb	sy
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <pxCurrentTCBConst>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f01e 0f10 	tst.w	lr, #16
 8001b40:	bf08      	it	eq
 8001b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b4a:	6010      	str	r0, [r2, #0]
 8001b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b54:	f380 8811 	msr	BASEPRI, r0
 8001b58:	f3bf 8f4f 	dsb	sy
 8001b5c:	f3bf 8f6f 	isb	sy
 8001b60:	f7ff fb96 	bl	8001290 <vTaskSwitchContext>
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	f380 8811 	msr	BASEPRI, r0
 8001b6c:	bc09      	pop	{r0, r3}
 8001b6e:	6819      	ldr	r1, [r3, #0]
 8001b70:	6808      	ldr	r0, [r1, #0]
 8001b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b76:	f01e 0f10 	tst.w	lr, #16
 8001b7a:	bf08      	it	eq
 8001b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b80:	f380 8809 	msr	PSP, r0
 8001b84:	f3bf 8f6f 	isb	sy
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w

08001b90 <pxCurrentTCBConst>:
 8001b90:	200000f8 	.word	0x200000f8

08001b94 <SysTick_Handler>:
{
 8001b94:	b508      	push	{r3, lr}
        __asm volatile
 8001b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
 8001ba6:	f7ff f9b7 	bl	8000f18 <xTaskIncrementTick>
 8001baa:	b128      	cbz	r0, 8001bb8 <SysTick_Handler+0x24>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001bac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f383 8811 	msr	BASEPRI, r3
}
 8001bbe:	bd08      	pop	{r3, pc}

08001bc0 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001bc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001bc8:	619a      	str	r2, [r3, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001bca:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001bce:	615a      	str	r2, [r3, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	611a      	str	r2, [r3, #16]
}
 8001bd4:	4770      	bx	lr
	...

08001bd8 <xPortStartScheduler>:
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001bd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bdc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001be0:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <xPortStartScheduler+0x104>)
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d03b      	beq.n	8001c5e <xPortStartScheduler+0x86>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001be6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001bee:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <xPortStartScheduler+0x108>)
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d03d      	beq.n	8001c70 <xPortStartScheduler+0x98>
{
 8001bf4:	b530      	push	{r4, r5, lr}
 8001bf6:	b083      	sub	sp, #12
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <xPortStartScheduler+0x10c>)
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001c00:	22ff      	movs	r2, #255	; 0xff
 8001c02:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c14:	4a34      	ldr	r2, [pc, #208]	; (8001ce8 <xPortStartScheduler+0x110>)
 8001c16:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <xPortStartScheduler+0x114>)
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001c22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c26:	d011      	beq.n	8001c4c <xPortStartScheduler+0x74>
 8001c28:	2206      	movs	r2, #6
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001c2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c42:	d1f2      	bne.n	8001c2a <xPortStartScheduler+0x52>
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <xPortStartScheduler+0x114>)
 8001c46:	6019      	str	r1, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001c48:	2903      	cmp	r1, #3
 8001c4a:	d01a      	beq.n	8001c82 <xPortStartScheduler+0xaa>
        __asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	e7fe      	b.n	8001c5c <xPortStartScheduler+0x84>
 8001c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c62:	f383 8811 	msr	BASEPRI, r3
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	f3bf 8f4f 	dsb	sy
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001c6e:	e7fe      	b.n	8001c6e <xPortStartScheduler+0x96>
 8001c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c74:	f383 8811 	msr	BASEPRI, r3
 8001c78:	f3bf 8f6f 	isb	sy
 8001c7c:	f3bf 8f4f 	dsb	sy
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001c80:	e7fe      	b.n	8001c80 <xPortStartScheduler+0xa8>
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <xPortStartScheduler+0x114>)
 8001c84:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c88:	601a      	str	r2, [r3, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c8a:	9b01      	ldr	r3, [sp, #4]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <xPortStartScheduler+0x10c>)
 8001c90:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001c92:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8001c96:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8001c9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001ca2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8001ca6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001caa:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 8001cae:	f7ff ff87 	bl	8001bc0 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8001cb2:	2500      	movs	r5, #0
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <xPortStartScheduler+0x118>)
 8001cb6:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 8001cb8:	f7ff feca 	bl	8001a50 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001cbc:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8001cc0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001cc4:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
    prvPortStartFirstTask();
 8001cc8:	f7ff feae 	bl	8001a28 <prvPortStartFirstTask>
    vTaskSwitchContext();
 8001ccc:	f7ff fae0 	bl	8001290 <vTaskSwitchContext>
    prvTaskExitError();
 8001cd0:	f7ff fe8a 	bl	80019e8 <prvTaskExitError>
}
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	b003      	add	sp, #12
 8001cd8:	bd30      	pop	{r4, r5, pc}
 8001cda:	bf00      	nop
 8001cdc:	410fc271 	.word	0x410fc271
 8001ce0:	410fc270 	.word	0x410fc270
 8001ce4:	e000e400 	.word	0xe000e400
 8001ce8:	200002d0 	.word	0x200002d0
 8001cec:	200002d4 	.word	0x200002d4
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <prvInsertBlockIntoFreeList+0x58>)
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4283      	cmp	r3, r0
 8001cfc:	d3fb      	bcc.n	8001cf6 <prvInsertBlockIntoFreeList+0x2>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cfe:	6851      	ldr	r1, [r2, #4]
 8001d00:	eb02 0c01 	add.w	ip, r2, r1
 8001d04:	4560      	cmp	r0, ip
 8001d06:	d009      	beq.n	8001d1c <prvInsertBlockIntoFreeList+0x28>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d08:	6841      	ldr	r1, [r0, #4]
 8001d0a:	eb00 0c01 	add.w	ip, r0, r1
 8001d0e:	4563      	cmp	r3, ip
 8001d10:	d009      	beq.n	8001d26 <prvInsertBlockIntoFreeList+0x32>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d12:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001d14:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d16:	bf18      	it	ne
 8001d18:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
 8001d1a:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d1c:	6840      	ldr	r0, [r0, #4]
 8001d1e:	4401      	add	r1, r0
 8001d20:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8001d22:	4610      	mov	r0, r2
 8001d24:	e7f0      	b.n	8001d08 <prvInsertBlockIntoFreeList+0x14>
{
 8001d26:	b410      	push	{r4}
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d28:	4c09      	ldr	r4, [pc, #36]	; (8001d50 <prvInsertBlockIntoFreeList+0x5c>)
 8001d2a:	6824      	ldr	r4, [r4, #0]
 8001d2c:	42a3      	cmp	r3, r4
 8001d2e:	d00b      	beq.n	8001d48 <prvInsertBlockIntoFreeList+0x54>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4419      	add	r1, r3
 8001d34:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6003      	str	r3, [r0, #0]
    if( pxIterator != pxBlockToInsert )
 8001d3c:	4290      	cmp	r0, r2
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d3e:	bf18      	it	ne
 8001d40:	6010      	strne	r0, [r2, #0]
    }
}
 8001d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d46:	4770      	bx	lr
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d48:	6004      	str	r4, [r0, #0]
 8001d4a:	e7f7      	b.n	8001d3c <prvInsertBlockIntoFreeList+0x48>
 8001d4c:	200042f0 	.word	0x200042f0
 8001d50:	200002d8 	.word	0x200002d8

08001d54 <pvPortMalloc>:
{
 8001d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d56:	4604      	mov	r4, r0
    vTaskSuspendAll();
 8001d58:	f7ff f8d0 	bl	8000efc <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <pvPortMalloc+0x140>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b1a3      	cbz	r3, 8001d8c <pvPortMalloc+0x38>
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d62:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <pvPortMalloc+0x144>)
 8001d64:	681d      	ldr	r5, [r3, #0]
 8001d66:	4225      	tst	r5, r4
 8001d68:	d136      	bne.n	8001dd8 <pvPortMalloc+0x84>
            if( ( xWantedSize > 0 ) &&
 8001d6a:	1e63      	subs	r3, r4, #1
 8001d6c:	f113 0f0a 	cmn.w	r3, #10
 8001d70:	d835      	bhi.n	8001dde <pvPortMalloc+0x8a>
                xWantedSize += xHeapStructSize;
 8001d72:	f104 0208 	add.w	r2, r4, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d76:	f014 0f07 	tst.w	r4, #7
 8001d7a:	d038      	beq.n	8001dee <pvPortMalloc+0x9a>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8001d7c:	f022 0307 	bic.w	r3, r2, #7
 8001d80:	3308      	adds	r3, #8
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d832      	bhi.n	8001dec <pvPortMalloc+0x98>
    ( void ) xTaskResumeAll();
 8001d86:	f7ff f9a1 	bl	80010cc <xTaskResumeAll>
            if( pvReturn == NULL )
 8001d8a:	e02a      	b.n	8001de2 <pvPortMalloc+0x8e>
    uxAddress = ( size_t ) ucHeap;
 8001d8c:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <pvPortMalloc+0x148>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d8e:	f012 0f07 	tst.w	r2, #7
 8001d92:	d01e      	beq.n	8001dd2 <pvPortMalloc+0x7e>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d94:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d96:	f021 0107 	bic.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d9a:	f502 4380 	add.w	r3, r2, #16384	; 0x4000
 8001d9e:	1a5b      	subs	r3, r3, r1
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001da0:	460a      	mov	r2, r1
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001da2:	483f      	ldr	r0, [pc, #252]	; (8001ea0 <pvPortMalloc+0x14c>)
 8001da4:	6002      	str	r2, [r0, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001da6:	2100      	movs	r1, #0
 8001da8:	6041      	str	r1, [r0, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001daa:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8001dac:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001dae:	f023 0307 	bic.w	r3, r3, #7
    pxEnd = ( void * ) uxAddress;
 8001db2:	4838      	ldr	r0, [pc, #224]	; (8001e94 <pvPortMalloc+0x140>)
 8001db4:	6003      	str	r3, [r0, #0]
    pxEnd->xBlockSize = 0;
 8001db6:	6059      	str	r1, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001db8:	6019      	str	r1, [r3, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001dba:	1a99      	subs	r1, r3, r2
 8001dbc:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001dbe:	6013      	str	r3, [r2, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001dc0:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <pvPortMalloc+0x150>)
 8001dc2:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <pvPortMalloc+0x154>)
 8001dc6:	6019      	str	r1, [r3, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <pvPortMalloc+0x144>)
 8001dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dce:	601a      	str	r2, [r3, #0]
}
 8001dd0:	e7c7      	b.n	8001d62 <pvPortMalloc+0xe>
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001dd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd6:	e7e4      	b.n	8001da2 <pvPortMalloc+0x4e>
    ( void ) xTaskResumeAll();
 8001dd8:	f7ff f978 	bl	80010cc <xTaskResumeAll>
            if( pvReturn == NULL )
 8001ddc:	e001      	b.n	8001de2 <pvPortMalloc+0x8e>
    ( void ) xTaskResumeAll();
 8001dde:	f7ff f975 	bl	80010cc <xTaskResumeAll>
                vApplicationMallocFailedHook();
 8001de2:	f000 f959 	bl	8002098 <vApplicationMallocFailedHook>
 8001de6:	2600      	movs	r6, #0
}
 8001de8:	4630      	mov	r0, r6
 8001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001dec:	461a      	mov	r2, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <pvPortMalloc+0x154>)
 8001df0:	681f      	ldr	r7, [r3, #0]
 8001df2:	4297      	cmp	r7, r2
 8001df4:	d302      	bcc.n	8001dfc <pvPortMalloc+0xa8>
                pxBlock = xStart.pxNextFreeBlock;
 8001df6:	492a      	ldr	r1, [pc, #168]	; (8001ea0 <pvPortMalloc+0x14c>)
 8001df8:	680c      	ldr	r4, [r1, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dfa:	e004      	b.n	8001e06 <pvPortMalloc+0xb2>
    ( void ) xTaskResumeAll();
 8001dfc:	f7ff f966 	bl	80010cc <xTaskResumeAll>
            if( pvReturn == NULL )
 8001e00:	e7ef      	b.n	8001de2 <pvPortMalloc+0x8e>
 8001e02:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001e04:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d202      	bcs.n	8001e12 <pvPortMalloc+0xbe>
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f7      	bne.n	8001e02 <pvPortMalloc+0xae>
                if( pxBlock != pxEnd )
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <pvPortMalloc+0x140>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	42a3      	cmp	r3, r4
 8001e18:	d014      	beq.n	8001e44 <pvPortMalloc+0xf0>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e1a:	680e      	ldr	r6, [r1, #0]
 8001e1c:	3608      	adds	r6, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	600b      	str	r3, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e22:	6863      	ldr	r3, [r4, #4]
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d913      	bls.n	8001e52 <pvPortMalloc+0xfe>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e2a:	18a0      	adds	r0, r4, r2
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e2c:	f010 0f07 	tst.w	r0, #7
 8001e30:	d00b      	beq.n	8001e4a <pvPortMalloc+0xf6>
 8001e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e36:	f383 8811 	msr	BASEPRI, r3
 8001e3a:	f3bf 8f6f 	isb	sy
 8001e3e:	f3bf 8f4f 	dsb	sy
 8001e42:	e7fe      	b.n	8001e42 <pvPortMalloc+0xee>
    ( void ) xTaskResumeAll();
 8001e44:	f7ff f942 	bl	80010cc <xTaskResumeAll>
            if( pvReturn == NULL )
 8001e48:	e7cb      	b.n	8001de2 <pvPortMalloc+0x8e>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e4a:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001e4c:	6062      	str	r2, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e4e:	f7ff ff51 	bl	8001cf4 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e52:	6863      	ldr	r3, [r4, #4]
 8001e54:	1aff      	subs	r7, r7, r3
 8001e56:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <pvPortMalloc+0x154>)
 8001e58:	6017      	str	r7, [r2, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <pvPortMalloc+0x150>)
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	4297      	cmp	r7, r2
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e60:	bf3c      	itt	cc
 8001e62:	4a10      	ldrcc	r2, [pc, #64]	; (8001ea4 <pvPortMalloc+0x150>)
 8001e64:	6017      	strcc	r7, [r2, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e66:	431d      	orrs	r5, r3
 8001e68:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <pvPortMalloc+0x158>)
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 8001e76:	f7ff f929 	bl	80010cc <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e7a:	f016 0f07 	tst.w	r6, #7
 8001e7e:	d0b3      	beq.n	8001de8 <pvPortMalloc+0x94>
 8001e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e84:	f383 8811 	msr	BASEPRI, r3
 8001e88:	f3bf 8f6f 	isb	sy
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	e7fe      	b.n	8001e90 <pvPortMalloc+0x13c>
 8001e92:	bf00      	nop
 8001e94:	200002d8 	.word	0x200002d8
 8001e98:	200042dc 	.word	0x200042dc
 8001e9c:	200002dc 	.word	0x200002dc
 8001ea0:	200042f0 	.word	0x200042f0
 8001ea4:	200042e4 	.word	0x200042e4
 8001ea8:	200042e0 	.word	0x200042e0
 8001eac:	200042e8 	.word	0x200042e8

08001eb0 <vPortFree>:
    if( pv != NULL )
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d033      	beq.n	8001f1c <vPortFree+0x6c>
{
 8001eb4:	b510      	push	{r4, lr}
 8001eb6:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001eb8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001ebc:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <vPortFree+0x70>)
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4213      	tst	r3, r2
 8001ec2:	d108      	bne.n	8001ed6 <vPortFree+0x26>
 8001ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	e7fe      	b.n	8001ed4 <vPortFree+0x24>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ed6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001eda:	b141      	cbz	r1, 8001eee <vPortFree+0x3e>
 8001edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee0:	f383 8811 	msr	BASEPRI, r3
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	e7fe      	b.n	8001eec <vPortFree+0x3c>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001eee:	ea23 0302 	bic.w	r3, r3, r2
 8001ef2:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8001ef6:	f7ff f801 	bl	8000efc <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <vPortFree+0x74>)
 8001efc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001f00:	6811      	ldr	r1, [r2, #0]
 8001f02:	440b      	add	r3, r1
 8001f04:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f06:	f1a4 0008 	sub.w	r0, r4, #8
 8001f0a:	f7ff fef3 	bl	8001cf4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001f0e:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <vPortFree+0x78>)
 8001f10:	6813      	ldr	r3, [r2, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8001f16:	f7ff f8d9 	bl	80010cc <xTaskResumeAll>
}
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200042dc 	.word	0x200042dc
 8001f24:	200042e0 	.word	0x200042e0
 8001f28:	200042ec 	.word	0x200042ec

08001f2c <myTask1>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    configASSERT( NULL );
}

void myTask1 (void *p){
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	b088      	sub	sp, #32
	int count = 0;

	char TxBuf[30];

	myQueue = xQueueCreate(5,sizeof(TxBuf));
 8001f30:	2200      	movs	r2, #0
 8001f32:	211e      	movs	r1, #30
 8001f34:	2005      	movs	r0, #5
 8001f36:	f7fe fb53 	bl	80005e0 <xQueueGenericCreate>
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	4d15      	ldr	r5, [pc, #84]	; (8001f94 <myTask1+0x68>)
 8001f3e:	6028      	str	r0, [r5, #0]

	sprintf(TxBuf, "message 1");
 8001f40:	4c15      	ldr	r4, [pc, #84]	; (8001f98 <myTask1+0x6c>)
 8001f42:	466b      	mov	r3, sp
 8001f44:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f48:	c303      	stmia	r3!, {r0, r1}
 8001f4a:	801a      	strh	r2, [r3, #0]
	xQueueSend(myQueue, (void*) TxBuf, (TickType_t) 5);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2205      	movs	r2, #5
 8001f50:	4669      	mov	r1, sp
 8001f52:	4630      	mov	r0, r6
 8001f54:	f7fe fb74 	bl	8000640 <xQueueGenericSend>

	sprintf(TxBuf, "message 2");
 8001f58:	f104 020c 	add.w	r2, r4, #12
 8001f5c:	466b      	mov	r3, sp
 8001f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f60:	c303      	stmia	r3!, {r0, r1}
 8001f62:	801a      	strh	r2, [r3, #0]
	xQueueSend(myQueue, (void*) TxBuf, (TickType_t) 5);
 8001f64:	2300      	movs	r3, #0
 8001f66:	2205      	movs	r2, #5
 8001f68:	4669      	mov	r1, sp
 8001f6a:	6828      	ldr	r0, [r5, #0]
 8001f6c:	f7fe fb68 	bl	8000640 <xQueueGenericSend>

	sprintf(TxBuf, "message 3");
 8001f70:	3418      	adds	r4, #24
 8001f72:	466b      	mov	r3, sp
 8001f74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f78:	c303      	stmia	r3!, {r0, r1}
 8001f7a:	801a      	strh	r2, [r3, #0]
	xQueueSend(myQueue, (void*) TxBuf, (TickType_t) 5);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2205      	movs	r2, #5
 8001f80:	4669      	mov	r1, sp
 8001f82:	6828      	ldr	r0, [r5, #0]
 8001f84:	f7fe fb5c 	bl	8000640 <xQueueGenericSend>

	while(1){
		//printf("Test: %d\r\n", count++);
		vTaskDelay(1000);
 8001f88:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff f959 	bl	8001244 <vTaskDelay>
	while(1){
 8001f92:	e7fb      	b.n	8001f8c <myTask1+0x60>
 8001f94:	20004bcc 	.word	0x20004bcc
 8001f98:	08003d2c 	.word	0x08003d2c

08001f9c <myTask2>:
	}

}

void myTask2(void *p){
 8001f9c:	b500      	push	{lr}
 8001f9e:	b089      	sub	sp, #36	; 0x24

	char RxBuf[30];

	while(1){
			if(myQueue!=0){
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	; (8001fcc <myTask2+0x30>)
				if(xQueueReceive(myQueue, (void *) RxBuf, (TickType_t) 5)){
					printf("data received: %s\r\n", RxBuf);
 8001fa2:	4d0b      	ldr	r5, [pc, #44]	; (8001fd0 <myTask2+0x34>)
 8001fa4:	e003      	b.n	8001fae <myTask2+0x12>
				}


			}else vTaskDelay(1000);
 8001fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001faa:	f7ff f94b 	bl	8001244 <vTaskDelay>
			if(myQueue!=0){
 8001fae:	6820      	ldr	r0, [r4, #0]
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d0f8      	beq.n	8001fa6 <myTask2+0xa>
				if(xQueueReceive(myQueue, (void *) RxBuf, (TickType_t) 5)){
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	4669      	mov	r1, sp
 8001fb8:	f7fe fc32 	bl	8000820 <xQueueReceive>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d0f6      	beq.n	8001fae <myTask2+0x12>
					printf("data received: %s\r\n", RxBuf);
 8001fc0:	4669      	mov	r1, sp
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	f000 fee8 	bl	8002d98 <iprintf>
 8001fc8:	e7f1      	b.n	8001fae <myTask2+0x12>
 8001fca:	bf00      	nop
 8001fcc:	20004bcc 	.word	0x20004bcc
 8001fd0:	08003d50 	.word	0x08003d50

08001fd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001fd4:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001fd6:	6804      	ldr	r4, [r0, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	fa91 f3a1 	rbit	r3, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	f04f 0c03 	mov.w	ip, #3
 8001fe6:	fa0c f303 	lsl.w	r3, ip, r3
 8001fea:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8001ff2:	fab1 f181 	clz	r1, r1
 8001ff6:	0049      	lsls	r1, r1, #1
 8001ff8:	fa02 f101 	lsl.w	r1, r2, r1
 8001ffc:	4319      	orrs	r1, r3
 8001ffe:	6001      	str	r1, [r0, #0]
}
 8002000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002006:	b410      	push	{r4}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002008:	6884      	ldr	r4, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	f04f 0c03 	mov.w	ip, #3
 8002018:	fa0c f303 	lsl.w	r3, ip, r3
 800201c:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8002024:	fab1 f181 	clz	r1, r1
 8002028:	0049      	lsls	r1, r1, #1
 800202a:	fa02 f101 	lsl.w	r1, r2, r1
 800202e:	4319      	orrs	r1, r3
 8002030:	6081      	str	r1, [r0, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002038:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800203a:	68c4      	ldr	r4, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	f04f 0c03 	mov.w	ip, #3
 800204a:	fa0c f303 	lsl.w	r3, ip, r3
 800204e:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8002056:	fab1 f181 	clz	r1, r1
 800205a:	0049      	lsls	r1, r1, #1
 800205c:	fa02 f101 	lsl.w	r1, r2, r1
 8002060:	4319      	orrs	r1, r3
 8002062:	60c1      	str	r1, [r0, #12]
}
 8002064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002068:	4770      	bx	lr

0800206a <board_gpio_set_output>:
#define BOARD_BAT2_CONNECT_PIN          LL_GPIO_PIN_9
    #endif

static inline void board_gpio_set_output(GPIO_TypeDef *GPIOx, uint32_t Pin,
		uint32_t Pull, uint32_t Speed)
{
 800206a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206c:	4604      	mov	r4, r0
 800206e:	460d      	mov	r5, r1
 8002070:	4617      	mov	r7, r2
 8002072:	461e      	mov	r6, r3
	LL_GPIO_SetPinMode(GPIOx, Pin, LL_GPIO_MODE_OUTPUT);
 8002074:	2201      	movs	r2, #1
 8002076:	f7ff ffad 	bl	8001fd4 <LL_GPIO_SetPinMode>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800207a:	6863      	ldr	r3, [r4, #4]
 800207c:	ea23 0305 	bic.w	r3, r3, r5
 8002080:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOx, Pin, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOx, Pin, Pull);
 8002082:	463a      	mov	r2, r7
 8002084:	4629      	mov	r1, r5
 8002086:	4620      	mov	r0, r4
 8002088:	f7ff ffd6 	bl	8002038 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(GPIOx, Pin, Speed);
 800208c:	4632      	mov	r2, r6
 800208e:	4629      	mov	r1, r5
 8002090:	4620      	mov	r0, r4
 8002092:	f7ff ffb8 	bl	8002006 <LL_GPIO_SetPinSpeed>
}
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002098 <vApplicationMallocFailedHook>:
     for( ;; );
 8002098:	e7fe      	b.n	8002098 <vApplicationMallocFailedHook>
	...

0800209c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &Idle_TCB;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <vApplicationGetIdleTaskMemory+0x10>)
 800209e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = Idle_Stack;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <vApplicationGetIdleTaskMemory+0x14>)
 80020a2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]
}
 80020aa:	4770      	bx	lr
 80020ac:	200046f8 	.word	0x200046f8
 80020b0:	200042f8 	.word	0x200042f8

080020b4 <vApplicationGetTimerTaskMemory>:
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <vApplicationGetTimerTaskMemory+0x10>)
 80020b6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = Timer_Stack;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <vApplicationGetTimerTaskMemory+0x14>)
 80020ba:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = configTIMER_TASK_STACK_DEPTH;
 80020bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]
}
 80020c2:	4770      	bx	lr
 80020c4:	20004b60 	.word	0x20004b60
 80020c8:	20004760 	.word	0x20004760

080020cc <vApplicationStackOverflowHook>:
 80020cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d0:	f383 8811 	msr	BASEPRI, r3
 80020d4:	f3bf 8f6f 	isb	sy
 80020d8:	f3bf 8f4f 	dsb	sy
    configASSERT( NULL );
 80020dc:	e7fe      	b.n	80020dc <vApplicationStackOverflowHook+0x10>
	...

080020e0 <main>:
uint8_t k=0;

uint8_t res_erase;

int main(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8


	clock_init();
 80020e4:	f000 f9d2 	bl	800248c <clock_init>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4999      	ldr	r1, [pc, #612]	; (8002350 <main+0x270>)
 80020ea:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020f0:	0412      	lsls	r2, r2, #16
 80020f2:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 80020f4:	4b97      	ldr	r3, [pc, #604]	; (8002354 <main+0x274>)
 80020f6:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80020f8:	60cb      	str	r3, [r1, #12]

static inline void board_gpio_init()
{
	/* DBG1 */
	board_gpio_set_output(BOARD_DEBUG1_GPIO, BOARD_DEBUG1_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80020fa:	2303      	movs	r3, #3
 80020fc:	2200      	movs	r2, #0
 80020fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002106:	f7ff ffb0 	bl	800206a <board_gpio_set_output>

	/* SPI FLASH Vdd on/off */
	board_gpio_set_output(BOARD_SPI_FLASH_GPIO, BOARD_SPI_FLASH_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800210a:	4c93      	ldr	r4, [pc, #588]	; (8002358 <main+0x278>)
 800210c:	2300      	movs	r3, #0
 800210e:	461a      	mov	r2, r3
 8002110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff ffa8 	bl	800206a <board_gpio_set_output>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800211a:	f44f 7800 	mov.w	r8, #512	; 0x200
 800211e:	f8c4 8018 	str.w	r8, [r4, #24]
    LL_GPIO_SetOutputPin(BOARD_SPI_FLASH_GPIO, BOARD_SPI_FLASH_PIN);    // off flash pwr

	/* SPI FLASH CS */
	board_gpio_set_output(BOARD_SPI_FLASH_CS_GPIO, BOARD_SPI_FLASH_CS_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002122:	2300      	movs	r3, #0
 8002124:	461a      	mov	r2, r3
 8002126:	2110      	movs	r1, #16
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f7ff ff9d 	bl	800206a <board_gpio_set_output>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002130:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8002134:	2310      	movs	r3, #16
 8002136:	62ab      	str	r3, [r5, #40]	; 0x28
    LL_GPIO_ResetOutputPin(BOARD_SPI_FLASH_CS_GPIO, BOARD_SPI_FLASH_CS_PIN);    // CS = 0, while flash power is off

    //AXSEM Tx supply
	board_gpio_set_output(BOARD_RADIO_TX_GPIO, BOARD_RADIO_TX_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002138:	4e88      	ldr	r6, [pc, #544]	; (800235c <main+0x27c>)
 800213a:	2300      	movs	r3, #0
 800213c:	461a      	mov	r2, r3
 800213e:	2108      	movs	r1, #8
 8002140:	4630      	mov	r0, r6
 8002142:	f7ff ff92 	bl	800206a <board_gpio_set_output>
 8002146:	2708      	movs	r7, #8
 8002148:	62b7      	str	r7, [r6, #40]	; 0x28
    LL_GPIO_ResetOutputPin(BOARD_RADIO_TX_GPIO, BOARD_RADIO_TX_PIN);    // off Tx power

	// AXSEM Rx supply
	board_gpio_set_output(BOARD_RADIO_RX_GPIO, BOARD_RADIO_RX_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800214a:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8002394 <main+0x2b4>
 800214e:	2300      	movs	r3, #0
 8002150:	461a      	mov	r2, r3
 8002152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002156:	4648      	mov	r0, r9
 8002158:	f7ff ff87 	bl	800206a <board_gpio_set_output>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800215c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8002160:	f8c9 6018 	str.w	r6, [r9, #24]
    LL_GPIO_SetOutputPin(BOARD_RADIO_RX_GPIO, BOARD_RADIO_RX_PIN);      // off Rx power

	/* AMP1 */
	board_gpio_set_output(BOARD_AMP1_PWR_GPIO, BOARD_AMP1_PWR_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002164:	2300      	movs	r3, #0
 8002166:	461a      	mov	r2, r3
 8002168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216c:	4628      	mov	r0, r5
 800216e:	f7ff ff7c 	bl	800206a <board_gpio_set_output>

	/* TMP PWR */
	board_gpio_set_output(BOARD_TEMP_PWR_GPIO, BOARD_TEMP_PWR_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002172:	2300      	movs	r3, #0
 8002174:	461a      	mov	r2, r3
 8002176:	2102      	movs	r1, #2
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff ff76 	bl	800206a <board_gpio_set_output>

	/* LED */
	board_gpio_set_output(BOARD_LED_GPIO, BOARD_LED_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800217e:	2300      	movs	r3, #0
 8002180:	461a      	mov	r2, r3
 8002182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff ff6f 	bl	800206a <board_gpio_set_output>

	/* SELECT */
	board_gpio_set_output(BOARD_SELECT_GPIO, BOARD_SELECT_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800218c:	2300      	movs	r3, #0
 800218e:	461a      	mov	r2, r3
 8002190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002194:	4628      	mov	r0, r5
 8002196:	f7ff ff68 	bl	800206a <board_gpio_set_output>

	/* TX SENS ENABLE*/
	board_gpio_set_output(BOARD_SENS_TX_EN_GPIO, BOARD_SENS_TX_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800219a:	2300      	movs	r3, #0
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff ff61 	bl	800206a <board_gpio_set_output>

	/* SHUNT SENS ENABLE*/
	board_gpio_set_output(BOARD_SENS_SH_EN_GPIO, BOARD_SENS_SH_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 80021a8:	2300      	movs	r3, #0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4641      	mov	r1, r8
 80021ae:	4628      	mov	r0, r5
 80021b0:	f7ff ff5b 	bl	800206a <board_gpio_set_output>

    board_gpio_set_output(BOARD_SENS_SH_2_EN_GPIO, BOARD_SENS_SH_2_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 80021b4:	2300      	movs	r3, #0
 80021b6:	461a      	mov	r2, r3
 80021b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021bc:	4628      	mov	r0, r5
 80021be:	f7ff ff54 	bl	800206a <board_gpio_set_output>

	/* S0L */
	//LL_GPIO_SetPinMode(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_MODE_ALTERNATE);
    LL_GPIO_SetPinMode(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_MODE_OUTPUT);
 80021c2:	2201      	movs	r2, #1
 80021c4:	4631      	mov	r1, r6
 80021c6:	4620      	mov	r0, r4
 80021c8:	f7ff ff04 	bl	8001fd4 <LL_GPIO_SetPinMode>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80021cc:	6863      	ldr	r3, [r4, #4]
 80021ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021d2:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_OUTPUT_PUSHPULL);
	//LL_GPIO_SetAFPin_8_15(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_AF_14);
	LL_GPIO_SetPinPull(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_PULL_NO);
 80021d4:	2200      	movs	r2, #0
 80021d6:	4631      	mov	r1, r6
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff2d 	bl	8002038 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_SPEED_FREQ_LOW);
 80021de:	2200      	movs	r2, #0
 80021e0:	4631      	mov	r1, r6
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff0f 	bl	8002006 <LL_GPIO_SetPinSpeed>

	/* S0H */
	//LL_GPIO_SetPinMode(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_MODE_ALTERNATE);
    LL_GPIO_SetPinMode(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_MODE_OUTPUT);
 80021e8:	2201      	movs	r2, #1
 80021ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff fef0 	bl	8001fd4 <LL_GPIO_SetPinMode>
 80021f4:	6863      	ldr	r3, [r4, #4]
 80021f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fa:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_OUTPUT_PUSHPULL);
	//LL_GPIO_SetAFPin_8_15(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_AF_14);
	LL_GPIO_SetPinPull(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_PULL_NO);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002202:	4620      	mov	r0, r4
 8002204:	f7ff ff18 	bl	8002038 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_SPEED_FREQ_LOW);
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800220e:	4620      	mov	r0, r4
 8002210:	f7ff fef9 	bl	8002006 <LL_GPIO_SetPinSpeed>

    LL_GPIO_SetPinMode(BOARD_ENCOUNT_GPIO, BOARD_ENCOUNT_PIN, LL_GPIO_MODE_INPUT);
 8002214:	2200      	movs	r2, #0
 8002216:	4639      	mov	r1, r7
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff fedb 	bl	8001fd4 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(BOARD_ENCOUNT_GPIO, BOARD_ENCOUNT_PIN, LL_GPIO_PULL_NO);
 800221e:	2200      	movs	r2, #0
 8002220:	4639      	mov	r1, r7
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff ff08 	bl	8002038 <LL_GPIO_SetPinPull>

    LL_GPIO_SetPinMode(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_MODE_OUTPUT);
 8002228:	2201      	movs	r2, #1
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff fed1 	bl	8001fd4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_PULL_NO);
 8002232:	2200      	movs	r2, #0
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff fefe 	bl	8002038 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_SPEED_FREQ_LOW);
 800223c:	2200      	movs	r2, #0
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff fee0 	bl	8002006 <LL_GPIO_SetPinSpeed>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002246:	2340      	movs	r3, #64	; 0x40
 8002248:	62a3      	str	r3, [r4, #40]	; 0x28

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

	board_gpio_init();				/* Initialize board IO */

	SpiInit();
 800224a:	f000 f941 	bl	80024d0 <SpiInit>
	spiFlash_init();
 800224e:	f000 fb17 	bl	8002880 <spiFlash_init>
	spiFlash_powerOn();
 8002252:	f000 fba5 	bl	80029a0 <spiFlash_powerOn>

	wr_en=spiFlash_wrtEnbl();
 8002256:	f000 fc6f 	bl	8002b38 <spiFlash_wrtEnbl>
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <main+0x280>)
 800225c:	7018      	strb	r0, [r3, #0]

	stat_reg1=spiFlash_readStatus(CMD_READ_STATUS_REG1);
 800225e:	2005      	movs	r0, #5
 8002260:	f000 fc4a 	bl	8002af8 <spiFlash_readStatus>
 8002264:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <main+0x284>)
 8002266:	8018      	strh	r0, [r3, #0]
	stat_reg2=spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8002268:	2035      	movs	r0, #53	; 0x35
 800226a:	f000 fc45 	bl	8002af8 <spiFlash_readStatus>
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <main+0x288>)
 8002270:	8018      	strh	r0, [r3, #0]

	res_erase=spiFlash_eraseSector(0);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 fc7a 	bl	8002b6c <spiFlash_eraseSector>
 8002278:	4b3c      	ldr	r3, [pc, #240]	; (800236c <main+0x28c>)
 800227a:	7018      	strb	r0, [r3, #0]
	do {
		stat_reg1=spiFlash_readStatus(CMD_READ_STATUS_REG1);
 800227c:	2505      	movs	r5, #5
 800227e:	4c39      	ldr	r4, [pc, #228]	; (8002364 <main+0x284>)
 8002280:	4628      	mov	r0, r5
 8002282:	f000 fc39 	bl	8002af8 <spiFlash_readStatus>
 8002286:	8020      	strh	r0, [r4, #0]
	} while (stat_reg1 & 0x01 );
 8002288:	f010 0f01 	tst.w	r0, #1
 800228c:	d1f8      	bne.n	8002280 <main+0x1a0>


	memset(rx_flashb, 0x00, sizeof(rx_flashb));
 800228e:	4d38      	ldr	r5, [pc, #224]	; (8002370 <main+0x290>)
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	2100      	movs	r1, #0
 8002294:	4628      	mov	r0, r5
 8002296:	f000 fd77 	bl	8002d88 <memset>

	spiFlash_read( 0, cnt_flashb, rx_flashb );
 800229a:	4c36      	ldr	r4, [pc, #216]	; (8002374 <main+0x294>)
 800229c:	462a      	mov	r2, r5
 800229e:	7821      	ldrb	r1, [r4, #0]
 80022a0:	2000      	movs	r0, #0
 80022a2:	f000 fbd5 	bl	8002a50 <spiFlash_read>

	wr_en=spiFlash_wrtEnbl();
 80022a6:	f000 fc47 	bl	8002b38 <spiFlash_wrtEnbl>
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <main+0x280>)
 80022ac:	7018      	strb	r0, [r3, #0]
	stat_reg1=spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80022ae:	2005      	movs	r0, #5
 80022b0:	f000 fc22 	bl	8002af8 <spiFlash_readStatus>
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <main+0x284>)
 80022b6:	8018      	strh	r0, [r3, #0]
	stat_reg2=spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80022b8:	2035      	movs	r0, #53	; 0x35
 80022ba:	f000 fc1d 	bl	8002af8 <spiFlash_readStatus>
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <main+0x288>)
 80022c0:	8018      	strh	r0, [r3, #0]

	spiFlash_write(0, cnt_flashb, tx_flashb);
 80022c2:	4a2d      	ldr	r2, [pc, #180]	; (8002378 <main+0x298>)
 80022c4:	7821      	ldrb	r1, [r4, #0]
 80022c6:	2000      	movs	r0, #0
 80022c8:	f000 fbec 	bl	8002aa4 <spiFlash_write>
	do {
		stat_reg1=spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80022cc:	2505      	movs	r5, #5
 80022ce:	4c25      	ldr	r4, [pc, #148]	; (8002364 <main+0x284>)
 80022d0:	4628      	mov	r0, r5
 80022d2:	f000 fc11 	bl	8002af8 <spiFlash_readStatus>
 80022d6:	8020      	strh	r0, [r4, #0]
	} while (stat_reg1 & 0x01 );
 80022d8:	f010 0f01 	tst.w	r0, #1
 80022dc:	d1f8      	bne.n	80022d0 <main+0x1f0>

	spiFlash_read( 0, cnt_flashb, rx_flashb );
 80022de:	4a24      	ldr	r2, [pc, #144]	; (8002370 <main+0x290>)
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <main+0x294>)
 80022e2:	7819      	ldrb	r1, [r3, #0]
 80022e4:	2000      	movs	r0, #0
 80022e6:	f000 fbb3 	bl	8002a50 <spiFlash_read>

	xTaskCreate(myTask1, "task1", 200, (void*) 0, tskIDLE_PRIORITY, &myTask1Handle);	//создание задачи 1
 80022ea:	4d24      	ldr	r5, [pc, #144]	; (800237c <main+0x29c>)
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <main+0x2a0>)
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2400      	movs	r4, #0
 80022f2:	9400      	str	r4, [sp, #0]
 80022f4:	4623      	mov	r3, r4
 80022f6:	22c8      	movs	r2, #200	; 0xc8
 80022f8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80022fc:	4821      	ldr	r0, [pc, #132]	; (8002384 <main+0x2a4>)
 80022fe:	f7fe fd7c 	bl	8000dfa <xTaskCreate>
	xTaskCreate(myTask2, "task2", 200, (void*) 0, tskIDLE_PRIORITY, &myTask2Handle);	//создание задачи 2
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <main+0x2a8>)
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	9400      	str	r4, [sp, #0]
 8002308:	4623      	mov	r3, r4
 800230a:	22c8      	movs	r2, #200	; 0xc8
 800230c:	f105 0140 	add.w	r1, r5, #64	; 0x40
 8002310:	481e      	ldr	r0, [pc, #120]	; (800238c <main+0x2ac>)
 8002312:	f7fe fd72 	bl	8000dfa <xTaskCreate>

	vTaskStartScheduler();	//запуск диспетчера задач
 8002316:	f7fe fda3 	bl	8000e60 <vTaskStartScheduler>
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 800231a:	f384 8813 	msr	FAULTMASK, r4
	Note: IWDG _must_ be enabled in option bits for production.
	*/
static inline void iwdg_set_2s_reload()
{
	/* enable write access */
	IWDG->KR = 0xCCCC;
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <main+0x2b0>)
 8002320:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002324:	601a      	str	r2, [r3, #0]
	IWDG->KR = 0x5555;
 8002326:	f245 5255 	movw	r2, #21845	; 0x5555
 800232a:	601a      	str	r2, [r3, #0]

    IWDG->RLR = 0xFFF;
 800232c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002330:	609a      	str	r2, [r3, #8]

	/* prescaler = 16, timeout = 2.048sec */
	IWDG->PR = IWDG_PR_PR_1;
 8002332:	2202      	movs	r2, #2
 8002334:	605a      	str	r2, [r3, #4]

	/* wait for registers to be updated */
	while (IWDG->SR != 0) ;
 8002336:	461a      	mov	r2, r3
 8002338:	68d3      	ldr	r3, [r2, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1fc      	bne.n	8002338 <main+0x258>

	/* reload counter */
	IWDG->KR = 0xAAAA;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <main+0x2b0>)
 8002340:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002344:	601a      	str	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <main+0x278>)
 8002348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234c:	619a      	str	r2, [r3, #24]
void main_loop()
{



	while (1) {
 800234e:	e7fe      	b.n	800234e <main+0x26e>
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	05fa0300 	.word	0x05fa0300
 8002358:	48000400 	.word	0x48000400
 800235c:	48001c00 	.word	0x48001c00
 8002360:	20004c20 	.word	0x20004c20
 8002364:	20004c1c 	.word	0x20004c1c
 8002368:	20004c1e 	.word	0x20004c1e
 800236c:	20004bd8 	.word	0x20004bd8
 8002370:	20004bdc 	.word	0x20004bdc
 8002374:	20000008 	.word	0x20000008
 8002378:	2000000c 	.word	0x2000000c
 800237c:	08003d2c 	.word	0x08003d2c
 8002380:	20004bd0 	.word	0x20004bd0
 8002384:	08001f2d 	.word	0x08001f2d
 8002388:	20004bd4 	.word	0x20004bd4
 800238c:	08001f9d 	.word	0x08001f9d
 8002390:	40003000 	.word	0x40003000
 8002394:	48000800 	.word	0x48000800

08002398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002398:	b508      	push	{r3, lr}
 800239a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800239c:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <_sbrk+0x38>)
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	b152      	cbz	r2, 80023b8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <_sbrk+0x38>)
 80023a4:	6810      	ldr	r0, [r2, #0]
 80023a6:	4403      	add	r3, r0
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <_sbrk+0x3c>)
 80023aa:	490b      	ldr	r1, [pc, #44]	; (80023d8 <_sbrk+0x40>)
 80023ac:	1a52      	subs	r2, r2, r1
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d806      	bhi.n	80023c0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80023b2:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <_sbrk+0x38>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80023b6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80023b8:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x38>)
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <_sbrk+0x44>)
 80023bc:	6011      	str	r1, [r2, #0]
 80023be:	e7f0      	b.n	80023a2 <_sbrk+0xa>
    errno = ENOMEM;
 80023c0:	f000 fcaa 	bl	8002d18 <__errno>
 80023c4:	230c      	movs	r3, #12
 80023c6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	e7f3      	b.n	80023b6 <_sbrk+0x1e>
 80023ce:	bf00      	nop
 80023d0:	20004c24 	.word	0x20004c24
 80023d4:	2000a000 	.word	0x2000a000
 80023d8:	00000400 	.word	0x00000400
 80023dc:	20004cd0 	.word	0x20004cd0

080023e0 <hse_init>:
    NVIC_EnableIRQ(SysTick_IRQn);
}

//#define MSI48_to_HSE48
void hse_init()
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80023e2:	4a26      	ldr	r2, [pc, #152]	; (800247c <hse_init+0x9c>)
 80023e4:	6813      	ldr	r3, [r2, #0]
 80023e6:	f023 0307 	bic.w	r3, r3, #7
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80023f0:	6813      	ldr	r3, [r2, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
	if (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d000      	beq.n	80023fc <hse_init+0x1c>
		for (;;);
 80023fa:	e7fe      	b.n	80023fa <hse_init+0x1a>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023fc:	4a20      	ldr	r2, [pc, #128]	; (8002480 <hse_init+0xa0>)
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002408:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800240a:	f502 32d0 	add.w	r2, r2, #106496	; 0x1a000
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002416:	6813      	ldr	r3, [r2, #0]
 8002418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800241c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002420:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002428:	d0fb      	beq.n	8002422 <hse_init+0x42>
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <hse_init+0xa4>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002432:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	f022 0203 	bic.w	r2, r2, #3
 800243a:	f042 0202 	orr.w	r2, r2, #2
 800243e:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002446:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800244e:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8002456:	609a      	str	r2, [r3, #8]
	LL_Init1msTick(freq);
 8002458:	4d0b      	ldr	r5, [pc, #44]	; (8002488 <hse_init+0xa8>)
 800245a:	4628      	mov	r0, r5
 800245c:	f000 fc1c 	bl	8002c98 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002460:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8002464:	6923      	ldr	r3, [r4, #16]
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6123      	str	r3, [r4, #16]
	LL_SetSystemCoreClock(freq);
 800246c:	4628      	mov	r0, r5
 800246e:	f000 fc23 	bl	8002cb8 <LL_SetSystemCoreClock>
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8002472:	6923      	ldr	r3, [r4, #16]
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6123      	str	r3, [r4, #16]
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

    systick_init( 48000000 );
#endif
}
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	40022000 	.word	0x40022000
 8002480:	40007000 	.word	0x40007000
 8002484:	40021000 	.word	0x40021000
 8002488:	02dc6c00 	.word	0x02dc6c00

0800248c <clock_init>:

void clock_init()
{
 800248c:	b500      	push	{lr}
 800248e:	b083      	sub	sp, #12
    //clock_4msi_to_48msi();
	hse_init();
 8002490:	f7ff ffa6 	bl	80023e0 <hse_init>
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <clock_init+0x40>)
 8002496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800249e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024a0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80024a2:	9a01      	ldr	r2, [sp, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024aa:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ae:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80024b2:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 80024b4:	9a00      	ldr	r2, [sp, #0]
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024bc:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	f042 0208 	orr.w	r2, r2, #8
 80024c4:	601a      	str	r2, [r3, #0]
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

	/* Ensure that MSI is wake-up system clock */
	LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);
    LL_RCC_MSI_EnableRangeSelection();
}
 80024c6:	b003      	add	sp, #12
 80024c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024cc:	40021000 	.word	0x40021000

080024d0 <SpiInit>:
	LL_GPIO_SetAFPin_0_7(SPI_MOSI_GPIO, 1 << SPI_MOSI_PIN, SPI_MOSI_AF_0_7);
	LL_GPIO_SetPinOutputType(SPI_MOSI_GPIO, 1 << SPI_MOSI_PIN, LL_GPIO_OUTPUT_PUSHPULL);
}

void SpiInit()
{
 80024d0:	b510      	push	{r4, lr}
 80024d2:	b082      	sub	sp, #8
	SpiActive = 0;
 80024d4:	4bb1      	ldr	r3, [pc, #708]	; (800279c <SpiInit+0x2cc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80024da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024de:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	2320      	movs	r3, #32
 80024e2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	2320      	movs	r3, #32
 80024f8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2202      	movs	r2, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	430b      	orrs	r3, r1
 800250a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800250e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002510:	6891      	ldr	r1, [r2, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	2320      	movs	r3, #32
 8002514:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	2320      	movs	r3, #32
 800252a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2202      	movs	r2, #2
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	430b      	orrs	r3, r1
 800253c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002540:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002542:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	2320      	movs	r3, #32
 8002546:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2103      	movs	r1, #3
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	2320      	movs	r3, #32
 800255c:	fa93 f1a3 	rbit	r1, r3
 8002560:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002564:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002566:	6a0a      	ldr	r2, [r1, #32]
 8002568:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	210f      	movs	r1, #15
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	2220      	movs	r2, #32
 800257e:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	2105      	movs	r1, #5
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	431a      	orrs	r2, r3
 8002590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002594:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	f022 0220 	bic.w	r2, r2, #32
 800259c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800259e:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	2340      	movs	r3, #64	; 0x40
 80025a2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	2340      	movs	r3, #64	; 0x40
 80025b8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2202      	movs	r2, #2
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	430b      	orrs	r3, r1
 80025ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025ce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80025d0:	6891      	ldr	r1, [r2, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	2340      	movs	r3, #64	; 0x40
 80025d4:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	2340      	movs	r3, #64	; 0x40
 80025ea:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2202      	movs	r2, #2
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	430b      	orrs	r3, r1
 80025fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002600:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002602:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	2340      	movs	r3, #64	; 0x40
 8002606:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2103      	movs	r1, #3
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	2340      	movs	r3, #64	; 0x40
 800261c:	fa93 f1a3 	rbit	r1, r3
 8002620:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002624:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002626:	6a0a      	ldr	r2, [r1, #32]
 8002628:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	210f      	movs	r1, #15
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	2240      	movs	r2, #64	; 0x40
 800263e:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002642:	fab2 f282 	clz	r2, r2
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	2105      	movs	r1, #5
 800264a:	fa01 f202 	lsl.w	r2, r1, r2
 800264e:	431a      	orrs	r2, r3
 8002650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002654:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800265c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800265e:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2202      	movs	r2, #2
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	430b      	orrs	r3, r1
 800268a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800268e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002690:	6891      	ldr	r1, [r2, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2202      	movs	r2, #2
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	430b      	orrs	r3, r1
 80026bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80026c0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026c2:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2103      	movs	r1, #3
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	fa93 f1a3 	rbit	r1, r3
 80026e0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80026e4:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80026e6:	6a0a      	ldr	r2, [r1, #32]
 80026e8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	210f      	movs	r1, #15
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002702:	fab2 f282 	clz	r2, r2
 8002706:	0092      	lsls	r2, r2, #2
 8002708:	2105      	movs	r1, #5
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	431a      	orrs	r2, r3
 8002710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002714:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800271c:	605a      	str	r2, [r3, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800271e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002722:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002726:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800272c:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800272e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002730:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002734:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002736:	9a01      	ldr	r2, [sp, #4]
    spi_gpio_init();

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);

	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST;//reset RCC_SPI(запись единицы)
 8002738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800273a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
	RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI1RST);//don't reset RCC_SPI(запись нуля)
 8002740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

	/* SPI1 parameter configuration*/
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002748:	4915      	ldr	r1, [pc, #84]	; (80027a0 <SpiInit+0x2d0>)
 800274a:	2300      	movs	r3, #0
 800274c:	600b      	str	r3, [r1, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800274e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002752:	604a      	str	r2, [r1, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002754:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002758:	608a      	str	r2, [r1, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800275a:	60cb      	str	r3, [r1, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800275c:	610b      	str	r3, [r1, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800275e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002762:	614a      	str	r2, [r1, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8002764:	2220      	movs	r2, #32
 8002766:	618a      	str	r2, [r1, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002768:	61cb      	str	r3, [r1, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800276a:	620b      	str	r3, [r1, #32]
	SPI_InitStruct.CRCPoly = 7;
 800276c:	2307      	movs	r3, #7
 800276e:	624b      	str	r3, [r1, #36]	; 0x24
	LL_SPI_Init(_SPI, &SPI_InitStruct);
 8002770:	4c0c      	ldr	r4, [pc, #48]	; (80027a4 <SpiInit+0x2d4>)
 8002772:	4620      	mov	r0, r4
 8002774:	f000 fa5c 	bl	8002c30 <LL_SPI_Init>

	_SPI->CR2 |= SPI_CR2_FRXTH;
 8002778:	6863      	ldr	r3, [r4, #4]
 800277a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800277e:	6063      	str	r3, [r4, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002786:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8002788:	6863      	ldr	r3, [r4, #4]
 800278a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278e:	6063      	str	r3, [r4, #4]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SpiInit+0x2d8>)
 8002792:	2208      	movs	r2, #8
 8002794:	605a      	str	r2, [r3, #4]

#ifdef SPI_DMA
    spi_rx_dma_init();
    spi_tx_dma_init();
#endif
}
 8002796:	b002      	add	sp, #8
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	20004c50 	.word	0x20004c50
 80027a0:	20004c28 	.word	0x20004c28
 80027a4:	40013000 	.word	0x40013000
 80027a8:	e000e100 	.word	0xe000e100

080027ac <SpiSendRecv>:

	SpiActive = 0;
}

void SpiSendRecv(uint8_t *buf_tx, uint8_t *buf_rx, uint16_t len)
{
 80027ac:	b410      	push	{r4}
	SpiActive = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	4c0e      	ldr	r4, [pc, #56]	; (80027ec <SpiSendRecv+0x40>)
 80027b2:	7023      	strb	r3, [r4, #0]

#ifndef SPI_DMA
	pBufTx = buf_tx;
 80027b4:	4c0e      	ldr	r4, [pc, #56]	; (80027f0 <SpiSendRecv+0x44>)
 80027b6:	6020      	str	r0, [r4, #0]
	pBufRx = buf_rx;
 80027b8:	4c0e      	ldr	r4, [pc, #56]	; (80027f4 <SpiSendRecv+0x48>)
 80027ba:	6021      	str	r1, [r4, #0]
	usBufPosRx = 0;
 80027bc:	490e      	ldr	r1, [pc, #56]	; (80027f8 <SpiSendRecv+0x4c>)
 80027be:	f04f 0c00 	mov.w	ip, #0
 80027c2:	f8a1 c000 	strh.w	ip, [r1]
	usBufPosTx = 1;
 80027c6:	490d      	ldr	r1, [pc, #52]	; (80027fc <SpiSendRecv+0x50>)
 80027c8:	800b      	strh	r3, [r1, #0]
	usBufCnt = len;
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <SpiSendRecv+0x54>)
 80027cc:	801a      	strh	r2, [r3, #0]

	while (!(_SPI->SR & SPI_SR_TXE)); //ожидание установки 1 в TXE(окончание передачи)
 80027ce:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <SpiSendRecv+0x58>)
 80027d0:	6893      	ldr	r3, [r2, #8]
 80027d2:	f013 0f02 	tst.w	r3, #2
 80027d6:	d0fb      	beq.n	80027d0 <SpiSendRecv+0x24>
	if (pBufTx)
 80027d8:	b128      	cbz	r0, 80027e6 <SpiSendRecv+0x3a>
		*(uint8_t*)&_SPI->DR = *pBufTx;
 80027da:	7802      	ldrb	r2, [r0, #0]
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <SpiSendRecv+0x58>)
 80027de:	731a      	strb	r2, [r3, #12]
    if ( buf_tx )
        spi_tx_dma_start(buf_tx, len);
    else
        spi_tx_null_dma_start(spi_txEmptyBuf, len);
#endif
}
 80027e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027e4:	4770      	bx	lr
		*(uint8_t*)&_SPI->DR = SPI_EMPTY_BYTE;
 80027e6:	22ff      	movs	r2, #255	; 0xff
 80027e8:	e7f8      	b.n	80027dc <SpiSendRecv+0x30>
 80027ea:	bf00      	nop
 80027ec:	20004c50 	.word	0x20004c50
 80027f0:	20004c58 	.word	0x20004c58
 80027f4:	20004c54 	.word	0x20004c54
 80027f8:	20004c5e 	.word	0x20004c5e
 80027fc:	20004c60 	.word	0x20004c60
 8002800:	20004c5c 	.word	0x20004c5c
 8002804:	40013000 	.word	0x40013000

08002808 <SPI1_IRQHandler>:
	return !SpiActive;
}

#ifndef SPI_DMA
void SPI1_IRQHandler(void)
{
 8002808:	b082      	sub	sp, #8
	{
		volatile uint8_t ucByte = *(uint8_t*)&_SPI->DR;
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <SPI1_IRQHandler+0x5c>)
 800280c:	7b1b      	ldrb	r3, [r3, #12]
 800280e:	f88d 3007 	strb.w	r3, [sp, #7]

		if (pBufRx)
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <SPI1_IRQHandler+0x60>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b123      	cbz	r3, 8002822 <SPI1_IRQHandler+0x1a>
			pBufRx[usBufPosRx] = ucByte;
 8002818:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800281c:	4a13      	ldr	r2, [pc, #76]	; (800286c <SPI1_IRQHandler+0x64>)
 800281e:	8812      	ldrh	r2, [r2, #0]
 8002820:	5499      	strb	r1, [r3, r2]
	}

	{
		if (usBufPosTx < usBufCnt)
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <SPI1_IRQHandler+0x68>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	4a13      	ldr	r2, [pc, #76]	; (8002874 <SPI1_IRQHandler+0x6c>)
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d909      	bls.n	8002842 <SPI1_IRQHandler+0x3a>
		{
			if (pBufTx)
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <SPI1_IRQHandler+0x70>)
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	b1a2      	cbz	r2, 800285e <SPI1_IRQHandler+0x56>
				*(uint8_t*)&_SPI->DR = pBufTx[usBufPosTx];
 8002834:	5cd2      	ldrb	r2, [r2, r3]
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <SPI1_IRQHandler+0x5c>)
 8002838:	731a      	strb	r2, [r3, #12]
			else
				*(uint8_t*)&_SPI->DR = SPI_EMPTY_BYTE;

			usBufPosTx++;
 800283a:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <SPI1_IRQHandler+0x68>)
 800283c:	8813      	ldrh	r3, [r2, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	8013      	strh	r3, [r2, #0]
		{
			SPI_FLASH_CS_HIGH();
		}*/
	}

	if (++usBufPosRx >= usBufCnt)
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <SPI1_IRQHandler+0x64>)
 8002844:	8813      	ldrh	r3, [r2, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	8013      	strh	r3, [r2, #0]
 800284c:	4a09      	ldr	r2, [pc, #36]	; (8002874 <SPI1_IRQHandler+0x6c>)
 800284e:	8812      	ldrh	r2, [r2, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d802      	bhi.n	800285a <SPI1_IRQHandler+0x52>
	{
		SpiActive = 0;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <SPI1_IRQHandler+0x74>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
	//	SPI_FLASH_CS_HIGH();
		//SPI_ON_READY_ISR_CB(0);
	}
}
 800285a:	b002      	add	sp, #8
 800285c:	4770      	bx	lr
				*(uint8_t*)&_SPI->DR = SPI_EMPTY_BYTE;
 800285e:	22ff      	movs	r2, #255	; 0xff
 8002860:	e7e9      	b.n	8002836 <SPI1_IRQHandler+0x2e>
 8002862:	bf00      	nop
 8002864:	40013000 	.word	0x40013000
 8002868:	20004c54 	.word	0x20004c54
 800286c:	20004c5e 	.word	0x20004c5e
 8002870:	20004c60 	.word	0x20004c60
 8002874:	20004c5c 	.word	0x20004c5c
 8002878:	20004c58 	.word	0x20004c58
 800287c:	20004c50 	.word	0x20004c50

08002880 <spiFlash_init>:
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002880:	4b45      	ldr	r3, [pc, #276]	; (8002998 <spiFlash_init+0x118>)
 8002882:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002888:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2201      	movs	r2, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	430b      	orrs	r3, r1
 80028b2:	4a39      	ldr	r2, [pc, #228]	; (8002998 <spiFlash_init+0x118>)
 80028b4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80028b6:	6853      	ldr	r3, [r2, #4]
 80028b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028bc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80028be:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c4:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2103      	movs	r1, #3
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028dc:	fa93 f1a3 	rbit	r1, r3
 80028e0:	492d      	ldr	r1, [pc, #180]	; (8002998 <spiFlash_init+0x118>)
 80028e2:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80028e4:	688a      	ldr	r2, [r1, #8]
 80028e6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2103      	movs	r1, #3
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028fe:	fa91 f2a1 	rbit	r2, r1
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <spiFlash_init+0x118>)
 8002904:	6093      	str	r3, [r2, #8]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002906:	6191      	str	r1, [r2, #24]
static inline void supply_flashOff()
{
  //  LL_GPIO_SetOutputPin(BOARD_SPI_FLASH_GPIO, BOARD_SPI_FLASH_PIN);
    LL_GPIO_SetOutputPin(BOARD_RADIO_RX_GPIO, BOARD_RADIO_RX_PIN);

    flash_supplyOn = 0;
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <spiFlash_init+0x11c>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800290e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	2310      	movs	r3, #16
 8002916:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	2310      	movs	r3, #16
 800292c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2201      	movs	r2, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	430b      	orrs	r3, r1
 800293e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002942:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002944:	6853      	ldr	r3, [r2, #4]
 8002946:	f023 0310 	bic.w	r3, r3, #16
 800294a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800294c:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	2310      	movs	r3, #16
 8002950:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2103      	movs	r1, #3
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	2310      	movs	r3, #16
 8002966:	fa93 f1a3 	rbit	r1, r3
 800296a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800296e:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002970:	688a      	ldr	r2, [r1, #8]
 8002972:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2103      	movs	r1, #3
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	2110      	movs	r1, #16
 8002988:	fa91 f2a1 	rbit	r2, r1
 800298c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002990:	6093      	str	r3, [r2, #8]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002992:	6291      	str	r1, [r2, #40]	; 0x28
	SPI_FLASH_PWR_OUT();//настройка на выход ножки PB9
	SPI_FLASH_PWR_OFF();//запись 1 в PB9(выключение)

	SPI_FLASH_CS_OUT();
    SPI_FLASH_CS_LOW();
}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	48000800 	.word	0x48000800
 800299c:	20004bc8 	.word	0x20004bc8

080029a0 <spiFlash_powerOn>:
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <spiFlash_powerOn+0xa4>)
 80029a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
    flash_supplyOn = 1;
 80029a8:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <spiFlash_powerOn+0xa8>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80029ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	2310      	movs	r3, #16
 80029b6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	4093      	lsls	r3, r2
 80029c0:	2203      	movs	r2, #3
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	2310      	movs	r3, #16
 80029cc:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2201      	movs	r2, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	430b      	orrs	r3, r1
 80029de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029e2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80029e4:	6853      	ldr	r3, [r2, #4]
 80029e6:	f023 0310 	bic.w	r3, r3, #16
 80029ea:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029ec:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	2310      	movs	r3, #16
 80029f0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2103      	movs	r1, #3
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	2310      	movs	r3, #16
 8002a06:	fa93 f1a3 	rbit	r1, r3
 8002a0a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002a0e:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002a10:	688a      	ldr	r2, [r1, #8]
 8002a12:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	2110      	movs	r1, #16
 8002a28:	fa91 f2a1 	rbit	r2, r1
 8002a2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002a30:	6093      	str	r3, [r2, #8]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002a32:	6191      	str	r1, [r2, #24]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <spiFlash_powerOn+0xac>)
 8002a36:	2230      	movs	r2, #48	; 0x30
 8002a38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	605a      	str	r2, [r3, #4]
	SPI_FLASH_CS_OUT();
	SPI_FLASH_CS_HIGH();

	SPI_IRQ_ENABLE();
	//SpiManagerPowerOn(SPI_MANAGER_ID_MEM);
}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	48000800 	.word	0x48000800
 8002a48:	20004bc8 	.word	0x20004bc8
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <spiFlash_read>:

/********************************************************************/
//        spiFlash_read - ������ ������ �� ���������� ������
/********************************************************************/
void spiFlash_read( uint32_t dwAddrRead, uint16_t bCnt, uint8_t* pBuf )
{
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	460c      	mov	r4, r1
 8002a54:	4615      	mov	r5, r2

	buf_txrx[0] = CMD_READ_DATA;
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <spiFlash_read+0x44>)
 8002a58:	2203      	movs	r2, #3
 8002a5a:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwAddrRead >> 16);
 8002a5c:	0c02      	lsrs	r2, r0, #16
 8002a5e:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwAddrRead >> 8);
 8002a60:	0a02      	lsrs	r2, r0, #8
 8002a62:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwAddrRead >> 0);
 8002a64:	70d8      	strb	r0, [r3, #3]
	a_buf_tx[0] = buf_txrx;
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <spiFlash_read+0x48>)
 8002a68:	6003      	str	r3, [r0, #0]
	a_buf_rx[0] = NULL;
 8002a6a:	490c      	ldr	r1, [pc, #48]	; (8002a9c <spiFlash_read+0x4c>)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	600b      	str	r3, [r1, #0]
	a_buf_len[0] = 4;
 8002a70:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <spiFlash_read+0x50>)
 8002a72:	f04f 0c04 	mov.w	ip, #4
 8002a76:	f8a2 c000 	strh.w	ip, [r2]

	a_buf_tx[1] = NULL;
 8002a7a:	6043      	str	r3, [r0, #4]
	a_buf_rx[1] = pBuf;
 8002a7c:	604d      	str	r5, [r1, #4]
	a_buf_len[1] = bCnt;
 8002a7e:	8054      	strh	r4, [r2, #2]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002a80:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8002a84:	2510      	movs	r5, #16
 8002a86:	62a5      	str	r5, [r4, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SPI_RWFX(a_buf_tx, a_buf_rx, a_buf_len, 2);
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f000 f88f 	bl	8002bac <SpiManagerSendRecvFlashX>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002a8e:	61a5      	str	r5, [r4, #24]
	}
	a_buf_rx[0] = pBuf;
	SPI_FLASH_CS_LOW();
	SpiSendRecv(spi_buf_tx, a_buf_rx[0], i);
	while(SpiActive){};*/
}
 8002a90:	bd38      	pop	{r3, r4, r5, pc}
 8002a92:	bf00      	nop
 8002a94:	20004c78 	.word	0x20004c78
 8002a98:	20004c70 	.word	0x20004c70
 8002a9c:	20004c68 	.word	0x20004c68
 8002aa0:	20004c64 	.word	0x20004c64

08002aa4 <spiFlash_write>:
/********************************************************************/
//        spiFlash_write - ������ ������ �� ���������� ������
/********************************************************************/
static volatile uint32_t ulAgain = 0;
uint8_t spiFlash_write( uint32_t dwAddrWrite, uint16_t bCnt, uint8_t* pBuf )
{
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	460d      	mov	r5, r1
 8002aa8:	4616      	mov	r6, r2
	uint8_t res = FLASH_RES_ERROR_AGAIN;
	uint16_t i;

	buf_txrx[0] = CMD_PAGE_PROGRAMM;
 8002aaa:	4c0f      	ldr	r4, [pc, #60]	; (8002ae8 <spiFlash_write+0x44>)
 8002aac:	2302      	movs	r3, #2
 8002aae:	7023      	strb	r3, [r4, #0]
	buf_txrx[1] = (uint8_t)(dwAddrWrite >> 16);
 8002ab0:	0c02      	lsrs	r2, r0, #16
 8002ab2:	7062      	strb	r2, [r4, #1]
	buf_txrx[2] = (uint8_t)(dwAddrWrite >> 8);
 8002ab4:	0a02      	lsrs	r2, r0, #8
 8002ab6:	70a2      	strb	r2, [r4, #2]
	buf_txrx[3] = (uint8_t)(dwAddrWrite >> 0);
 8002ab8:	70e0      	strb	r0, [r4, #3]
	a_buf_tx[0] = buf_txrx;
 8002aba:	480c      	ldr	r0, [pc, #48]	; (8002aec <spiFlash_write+0x48>)
 8002abc:	6004      	str	r4, [r0, #0]
	a_buf_rx[0] = NULL;
 8002abe:	490c      	ldr	r1, [pc, #48]	; (8002af0 <spiFlash_write+0x4c>)
 8002ac0:	2400      	movs	r4, #0
 8002ac2:	600c      	str	r4, [r1, #0]
	a_buf_len[0] = 4;
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <spiFlash_write+0x50>)
 8002ac6:	f04f 0c04 	mov.w	ip, #4
 8002aca:	f8a2 c000 	strh.w	ip, [r2]

	a_buf_tx[1] = pBuf;
 8002ace:	6046      	str	r6, [r0, #4]
	a_buf_rx[1] = NULL;
 8002ad0:	604c      	str	r4, [r1, #4]
	a_buf_len[1] = bCnt;
 8002ad2:	8055      	strh	r5, [r2, #2]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002ad4:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8002ad8:	2610      	movs	r6, #16
 8002ada:	62ae      	str	r6, [r5, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SPI_RWFX(a_buf_tx, a_buf_rx, a_buf_len, 2);
 8002adc:	f000 f866 	bl	8002bac <SpiManagerSendRecvFlashX>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ae0:	61ae      	str	r6, [r5, #24]
*/
	SPI_FLASH_CS_HIGH();
	res = FLASH_RES_OK;

	return res;
}
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	bd70      	pop	{r4, r5, r6, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20004c78 	.word	0x20004c78
 8002aec:	20004c70 	.word	0x20004c70
 8002af0:	20004c68 	.word	0x20004c68
 8002af4:	20004c64 	.word	0x20004c64

08002af8 <spiFlash_readStatus>:

/********************************************************************/
//        s25fl_readStatus - ������ �������� �������
/********************************************************************/
uint16_t spiFlash_readStatus( uint8_t cmd )
{
 8002af8:	b508      	push	{r3, lr}
	uint16_t bRegStatus;

	spi_buf_tx[0] = cmd;
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <spiFlash_readStatus+0x34>)
 8002afc:	7018      	strb	r0, [r3, #0]
	spi_buf_tx[1] = 0xff;
 8002afe:	22ff      	movs	r2, #255	; 0xff
 8002b00:	705a      	strb	r2, [r3, #1]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002b02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b06:	2110      	movs	r1, #16
 8002b08:	6291      	str	r1, [r2, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SpiSendRecv(spi_buf_tx, spi_buf_rx, 2);
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4908      	ldr	r1, [pc, #32]	; (8002b30 <spiFlash_readStatus+0x38>)
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fe4c 	bl	80027ac <SpiSendRecv>
	while(SpiActive);
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <spiFlash_readStatus+0x3c>)
 8002b16:	7813      	ldrb	r3, [r2, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1fc      	bne.n	8002b16 <spiFlash_readStatus+0x1e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002b1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b20:	2210      	movs	r2, #16
 8002b22:	619a      	str	r2, [r3, #24]
	SPI_FLASH_CS_HIGH();
	bRegStatus = spi_buf_rx[1];

	return bRegStatus;
}
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <spiFlash_readStatus+0x38>)
 8002b26:	7858      	ldrb	r0, [r3, #1]
 8002b28:	bd08      	pop	{r3, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20004ca0 	.word	0x20004ca0
 8002b30:	20004c80 	.word	0x20004c80
 8002b34:	20004c50 	.word	0x20004c50

08002b38 <spiFlash_wrtEnbl>:

uint8_t spiFlash_wrtEnbl()
{
 8002b38:	b508      	push	{r3, lr}
	uint8_t res = FLASH_RES_ERROR_AGAIN;

	buf_txrx[0] = CMD_WRITE_ENABLE;
 8002b3a:	480a      	ldr	r0, [pc, #40]	; (8002b64 <spiFlash_wrtEnbl+0x2c>)
 8002b3c:	2306      	movs	r3, #6
 8002b3e:	7003      	strb	r3, [r0, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002b40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b44:	2210      	movs	r2, #16
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SpiSendRecv(buf_txrx, NULL, 1);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	f7ff fe2e 	bl	80027ac <SpiSendRecv>
	while(SpiActive);
 8002b50:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <spiFlash_wrtEnbl+0x30>)
 8002b52:	7813      	ldrb	r3, [r2, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1fc      	bne.n	8002b52 <spiFlash_wrtEnbl+0x1a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002b58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	619a      	str	r2, [r3, #24]
	SPI_FLASH_CS_HIGH();

	res = FLASH_RES_OK;

	return res;
}
 8002b60:	2000      	movs	r0, #0
 8002b62:	bd08      	pop	{r3, pc}
 8002b64:	20004c78 	.word	0x20004c78
 8002b68:	20004c50 	.word	0x20004c50

08002b6c <spiFlash_eraseSector>:

/********************************************************************/
//        spiFlash_eraseSector - �������� ������� �� ���������� ������
/********************************************************************/
uint8_t spiFlash_eraseSector( uint32_t dwSectAddr )
{
 8002b6c:	b508      	push	{r3, lr}
 8002b6e:	4603      	mov	r3, r0
	uint8_t res = FLASH_RES_ERROR_AGAIN;

	buf_txrx[0] = CMD_ERASE_4KB;		// ������� �������� �������
 8002b70:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <spiFlash_eraseSector+0x38>)
 8002b72:	2220      	movs	r2, #32
 8002b74:	7002      	strb	r2, [r0, #0]
	buf_txrx[1] = (uint8_t)(dwSectAddr >> 16);
 8002b76:	0c1a      	lsrs	r2, r3, #16
 8002b78:	7042      	strb	r2, [r0, #1]
	buf_txrx[2] = (uint8_t)(dwSectAddr >> 8);
 8002b7a:	0a1a      	lsrs	r2, r3, #8
 8002b7c:	7082      	strb	r2, [r0, #2]
	buf_txrx[3] = (uint8_t)(dwSectAddr >> 0);
 8002b7e:	70c3      	strb	r3, [r0, #3]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b84:	2210      	movs	r2, #16
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SpiSendRecv(buf_txrx, NULL, 4);
 8002b88:	2204      	movs	r2, #4
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f7ff fe0e 	bl	80027ac <SpiSendRecv>
	while(SpiActive){};
 8002b90:	4a05      	ldr	r2, [pc, #20]	; (8002ba8 <spiFlash_eraseSector+0x3c>)
 8002b92:	7813      	ldrb	r3, [r2, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1fc      	bne.n	8002b92 <spiFlash_eraseSector+0x26>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	619a      	str	r2, [r3, #24]
	SPI_FLASH_CS_HIGH();

	res = FLASH_RES_OK;

	return res;
}
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	bd08      	pop	{r3, pc}
 8002ba4:	20004c78 	.word	0x20004c78
 8002ba8:	20004c50 	.word	0x20004c50

08002bac <SpiManagerSendRecvFlashX>:


void SpiManagerSendRecvFlashX(uint8_t **a_buf_tx, uint8_t **a_buf_rx, uint16_t *a_buf_len, uint8_t cnt)
{

			for (uint8_t i = 0; i < cnt; i++)
 8002bac:	b1d3      	cbz	r3, 8002be4 <SpiManagerSendRecvFlashX+0x38>
{
 8002bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb2:	1f05      	subs	r5, r0, #4
 8002bb4:	1f0f      	subs	r7, r1, #4
 8002bb6:	1e96      	subs	r6, r2, #2
 8002bb8:	f103 38ff 	add.w	r8, r3, #4294967295
 8002bbc:	fa5f f888 	uxtb.w	r8, r8
 8002bc0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
			{

				SpiSendRecv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);

				while(SpiActive);
 8002bc4:	4c08      	ldr	r4, [pc, #32]	; (8002be8 <SpiManagerSendRecvFlashX+0x3c>)
				SpiSendRecv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);
 8002bc6:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 8002bca:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8002bce:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8002bd2:	f7ff fdeb 	bl	80027ac <SpiSendRecv>
				while(SpiActive);
 8002bd6:	7823      	ldrb	r3, [r4, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1fc      	bne.n	8002bd6 <SpiManagerSendRecvFlashX+0x2a>
			for (uint8_t i = 0; i < cnt; i++)
 8002bdc:	4545      	cmp	r5, r8
 8002bde:	d1f2      	bne.n	8002bc6 <SpiManagerSendRecvFlashX+0x1a>
			}



}
 8002be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20004c50 	.word	0x20004c50

08002bec <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <SystemInit+0x3c>)
 8002bee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002bf2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <SystemInit+0x40>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002c04:	2100      	movs	r1, #0
 8002c06:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002c0e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002c12:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c20:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002c22:	6199      	str	r1, [r3, #24]
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00
 8002c2c:	40021000 	.word	0x40021000

08002c30 <LL_SPI_Init>:
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002c30:	6803      	ldr	r3, [r0, #0]
 8002c32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c36:	d12c      	bne.n	8002c92 <LL_SPI_Init+0x62>
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002c38:	b410      	push	{r4}
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002c3a:	6802      	ldr	r2, [r0, #0]
 8002c3c:	680b      	ldr	r3, [r1, #0]
 8002c3e:	684c      	ldr	r4, [r1, #4]
 8002c40:	4323      	orrs	r3, r4
 8002c42:	68cc      	ldr	r4, [r1, #12]
 8002c44:	4323      	orrs	r3, r4
 8002c46:	690c      	ldr	r4, [r1, #16]
 8002c48:	4323      	orrs	r3, r4
 8002c4a:	694c      	ldr	r4, [r1, #20]
 8002c4c:	4323      	orrs	r3, r4
 8002c4e:	698c      	ldr	r4, [r1, #24]
 8002c50:	4323      	orrs	r3, r4
 8002c52:	69cc      	ldr	r4, [r1, #28]
 8002c54:	4323      	orrs	r3, r4
 8002c56:	6a0c      	ldr	r4, [r1, #32]
 8002c58:	4323      	orrs	r3, r4
 8002c5a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002c5e:	f022 02bf 	bic.w	r2, r2, #191	; 0xbf
 8002c62:	4313      	orrs	r3, r2
 8002c64:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002c66:	6842      	ldr	r2, [r0, #4]
 8002c68:	8acb      	ldrh	r3, [r1, #22]
 8002c6a:	688c      	ldr	r4, [r1, #8]
 8002c6c:	4323      	orrs	r3, r4
 8002c6e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	4313      	orrs	r3, r2
 8002c78:	6043      	str	r3, [r0, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002c7a:	6a0b      	ldr	r3, [r1, #32]
 8002c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c80:	d003      	beq.n	8002c8a <LL_SPI_Init+0x5a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8002c82:	2001      	movs	r0, #1
  }

  return status;
}
 8002c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c88:	4770      	bx	lr
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002c8a:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8002c8c:	6103      	str	r3, [r0, #16]
    status = SUCCESS;
 8002c8e:	2001      	movs	r0, #1
}
 8002c90:	e7f8      	b.n	8002c84 <LL_SPI_Init+0x54>
  ErrorStatus status = ERROR;
 8002c92:	2000      	movs	r0, #0
}
 8002c94:	4770      	bx	lr
	...

08002c98 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <LL_Init1msTick+0x1c>)
 8002c9a:	fba3 2300 	umull	r2, r3, r3, r0
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002ca6:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cac:	2305      	movs	r3, #5
 8002cae:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <LL_SetSystemCoreClock+0x8>)
 8002cba:	6018      	str	r0, [r3, #0]
}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	2000004c 	.word	0x2000004c

08002cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cc8:	f7ff ff90 	bl	8002bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ccc:	480c      	ldr	r0, [pc, #48]	; (8002d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cce:	490d      	ldr	r1, [pc, #52]	; (8002d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <LoopForever+0xe>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd4:	e002      	b.n	8002cdc <LoopCopyDataInit>

08002cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cda:	3304      	adds	r3, #4

08002cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce0:	d3f9      	bcc.n	8002cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce4:	4c0a      	ldr	r4, [pc, #40]	; (8002d10 <LoopForever+0x16>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce8:	e001      	b.n	8002cee <LoopFillZerobss>

08002cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cec:	3204      	adds	r2, #4

08002cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf0:	d3fb      	bcc.n	8002cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cf2:	f000 f817 	bl	8002d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cf6:	f7ff f9f3 	bl	80020e0 <main>

08002cfa <LoopForever>:

LoopForever:
    b LoopForever
 8002cfa:	e7fe      	b.n	8002cfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cfc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d04:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002d08:	08003e2c 	.word	0x08003e2c
  ldr r2, =_sbss
 8002d0c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002d10:	20004cd0 	.word	0x20004cd0

08002d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d14:	e7fe      	b.n	8002d14 <ADC1_2_IRQHandler>
	...

08002d18 <__errno>:
 8002d18:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <__errno+0x8>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000050 	.word	0x20000050

08002d24 <__libc_init_array>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	4d0d      	ldr	r5, [pc, #52]	; (8002d5c <__libc_init_array+0x38>)
 8002d28:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <__libc_init_array+0x3c>)
 8002d2a:	1b64      	subs	r4, r4, r5
 8002d2c:	10a4      	asrs	r4, r4, #2
 8002d2e:	2600      	movs	r6, #0
 8002d30:	42a6      	cmp	r6, r4
 8002d32:	d109      	bne.n	8002d48 <__libc_init_array+0x24>
 8002d34:	4d0b      	ldr	r5, [pc, #44]	; (8002d64 <__libc_init_array+0x40>)
 8002d36:	4c0c      	ldr	r4, [pc, #48]	; (8002d68 <__libc_init_array+0x44>)
 8002d38:	f000 ffec 	bl	8003d14 <_init>
 8002d3c:	1b64      	subs	r4, r4, r5
 8002d3e:	10a4      	asrs	r4, r4, #2
 8002d40:	2600      	movs	r6, #0
 8002d42:	42a6      	cmp	r6, r4
 8002d44:	d105      	bne.n	8002d52 <__libc_init_array+0x2e>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4c:	4798      	blx	r3
 8002d4e:	3601      	adds	r6, #1
 8002d50:	e7ee      	b.n	8002d30 <__libc_init_array+0xc>
 8002d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d56:	4798      	blx	r3
 8002d58:	3601      	adds	r6, #1
 8002d5a:	e7f2      	b.n	8002d42 <__libc_init_array+0x1e>
 8002d5c:	08003e24 	.word	0x08003e24
 8002d60:	08003e24 	.word	0x08003e24
 8002d64:	08003e24 	.word	0x08003e24
 8002d68:	08003e28 	.word	0x08003e28

08002d6c <memcpy>:
 8002d6c:	440a      	add	r2, r1
 8002d6e:	4291      	cmp	r1, r2
 8002d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d74:	d100      	bne.n	8002d78 <memcpy+0xc>
 8002d76:	4770      	bx	lr
 8002d78:	b510      	push	{r4, lr}
 8002d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d82:	4291      	cmp	r1, r2
 8002d84:	d1f9      	bne.n	8002d7a <memcpy+0xe>
 8002d86:	bd10      	pop	{r4, pc}

08002d88 <memset>:
 8002d88:	4402      	add	r2, r0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <memset+0xa>
 8002d90:	4770      	bx	lr
 8002d92:	f803 1b01 	strb.w	r1, [r3], #1
 8002d96:	e7f9      	b.n	8002d8c <memset+0x4>

08002d98 <iprintf>:
 8002d98:	b40f      	push	{r0, r1, r2, r3}
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <iprintf+0x2c>)
 8002d9c:	b513      	push	{r0, r1, r4, lr}
 8002d9e:	681c      	ldr	r4, [r3, #0]
 8002da0:	b124      	cbz	r4, 8002dac <iprintf+0x14>
 8002da2:	69a3      	ldr	r3, [r4, #24]
 8002da4:	b913      	cbnz	r3, 8002dac <iprintf+0x14>
 8002da6:	4620      	mov	r0, r4
 8002da8:	f000 f866 	bl	8002e78 <__sinit>
 8002dac:	ab05      	add	r3, sp, #20
 8002dae:	9a04      	ldr	r2, [sp, #16]
 8002db0:	68a1      	ldr	r1, [r4, #8]
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	4620      	mov	r0, r4
 8002db6:	f000 f9bd 	bl	8003134 <_vfiprintf_r>
 8002dba:	b002      	add	sp, #8
 8002dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc0:	b004      	add	sp, #16
 8002dc2:	4770      	bx	lr
 8002dc4:	20000050 	.word	0x20000050

08002dc8 <std>:
 8002dc8:	2300      	movs	r3, #0
 8002dca:	b510      	push	{r4, lr}
 8002dcc:	4604      	mov	r4, r0
 8002dce:	e9c0 3300 	strd	r3, r3, [r0]
 8002dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dd6:	6083      	str	r3, [r0, #8]
 8002dd8:	8181      	strh	r1, [r0, #12]
 8002dda:	6643      	str	r3, [r0, #100]	; 0x64
 8002ddc:	81c2      	strh	r2, [r0, #14]
 8002dde:	6183      	str	r3, [r0, #24]
 8002de0:	4619      	mov	r1, r3
 8002de2:	2208      	movs	r2, #8
 8002de4:	305c      	adds	r0, #92	; 0x5c
 8002de6:	f7ff ffcf 	bl	8002d88 <memset>
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <std+0x38>)
 8002dec:	6263      	str	r3, [r4, #36]	; 0x24
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <std+0x3c>)
 8002df0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <std+0x40>)
 8002df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <std+0x44>)
 8002df8:	6224      	str	r4, [r4, #32]
 8002dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	bf00      	nop
 8002e00:	080036dd 	.word	0x080036dd
 8002e04:	080036ff 	.word	0x080036ff
 8002e08:	08003737 	.word	0x08003737
 8002e0c:	0800375b 	.word	0x0800375b

08002e10 <_cleanup_r>:
 8002e10:	4901      	ldr	r1, [pc, #4]	; (8002e18 <_cleanup_r+0x8>)
 8002e12:	f000 b8af 	b.w	8002f74 <_fwalk_reent>
 8002e16:	bf00      	nop
 8002e18:	08003a35 	.word	0x08003a35

08002e1c <__sfmoreglue>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	2268      	movs	r2, #104	; 0x68
 8002e20:	1e4d      	subs	r5, r1, #1
 8002e22:	4355      	muls	r5, r2
 8002e24:	460e      	mov	r6, r1
 8002e26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e2a:	f000 f8e5 	bl	8002ff8 <_malloc_r>
 8002e2e:	4604      	mov	r4, r0
 8002e30:	b140      	cbz	r0, 8002e44 <__sfmoreglue+0x28>
 8002e32:	2100      	movs	r1, #0
 8002e34:	e9c0 1600 	strd	r1, r6, [r0]
 8002e38:	300c      	adds	r0, #12
 8002e3a:	60a0      	str	r0, [r4, #8]
 8002e3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e40:	f7ff ffa2 	bl	8002d88 <memset>
 8002e44:	4620      	mov	r0, r4
 8002e46:	bd70      	pop	{r4, r5, r6, pc}

08002e48 <__sfp_lock_acquire>:
 8002e48:	4801      	ldr	r0, [pc, #4]	; (8002e50 <__sfp_lock_acquire+0x8>)
 8002e4a:	f000 b8b3 	b.w	8002fb4 <__retarget_lock_acquire_recursive>
 8002e4e:	bf00      	nop
 8002e50:	20004cc1 	.word	0x20004cc1

08002e54 <__sfp_lock_release>:
 8002e54:	4801      	ldr	r0, [pc, #4]	; (8002e5c <__sfp_lock_release+0x8>)
 8002e56:	f000 b8ae 	b.w	8002fb6 <__retarget_lock_release_recursive>
 8002e5a:	bf00      	nop
 8002e5c:	20004cc1 	.word	0x20004cc1

08002e60 <__sinit_lock_acquire>:
 8002e60:	4801      	ldr	r0, [pc, #4]	; (8002e68 <__sinit_lock_acquire+0x8>)
 8002e62:	f000 b8a7 	b.w	8002fb4 <__retarget_lock_acquire_recursive>
 8002e66:	bf00      	nop
 8002e68:	20004cc2 	.word	0x20004cc2

08002e6c <__sinit_lock_release>:
 8002e6c:	4801      	ldr	r0, [pc, #4]	; (8002e74 <__sinit_lock_release+0x8>)
 8002e6e:	f000 b8a2 	b.w	8002fb6 <__retarget_lock_release_recursive>
 8002e72:	bf00      	nop
 8002e74:	20004cc2 	.word	0x20004cc2

08002e78 <__sinit>:
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	f7ff fff0 	bl	8002e60 <__sinit_lock_acquire>
 8002e80:	69a3      	ldr	r3, [r4, #24]
 8002e82:	b11b      	cbz	r3, 8002e8c <__sinit+0x14>
 8002e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e88:	f7ff bff0 	b.w	8002e6c <__sinit_lock_release>
 8002e8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e90:	6523      	str	r3, [r4, #80]	; 0x50
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <__sinit+0x68>)
 8002e94:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <__sinit+0x6c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e9a:	42a3      	cmp	r3, r4
 8002e9c:	bf04      	itt	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	61a3      	streq	r3, [r4, #24]
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f000 f820 	bl	8002ee8 <__sfp>
 8002ea8:	6060      	str	r0, [r4, #4]
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f000 f81c 	bl	8002ee8 <__sfp>
 8002eb0:	60a0      	str	r0, [r4, #8]
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f000 f818 	bl	8002ee8 <__sfp>
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60e0      	str	r0, [r4, #12]
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	6860      	ldr	r0, [r4, #4]
 8002ec0:	f7ff ff82 	bl	8002dc8 <std>
 8002ec4:	68a0      	ldr	r0, [r4, #8]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2109      	movs	r1, #9
 8002eca:	f7ff ff7d 	bl	8002dc8 <std>
 8002ece:	68e0      	ldr	r0, [r4, #12]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	2112      	movs	r1, #18
 8002ed4:	f7ff ff78 	bl	8002dc8 <std>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	61a3      	str	r3, [r4, #24]
 8002edc:	e7d2      	b.n	8002e84 <__sinit+0xc>
 8002ede:	bf00      	nop
 8002ee0:	08003d8c 	.word	0x08003d8c
 8002ee4:	08002e11 	.word	0x08002e11

08002ee8 <__sfp>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	4607      	mov	r7, r0
 8002eec:	f7ff ffac 	bl	8002e48 <__sfp_lock_acquire>
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <__sfp+0x84>)
 8002ef2:	681e      	ldr	r6, [r3, #0]
 8002ef4:	69b3      	ldr	r3, [r6, #24]
 8002ef6:	b913      	cbnz	r3, 8002efe <__sfp+0x16>
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f7ff ffbd 	bl	8002e78 <__sinit>
 8002efe:	3648      	adds	r6, #72	; 0x48
 8002f00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	d503      	bpl.n	8002f10 <__sfp+0x28>
 8002f08:	6833      	ldr	r3, [r6, #0]
 8002f0a:	b30b      	cbz	r3, 8002f50 <__sfp+0x68>
 8002f0c:	6836      	ldr	r6, [r6, #0]
 8002f0e:	e7f7      	b.n	8002f00 <__sfp+0x18>
 8002f10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f14:	b9d5      	cbnz	r5, 8002f4c <__sfp+0x64>
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <__sfp+0x88>)
 8002f18:	60e3      	str	r3, [r4, #12]
 8002f1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f1e:	6665      	str	r5, [r4, #100]	; 0x64
 8002f20:	f000 f847 	bl	8002fb2 <__retarget_lock_init_recursive>
 8002f24:	f7ff ff96 	bl	8002e54 <__sfp_lock_release>
 8002f28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f30:	6025      	str	r5, [r4, #0]
 8002f32:	61a5      	str	r5, [r4, #24]
 8002f34:	2208      	movs	r2, #8
 8002f36:	4629      	mov	r1, r5
 8002f38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f3c:	f7ff ff24 	bl	8002d88 <memset>
 8002f40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f48:	4620      	mov	r0, r4
 8002f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f4c:	3468      	adds	r4, #104	; 0x68
 8002f4e:	e7d9      	b.n	8002f04 <__sfp+0x1c>
 8002f50:	2104      	movs	r1, #4
 8002f52:	4638      	mov	r0, r7
 8002f54:	f7ff ff62 	bl	8002e1c <__sfmoreglue>
 8002f58:	4604      	mov	r4, r0
 8002f5a:	6030      	str	r0, [r6, #0]
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d1d5      	bne.n	8002f0c <__sfp+0x24>
 8002f60:	f7ff ff78 	bl	8002e54 <__sfp_lock_release>
 8002f64:	230c      	movs	r3, #12
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	e7ee      	b.n	8002f48 <__sfp+0x60>
 8002f6a:	bf00      	nop
 8002f6c:	08003d8c 	.word	0x08003d8c
 8002f70:	ffff0001 	.word	0xffff0001

08002f74 <_fwalk_reent>:
 8002f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f78:	4606      	mov	r6, r0
 8002f7a:	4688      	mov	r8, r1
 8002f7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f80:	2700      	movs	r7, #0
 8002f82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f86:	f1b9 0901 	subs.w	r9, r9, #1
 8002f8a:	d505      	bpl.n	8002f98 <_fwalk_reent+0x24>
 8002f8c:	6824      	ldr	r4, [r4, #0]
 8002f8e:	2c00      	cmp	r4, #0
 8002f90:	d1f7      	bne.n	8002f82 <_fwalk_reent+0xe>
 8002f92:	4638      	mov	r0, r7
 8002f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f98:	89ab      	ldrh	r3, [r5, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d907      	bls.n	8002fae <_fwalk_reent+0x3a>
 8002f9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	d003      	beq.n	8002fae <_fwalk_reent+0x3a>
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	4630      	mov	r0, r6
 8002faa:	47c0      	blx	r8
 8002fac:	4307      	orrs	r7, r0
 8002fae:	3568      	adds	r5, #104	; 0x68
 8002fb0:	e7e9      	b.n	8002f86 <_fwalk_reent+0x12>

08002fb2 <__retarget_lock_init_recursive>:
 8002fb2:	4770      	bx	lr

08002fb4 <__retarget_lock_acquire_recursive>:
 8002fb4:	4770      	bx	lr

08002fb6 <__retarget_lock_release_recursive>:
 8002fb6:	4770      	bx	lr

08002fb8 <sbrk_aligned>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4e0e      	ldr	r6, [pc, #56]	; (8002ff4 <sbrk_aligned+0x3c>)
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	6831      	ldr	r1, [r6, #0]
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	b911      	cbnz	r1, 8002fca <sbrk_aligned+0x12>
 8002fc4:	f000 fb7a 	bl	80036bc <_sbrk_r>
 8002fc8:	6030      	str	r0, [r6, #0]
 8002fca:	4621      	mov	r1, r4
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f000 fb75 	bl	80036bc <_sbrk_r>
 8002fd2:	1c43      	adds	r3, r0, #1
 8002fd4:	d00a      	beq.n	8002fec <sbrk_aligned+0x34>
 8002fd6:	1cc4      	adds	r4, r0, #3
 8002fd8:	f024 0403 	bic.w	r4, r4, #3
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d007      	beq.n	8002ff0 <sbrk_aligned+0x38>
 8002fe0:	1a21      	subs	r1, r4, r0
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 fb6a 	bl	80036bc <_sbrk_r>
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d101      	bne.n	8002ff0 <sbrk_aligned+0x38>
 8002fec:	f04f 34ff 	mov.w	r4, #4294967295
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	20004cc8 	.word	0x20004cc8

08002ff8 <_malloc_r>:
 8002ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffc:	1ccd      	adds	r5, r1, #3
 8002ffe:	f025 0503 	bic.w	r5, r5, #3
 8003002:	3508      	adds	r5, #8
 8003004:	2d0c      	cmp	r5, #12
 8003006:	bf38      	it	cc
 8003008:	250c      	movcc	r5, #12
 800300a:	2d00      	cmp	r5, #0
 800300c:	4607      	mov	r7, r0
 800300e:	db01      	blt.n	8003014 <_malloc_r+0x1c>
 8003010:	42a9      	cmp	r1, r5
 8003012:	d905      	bls.n	8003020 <_malloc_r+0x28>
 8003014:	230c      	movs	r3, #12
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	2600      	movs	r6, #0
 800301a:	4630      	mov	r0, r6
 800301c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003020:	4e2e      	ldr	r6, [pc, #184]	; (80030dc <_malloc_r+0xe4>)
 8003022:	f000 fdbb 	bl	8003b9c <__malloc_lock>
 8003026:	6833      	ldr	r3, [r6, #0]
 8003028:	461c      	mov	r4, r3
 800302a:	bb34      	cbnz	r4, 800307a <_malloc_r+0x82>
 800302c:	4629      	mov	r1, r5
 800302e:	4638      	mov	r0, r7
 8003030:	f7ff ffc2 	bl	8002fb8 <sbrk_aligned>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	4604      	mov	r4, r0
 8003038:	d14d      	bne.n	80030d6 <_malloc_r+0xde>
 800303a:	6834      	ldr	r4, [r6, #0]
 800303c:	4626      	mov	r6, r4
 800303e:	2e00      	cmp	r6, #0
 8003040:	d140      	bne.n	80030c4 <_malloc_r+0xcc>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	4631      	mov	r1, r6
 8003046:	4638      	mov	r0, r7
 8003048:	eb04 0803 	add.w	r8, r4, r3
 800304c:	f000 fb36 	bl	80036bc <_sbrk_r>
 8003050:	4580      	cmp	r8, r0
 8003052:	d13a      	bne.n	80030ca <_malloc_r+0xd2>
 8003054:	6821      	ldr	r1, [r4, #0]
 8003056:	3503      	adds	r5, #3
 8003058:	1a6d      	subs	r5, r5, r1
 800305a:	f025 0503 	bic.w	r5, r5, #3
 800305e:	3508      	adds	r5, #8
 8003060:	2d0c      	cmp	r5, #12
 8003062:	bf38      	it	cc
 8003064:	250c      	movcc	r5, #12
 8003066:	4629      	mov	r1, r5
 8003068:	4638      	mov	r0, r7
 800306a:	f7ff ffa5 	bl	8002fb8 <sbrk_aligned>
 800306e:	3001      	adds	r0, #1
 8003070:	d02b      	beq.n	80030ca <_malloc_r+0xd2>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	442b      	add	r3, r5
 8003076:	6023      	str	r3, [r4, #0]
 8003078:	e00e      	b.n	8003098 <_malloc_r+0xa0>
 800307a:	6822      	ldr	r2, [r4, #0]
 800307c:	1b52      	subs	r2, r2, r5
 800307e:	d41e      	bmi.n	80030be <_malloc_r+0xc6>
 8003080:	2a0b      	cmp	r2, #11
 8003082:	d916      	bls.n	80030b2 <_malloc_r+0xba>
 8003084:	1961      	adds	r1, r4, r5
 8003086:	42a3      	cmp	r3, r4
 8003088:	6025      	str	r5, [r4, #0]
 800308a:	bf18      	it	ne
 800308c:	6059      	strne	r1, [r3, #4]
 800308e:	6863      	ldr	r3, [r4, #4]
 8003090:	bf08      	it	eq
 8003092:	6031      	streq	r1, [r6, #0]
 8003094:	5162      	str	r2, [r4, r5]
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	4638      	mov	r0, r7
 800309a:	f104 060b 	add.w	r6, r4, #11
 800309e:	f000 fd83 	bl	8003ba8 <__malloc_unlock>
 80030a2:	f026 0607 	bic.w	r6, r6, #7
 80030a6:	1d23      	adds	r3, r4, #4
 80030a8:	1af2      	subs	r2, r6, r3
 80030aa:	d0b6      	beq.n	800301a <_malloc_r+0x22>
 80030ac:	1b9b      	subs	r3, r3, r6
 80030ae:	50a3      	str	r3, [r4, r2]
 80030b0:	e7b3      	b.n	800301a <_malloc_r+0x22>
 80030b2:	6862      	ldr	r2, [r4, #4]
 80030b4:	42a3      	cmp	r3, r4
 80030b6:	bf0c      	ite	eq
 80030b8:	6032      	streq	r2, [r6, #0]
 80030ba:	605a      	strne	r2, [r3, #4]
 80030bc:	e7ec      	b.n	8003098 <_malloc_r+0xa0>
 80030be:	4623      	mov	r3, r4
 80030c0:	6864      	ldr	r4, [r4, #4]
 80030c2:	e7b2      	b.n	800302a <_malloc_r+0x32>
 80030c4:	4634      	mov	r4, r6
 80030c6:	6876      	ldr	r6, [r6, #4]
 80030c8:	e7b9      	b.n	800303e <_malloc_r+0x46>
 80030ca:	230c      	movs	r3, #12
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4638      	mov	r0, r7
 80030d0:	f000 fd6a 	bl	8003ba8 <__malloc_unlock>
 80030d4:	e7a1      	b.n	800301a <_malloc_r+0x22>
 80030d6:	6025      	str	r5, [r4, #0]
 80030d8:	e7de      	b.n	8003098 <_malloc_r+0xa0>
 80030da:	bf00      	nop
 80030dc:	20004cc4 	.word	0x20004cc4

080030e0 <__sfputc_r>:
 80030e0:	6893      	ldr	r3, [r2, #8]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	b410      	push	{r4}
 80030e8:	6093      	str	r3, [r2, #8]
 80030ea:	da08      	bge.n	80030fe <__sfputc_r+0x1e>
 80030ec:	6994      	ldr	r4, [r2, #24]
 80030ee:	42a3      	cmp	r3, r4
 80030f0:	db01      	blt.n	80030f6 <__sfputc_r+0x16>
 80030f2:	290a      	cmp	r1, #10
 80030f4:	d103      	bne.n	80030fe <__sfputc_r+0x1e>
 80030f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030fa:	f000 bb33 	b.w	8003764 <__swbuf_r>
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	1c58      	adds	r0, r3, #1
 8003102:	6010      	str	r0, [r2, #0]
 8003104:	7019      	strb	r1, [r3, #0]
 8003106:	4608      	mov	r0, r1
 8003108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800310c:	4770      	bx	lr

0800310e <__sfputs_r>:
 800310e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003110:	4606      	mov	r6, r0
 8003112:	460f      	mov	r7, r1
 8003114:	4614      	mov	r4, r2
 8003116:	18d5      	adds	r5, r2, r3
 8003118:	42ac      	cmp	r4, r5
 800311a:	d101      	bne.n	8003120 <__sfputs_r+0x12>
 800311c:	2000      	movs	r0, #0
 800311e:	e007      	b.n	8003130 <__sfputs_r+0x22>
 8003120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003124:	463a      	mov	r2, r7
 8003126:	4630      	mov	r0, r6
 8003128:	f7ff ffda 	bl	80030e0 <__sfputc_r>
 800312c:	1c43      	adds	r3, r0, #1
 800312e:	d1f3      	bne.n	8003118 <__sfputs_r+0xa>
 8003130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003134 <_vfiprintf_r>:
 8003134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003138:	460d      	mov	r5, r1
 800313a:	b09d      	sub	sp, #116	; 0x74
 800313c:	4614      	mov	r4, r2
 800313e:	4698      	mov	r8, r3
 8003140:	4606      	mov	r6, r0
 8003142:	b118      	cbz	r0, 800314c <_vfiprintf_r+0x18>
 8003144:	6983      	ldr	r3, [r0, #24]
 8003146:	b90b      	cbnz	r3, 800314c <_vfiprintf_r+0x18>
 8003148:	f7ff fe96 	bl	8002e78 <__sinit>
 800314c:	4b89      	ldr	r3, [pc, #548]	; (8003374 <_vfiprintf_r+0x240>)
 800314e:	429d      	cmp	r5, r3
 8003150:	d11b      	bne.n	800318a <_vfiprintf_r+0x56>
 8003152:	6875      	ldr	r5, [r6, #4]
 8003154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003156:	07d9      	lsls	r1, r3, #31
 8003158:	d405      	bmi.n	8003166 <_vfiprintf_r+0x32>
 800315a:	89ab      	ldrh	r3, [r5, #12]
 800315c:	059a      	lsls	r2, r3, #22
 800315e:	d402      	bmi.n	8003166 <_vfiprintf_r+0x32>
 8003160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003162:	f7ff ff27 	bl	8002fb4 <__retarget_lock_acquire_recursive>
 8003166:	89ab      	ldrh	r3, [r5, #12]
 8003168:	071b      	lsls	r3, r3, #28
 800316a:	d501      	bpl.n	8003170 <_vfiprintf_r+0x3c>
 800316c:	692b      	ldr	r3, [r5, #16]
 800316e:	b9eb      	cbnz	r3, 80031ac <_vfiprintf_r+0x78>
 8003170:	4629      	mov	r1, r5
 8003172:	4630      	mov	r0, r6
 8003174:	f000 fb5a 	bl	800382c <__swsetup_r>
 8003178:	b1c0      	cbz	r0, 80031ac <_vfiprintf_r+0x78>
 800317a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800317c:	07dc      	lsls	r4, r3, #31
 800317e:	d50e      	bpl.n	800319e <_vfiprintf_r+0x6a>
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	b01d      	add	sp, #116	; 0x74
 8003186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318a:	4b7b      	ldr	r3, [pc, #492]	; (8003378 <_vfiprintf_r+0x244>)
 800318c:	429d      	cmp	r5, r3
 800318e:	d101      	bne.n	8003194 <_vfiprintf_r+0x60>
 8003190:	68b5      	ldr	r5, [r6, #8]
 8003192:	e7df      	b.n	8003154 <_vfiprintf_r+0x20>
 8003194:	4b79      	ldr	r3, [pc, #484]	; (800337c <_vfiprintf_r+0x248>)
 8003196:	429d      	cmp	r5, r3
 8003198:	bf08      	it	eq
 800319a:	68f5      	ldreq	r5, [r6, #12]
 800319c:	e7da      	b.n	8003154 <_vfiprintf_r+0x20>
 800319e:	89ab      	ldrh	r3, [r5, #12]
 80031a0:	0598      	lsls	r0, r3, #22
 80031a2:	d4ed      	bmi.n	8003180 <_vfiprintf_r+0x4c>
 80031a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031a6:	f7ff ff06 	bl	8002fb6 <__retarget_lock_release_recursive>
 80031aa:	e7e9      	b.n	8003180 <_vfiprintf_r+0x4c>
 80031ac:	2300      	movs	r3, #0
 80031ae:	9309      	str	r3, [sp, #36]	; 0x24
 80031b0:	2320      	movs	r3, #32
 80031b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80031ba:	2330      	movs	r3, #48	; 0x30
 80031bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003380 <_vfiprintf_r+0x24c>
 80031c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031c4:	f04f 0901 	mov.w	r9, #1
 80031c8:	4623      	mov	r3, r4
 80031ca:	469a      	mov	sl, r3
 80031cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031d0:	b10a      	cbz	r2, 80031d6 <_vfiprintf_r+0xa2>
 80031d2:	2a25      	cmp	r2, #37	; 0x25
 80031d4:	d1f9      	bne.n	80031ca <_vfiprintf_r+0x96>
 80031d6:	ebba 0b04 	subs.w	fp, sl, r4
 80031da:	d00b      	beq.n	80031f4 <_vfiprintf_r+0xc0>
 80031dc:	465b      	mov	r3, fp
 80031de:	4622      	mov	r2, r4
 80031e0:	4629      	mov	r1, r5
 80031e2:	4630      	mov	r0, r6
 80031e4:	f7ff ff93 	bl	800310e <__sfputs_r>
 80031e8:	3001      	adds	r0, #1
 80031ea:	f000 80aa 	beq.w	8003342 <_vfiprintf_r+0x20e>
 80031ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031f0:	445a      	add	r2, fp
 80031f2:	9209      	str	r2, [sp, #36]	; 0x24
 80031f4:	f89a 3000 	ldrb.w	r3, [sl]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a2 	beq.w	8003342 <_vfiprintf_r+0x20e>
 80031fe:	2300      	movs	r3, #0
 8003200:	f04f 32ff 	mov.w	r2, #4294967295
 8003204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003208:	f10a 0a01 	add.w	sl, sl, #1
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	9307      	str	r3, [sp, #28]
 8003210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003214:	931a      	str	r3, [sp, #104]	; 0x68
 8003216:	4654      	mov	r4, sl
 8003218:	2205      	movs	r2, #5
 800321a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800321e:	4858      	ldr	r0, [pc, #352]	; (8003380 <_vfiprintf_r+0x24c>)
 8003220:	f7fc ffd6 	bl	80001d0 <memchr>
 8003224:	9a04      	ldr	r2, [sp, #16]
 8003226:	b9d8      	cbnz	r0, 8003260 <_vfiprintf_r+0x12c>
 8003228:	06d1      	lsls	r1, r2, #27
 800322a:	bf44      	itt	mi
 800322c:	2320      	movmi	r3, #32
 800322e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003232:	0713      	lsls	r3, r2, #28
 8003234:	bf44      	itt	mi
 8003236:	232b      	movmi	r3, #43	; 0x2b
 8003238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800323c:	f89a 3000 	ldrb.w	r3, [sl]
 8003240:	2b2a      	cmp	r3, #42	; 0x2a
 8003242:	d015      	beq.n	8003270 <_vfiprintf_r+0x13c>
 8003244:	9a07      	ldr	r2, [sp, #28]
 8003246:	4654      	mov	r4, sl
 8003248:	2000      	movs	r0, #0
 800324a:	f04f 0c0a 	mov.w	ip, #10
 800324e:	4621      	mov	r1, r4
 8003250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003254:	3b30      	subs	r3, #48	; 0x30
 8003256:	2b09      	cmp	r3, #9
 8003258:	d94e      	bls.n	80032f8 <_vfiprintf_r+0x1c4>
 800325a:	b1b0      	cbz	r0, 800328a <_vfiprintf_r+0x156>
 800325c:	9207      	str	r2, [sp, #28]
 800325e:	e014      	b.n	800328a <_vfiprintf_r+0x156>
 8003260:	eba0 0308 	sub.w	r3, r0, r8
 8003264:	fa09 f303 	lsl.w	r3, r9, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	9304      	str	r3, [sp, #16]
 800326c:	46a2      	mov	sl, r4
 800326e:	e7d2      	b.n	8003216 <_vfiprintf_r+0xe2>
 8003270:	9b03      	ldr	r3, [sp, #12]
 8003272:	1d19      	adds	r1, r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	9103      	str	r1, [sp, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	bfbb      	ittet	lt
 800327c:	425b      	neglt	r3, r3
 800327e:	f042 0202 	orrlt.w	r2, r2, #2
 8003282:	9307      	strge	r3, [sp, #28]
 8003284:	9307      	strlt	r3, [sp, #28]
 8003286:	bfb8      	it	lt
 8003288:	9204      	strlt	r2, [sp, #16]
 800328a:	7823      	ldrb	r3, [r4, #0]
 800328c:	2b2e      	cmp	r3, #46	; 0x2e
 800328e:	d10c      	bne.n	80032aa <_vfiprintf_r+0x176>
 8003290:	7863      	ldrb	r3, [r4, #1]
 8003292:	2b2a      	cmp	r3, #42	; 0x2a
 8003294:	d135      	bne.n	8003302 <_vfiprintf_r+0x1ce>
 8003296:	9b03      	ldr	r3, [sp, #12]
 8003298:	1d1a      	adds	r2, r3, #4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	9203      	str	r2, [sp, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bfb8      	it	lt
 80032a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80032a6:	3402      	adds	r4, #2
 80032a8:	9305      	str	r3, [sp, #20]
 80032aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003390 <_vfiprintf_r+0x25c>
 80032ae:	7821      	ldrb	r1, [r4, #0]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4650      	mov	r0, sl
 80032b4:	f7fc ff8c 	bl	80001d0 <memchr>
 80032b8:	b140      	cbz	r0, 80032cc <_vfiprintf_r+0x198>
 80032ba:	2340      	movs	r3, #64	; 0x40
 80032bc:	eba0 000a 	sub.w	r0, r0, sl
 80032c0:	fa03 f000 	lsl.w	r0, r3, r0
 80032c4:	9b04      	ldr	r3, [sp, #16]
 80032c6:	4303      	orrs	r3, r0
 80032c8:	3401      	adds	r4, #1
 80032ca:	9304      	str	r3, [sp, #16]
 80032cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d0:	482c      	ldr	r0, [pc, #176]	; (8003384 <_vfiprintf_r+0x250>)
 80032d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032d6:	2206      	movs	r2, #6
 80032d8:	f7fc ff7a 	bl	80001d0 <memchr>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d03f      	beq.n	8003360 <_vfiprintf_r+0x22c>
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <_vfiprintf_r+0x254>)
 80032e2:	bb1b      	cbnz	r3, 800332c <_vfiprintf_r+0x1f8>
 80032e4:	9b03      	ldr	r3, [sp, #12]
 80032e6:	3307      	adds	r3, #7
 80032e8:	f023 0307 	bic.w	r3, r3, #7
 80032ec:	3308      	adds	r3, #8
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032f2:	443b      	add	r3, r7
 80032f4:	9309      	str	r3, [sp, #36]	; 0x24
 80032f6:	e767      	b.n	80031c8 <_vfiprintf_r+0x94>
 80032f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032fc:	460c      	mov	r4, r1
 80032fe:	2001      	movs	r0, #1
 8003300:	e7a5      	b.n	800324e <_vfiprintf_r+0x11a>
 8003302:	2300      	movs	r3, #0
 8003304:	3401      	adds	r4, #1
 8003306:	9305      	str	r3, [sp, #20]
 8003308:	4619      	mov	r1, r3
 800330a:	f04f 0c0a 	mov.w	ip, #10
 800330e:	4620      	mov	r0, r4
 8003310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003314:	3a30      	subs	r2, #48	; 0x30
 8003316:	2a09      	cmp	r2, #9
 8003318:	d903      	bls.n	8003322 <_vfiprintf_r+0x1ee>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0c5      	beq.n	80032aa <_vfiprintf_r+0x176>
 800331e:	9105      	str	r1, [sp, #20]
 8003320:	e7c3      	b.n	80032aa <_vfiprintf_r+0x176>
 8003322:	fb0c 2101 	mla	r1, ip, r1, r2
 8003326:	4604      	mov	r4, r0
 8003328:	2301      	movs	r3, #1
 800332a:	e7f0      	b.n	800330e <_vfiprintf_r+0x1da>
 800332c:	ab03      	add	r3, sp, #12
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	462a      	mov	r2, r5
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <_vfiprintf_r+0x258>)
 8003334:	a904      	add	r1, sp, #16
 8003336:	4630      	mov	r0, r6
 8003338:	f3af 8000 	nop.w
 800333c:	4607      	mov	r7, r0
 800333e:	1c78      	adds	r0, r7, #1
 8003340:	d1d6      	bne.n	80032f0 <_vfiprintf_r+0x1bc>
 8003342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003344:	07d9      	lsls	r1, r3, #31
 8003346:	d405      	bmi.n	8003354 <_vfiprintf_r+0x220>
 8003348:	89ab      	ldrh	r3, [r5, #12]
 800334a:	059a      	lsls	r2, r3, #22
 800334c:	d402      	bmi.n	8003354 <_vfiprintf_r+0x220>
 800334e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003350:	f7ff fe31 	bl	8002fb6 <__retarget_lock_release_recursive>
 8003354:	89ab      	ldrh	r3, [r5, #12]
 8003356:	065b      	lsls	r3, r3, #25
 8003358:	f53f af12 	bmi.w	8003180 <_vfiprintf_r+0x4c>
 800335c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800335e:	e711      	b.n	8003184 <_vfiprintf_r+0x50>
 8003360:	ab03      	add	r3, sp, #12
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	462a      	mov	r2, r5
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <_vfiprintf_r+0x258>)
 8003368:	a904      	add	r1, sp, #16
 800336a:	4630      	mov	r0, r6
 800336c:	f000 f880 	bl	8003470 <_printf_i>
 8003370:	e7e4      	b.n	800333c <_vfiprintf_r+0x208>
 8003372:	bf00      	nop
 8003374:	08003db0 	.word	0x08003db0
 8003378:	08003dd0 	.word	0x08003dd0
 800337c:	08003d90 	.word	0x08003d90
 8003380:	08003df0 	.word	0x08003df0
 8003384:	08003dfa 	.word	0x08003dfa
 8003388:	00000000 	.word	0x00000000
 800338c:	0800310f 	.word	0x0800310f
 8003390:	08003df6 	.word	0x08003df6

08003394 <_printf_common>:
 8003394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003398:	4616      	mov	r6, r2
 800339a:	4699      	mov	r9, r3
 800339c:	688a      	ldr	r2, [r1, #8]
 800339e:	690b      	ldr	r3, [r1, #16]
 80033a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	bfb8      	it	lt
 80033a8:	4613      	movlt	r3, r2
 80033aa:	6033      	str	r3, [r6, #0]
 80033ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033b0:	4607      	mov	r7, r0
 80033b2:	460c      	mov	r4, r1
 80033b4:	b10a      	cbz	r2, 80033ba <_printf_common+0x26>
 80033b6:	3301      	adds	r3, #1
 80033b8:	6033      	str	r3, [r6, #0]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	0699      	lsls	r1, r3, #26
 80033be:	bf42      	ittt	mi
 80033c0:	6833      	ldrmi	r3, [r6, #0]
 80033c2:	3302      	addmi	r3, #2
 80033c4:	6033      	strmi	r3, [r6, #0]
 80033c6:	6825      	ldr	r5, [r4, #0]
 80033c8:	f015 0506 	ands.w	r5, r5, #6
 80033cc:	d106      	bne.n	80033dc <_printf_common+0x48>
 80033ce:	f104 0a19 	add.w	sl, r4, #25
 80033d2:	68e3      	ldr	r3, [r4, #12]
 80033d4:	6832      	ldr	r2, [r6, #0]
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	42ab      	cmp	r3, r5
 80033da:	dc26      	bgt.n	800342a <_printf_common+0x96>
 80033dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033e0:	1e13      	subs	r3, r2, #0
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	bf18      	it	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	0692      	lsls	r2, r2, #26
 80033ea:	d42b      	bmi.n	8003444 <_printf_common+0xb0>
 80033ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033f0:	4649      	mov	r1, r9
 80033f2:	4638      	mov	r0, r7
 80033f4:	47c0      	blx	r8
 80033f6:	3001      	adds	r0, #1
 80033f8:	d01e      	beq.n	8003438 <_printf_common+0xa4>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	68e5      	ldr	r5, [r4, #12]
 80033fe:	6832      	ldr	r2, [r6, #0]
 8003400:	f003 0306 	and.w	r3, r3, #6
 8003404:	2b04      	cmp	r3, #4
 8003406:	bf08      	it	eq
 8003408:	1aad      	subeq	r5, r5, r2
 800340a:	68a3      	ldr	r3, [r4, #8]
 800340c:	6922      	ldr	r2, [r4, #16]
 800340e:	bf0c      	ite	eq
 8003410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003414:	2500      	movne	r5, #0
 8003416:	4293      	cmp	r3, r2
 8003418:	bfc4      	itt	gt
 800341a:	1a9b      	subgt	r3, r3, r2
 800341c:	18ed      	addgt	r5, r5, r3
 800341e:	2600      	movs	r6, #0
 8003420:	341a      	adds	r4, #26
 8003422:	42b5      	cmp	r5, r6
 8003424:	d11a      	bne.n	800345c <_printf_common+0xc8>
 8003426:	2000      	movs	r0, #0
 8003428:	e008      	b.n	800343c <_printf_common+0xa8>
 800342a:	2301      	movs	r3, #1
 800342c:	4652      	mov	r2, sl
 800342e:	4649      	mov	r1, r9
 8003430:	4638      	mov	r0, r7
 8003432:	47c0      	blx	r8
 8003434:	3001      	adds	r0, #1
 8003436:	d103      	bne.n	8003440 <_printf_common+0xac>
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003440:	3501      	adds	r5, #1
 8003442:	e7c6      	b.n	80033d2 <_printf_common+0x3e>
 8003444:	18e1      	adds	r1, r4, r3
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	2030      	movs	r0, #48	; 0x30
 800344a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800344e:	4422      	add	r2, r4
 8003450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003458:	3302      	adds	r3, #2
 800345a:	e7c7      	b.n	80033ec <_printf_common+0x58>
 800345c:	2301      	movs	r3, #1
 800345e:	4622      	mov	r2, r4
 8003460:	4649      	mov	r1, r9
 8003462:	4638      	mov	r0, r7
 8003464:	47c0      	blx	r8
 8003466:	3001      	adds	r0, #1
 8003468:	d0e6      	beq.n	8003438 <_printf_common+0xa4>
 800346a:	3601      	adds	r6, #1
 800346c:	e7d9      	b.n	8003422 <_printf_common+0x8e>
	...

08003470 <_printf_i>:
 8003470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003474:	7e0f      	ldrb	r7, [r1, #24]
 8003476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003478:	2f78      	cmp	r7, #120	; 0x78
 800347a:	4691      	mov	r9, r2
 800347c:	4680      	mov	r8, r0
 800347e:	460c      	mov	r4, r1
 8003480:	469a      	mov	sl, r3
 8003482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003486:	d807      	bhi.n	8003498 <_printf_i+0x28>
 8003488:	2f62      	cmp	r7, #98	; 0x62
 800348a:	d80a      	bhi.n	80034a2 <_printf_i+0x32>
 800348c:	2f00      	cmp	r7, #0
 800348e:	f000 80d8 	beq.w	8003642 <_printf_i+0x1d2>
 8003492:	2f58      	cmp	r7, #88	; 0x58
 8003494:	f000 80a3 	beq.w	80035de <_printf_i+0x16e>
 8003498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800349c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034a0:	e03a      	b.n	8003518 <_printf_i+0xa8>
 80034a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034a6:	2b15      	cmp	r3, #21
 80034a8:	d8f6      	bhi.n	8003498 <_printf_i+0x28>
 80034aa:	a101      	add	r1, pc, #4	; (adr r1, 80034b0 <_printf_i+0x40>)
 80034ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034b0:	08003509 	.word	0x08003509
 80034b4:	0800351d 	.word	0x0800351d
 80034b8:	08003499 	.word	0x08003499
 80034bc:	08003499 	.word	0x08003499
 80034c0:	08003499 	.word	0x08003499
 80034c4:	08003499 	.word	0x08003499
 80034c8:	0800351d 	.word	0x0800351d
 80034cc:	08003499 	.word	0x08003499
 80034d0:	08003499 	.word	0x08003499
 80034d4:	08003499 	.word	0x08003499
 80034d8:	08003499 	.word	0x08003499
 80034dc:	08003629 	.word	0x08003629
 80034e0:	0800354d 	.word	0x0800354d
 80034e4:	0800360b 	.word	0x0800360b
 80034e8:	08003499 	.word	0x08003499
 80034ec:	08003499 	.word	0x08003499
 80034f0:	0800364b 	.word	0x0800364b
 80034f4:	08003499 	.word	0x08003499
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	08003499 	.word	0x08003499
 8003500:	08003499 	.word	0x08003499
 8003504:	08003613 	.word	0x08003613
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	1d1a      	adds	r2, r3, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	602a      	str	r2, [r5, #0]
 8003510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003518:	2301      	movs	r3, #1
 800351a:	e0a3      	b.n	8003664 <_printf_i+0x1f4>
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	6829      	ldr	r1, [r5, #0]
 8003520:	0606      	lsls	r6, r0, #24
 8003522:	f101 0304 	add.w	r3, r1, #4
 8003526:	d50a      	bpl.n	800353e <_printf_i+0xce>
 8003528:	680e      	ldr	r6, [r1, #0]
 800352a:	602b      	str	r3, [r5, #0]
 800352c:	2e00      	cmp	r6, #0
 800352e:	da03      	bge.n	8003538 <_printf_i+0xc8>
 8003530:	232d      	movs	r3, #45	; 0x2d
 8003532:	4276      	negs	r6, r6
 8003534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003538:	485e      	ldr	r0, [pc, #376]	; (80036b4 <_printf_i+0x244>)
 800353a:	230a      	movs	r3, #10
 800353c:	e019      	b.n	8003572 <_printf_i+0x102>
 800353e:	680e      	ldr	r6, [r1, #0]
 8003540:	602b      	str	r3, [r5, #0]
 8003542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003546:	bf18      	it	ne
 8003548:	b236      	sxthne	r6, r6
 800354a:	e7ef      	b.n	800352c <_printf_i+0xbc>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	1d19      	adds	r1, r3, #4
 8003552:	6029      	str	r1, [r5, #0]
 8003554:	0601      	lsls	r1, r0, #24
 8003556:	d501      	bpl.n	800355c <_printf_i+0xec>
 8003558:	681e      	ldr	r6, [r3, #0]
 800355a:	e002      	b.n	8003562 <_printf_i+0xf2>
 800355c:	0646      	lsls	r6, r0, #25
 800355e:	d5fb      	bpl.n	8003558 <_printf_i+0xe8>
 8003560:	881e      	ldrh	r6, [r3, #0]
 8003562:	4854      	ldr	r0, [pc, #336]	; (80036b4 <_printf_i+0x244>)
 8003564:	2f6f      	cmp	r7, #111	; 0x6f
 8003566:	bf0c      	ite	eq
 8003568:	2308      	moveq	r3, #8
 800356a:	230a      	movne	r3, #10
 800356c:	2100      	movs	r1, #0
 800356e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003572:	6865      	ldr	r5, [r4, #4]
 8003574:	60a5      	str	r5, [r4, #8]
 8003576:	2d00      	cmp	r5, #0
 8003578:	bfa2      	ittt	ge
 800357a:	6821      	ldrge	r1, [r4, #0]
 800357c:	f021 0104 	bicge.w	r1, r1, #4
 8003580:	6021      	strge	r1, [r4, #0]
 8003582:	b90e      	cbnz	r6, 8003588 <_printf_i+0x118>
 8003584:	2d00      	cmp	r5, #0
 8003586:	d04d      	beq.n	8003624 <_printf_i+0x1b4>
 8003588:	4615      	mov	r5, r2
 800358a:	fbb6 f1f3 	udiv	r1, r6, r3
 800358e:	fb03 6711 	mls	r7, r3, r1, r6
 8003592:	5dc7      	ldrb	r7, [r0, r7]
 8003594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003598:	4637      	mov	r7, r6
 800359a:	42bb      	cmp	r3, r7
 800359c:	460e      	mov	r6, r1
 800359e:	d9f4      	bls.n	800358a <_printf_i+0x11a>
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d10b      	bne.n	80035bc <_printf_i+0x14c>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	07de      	lsls	r6, r3, #31
 80035a8:	d508      	bpl.n	80035bc <_printf_i+0x14c>
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	6861      	ldr	r1, [r4, #4]
 80035ae:	4299      	cmp	r1, r3
 80035b0:	bfde      	ittt	le
 80035b2:	2330      	movle	r3, #48	; 0x30
 80035b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035bc:	1b52      	subs	r2, r2, r5
 80035be:	6122      	str	r2, [r4, #16]
 80035c0:	f8cd a000 	str.w	sl, [sp]
 80035c4:	464b      	mov	r3, r9
 80035c6:	aa03      	add	r2, sp, #12
 80035c8:	4621      	mov	r1, r4
 80035ca:	4640      	mov	r0, r8
 80035cc:	f7ff fee2 	bl	8003394 <_printf_common>
 80035d0:	3001      	adds	r0, #1
 80035d2:	d14c      	bne.n	800366e <_printf_i+0x1fe>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	b004      	add	sp, #16
 80035da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035de:	4835      	ldr	r0, [pc, #212]	; (80036b4 <_printf_i+0x244>)
 80035e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035e4:	6829      	ldr	r1, [r5, #0]
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80035ec:	6029      	str	r1, [r5, #0]
 80035ee:	061d      	lsls	r5, r3, #24
 80035f0:	d514      	bpl.n	800361c <_printf_i+0x1ac>
 80035f2:	07df      	lsls	r7, r3, #31
 80035f4:	bf44      	itt	mi
 80035f6:	f043 0320 	orrmi.w	r3, r3, #32
 80035fa:	6023      	strmi	r3, [r4, #0]
 80035fc:	b91e      	cbnz	r6, 8003606 <_printf_i+0x196>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	f023 0320 	bic.w	r3, r3, #32
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	2310      	movs	r3, #16
 8003608:	e7b0      	b.n	800356c <_printf_i+0xfc>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f043 0320 	orr.w	r3, r3, #32
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	2378      	movs	r3, #120	; 0x78
 8003614:	4828      	ldr	r0, [pc, #160]	; (80036b8 <_printf_i+0x248>)
 8003616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800361a:	e7e3      	b.n	80035e4 <_printf_i+0x174>
 800361c:	0659      	lsls	r1, r3, #25
 800361e:	bf48      	it	mi
 8003620:	b2b6      	uxthmi	r6, r6
 8003622:	e7e6      	b.n	80035f2 <_printf_i+0x182>
 8003624:	4615      	mov	r5, r2
 8003626:	e7bb      	b.n	80035a0 <_printf_i+0x130>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	6826      	ldr	r6, [r4, #0]
 800362c:	6961      	ldr	r1, [r4, #20]
 800362e:	1d18      	adds	r0, r3, #4
 8003630:	6028      	str	r0, [r5, #0]
 8003632:	0635      	lsls	r5, r6, #24
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	d501      	bpl.n	800363c <_printf_i+0x1cc>
 8003638:	6019      	str	r1, [r3, #0]
 800363a:	e002      	b.n	8003642 <_printf_i+0x1d2>
 800363c:	0670      	lsls	r0, r6, #25
 800363e:	d5fb      	bpl.n	8003638 <_printf_i+0x1c8>
 8003640:	8019      	strh	r1, [r3, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	6123      	str	r3, [r4, #16]
 8003646:	4615      	mov	r5, r2
 8003648:	e7ba      	b.n	80035c0 <_printf_i+0x150>
 800364a:	682b      	ldr	r3, [r5, #0]
 800364c:	1d1a      	adds	r2, r3, #4
 800364e:	602a      	str	r2, [r5, #0]
 8003650:	681d      	ldr	r5, [r3, #0]
 8003652:	6862      	ldr	r2, [r4, #4]
 8003654:	2100      	movs	r1, #0
 8003656:	4628      	mov	r0, r5
 8003658:	f7fc fdba 	bl	80001d0 <memchr>
 800365c:	b108      	cbz	r0, 8003662 <_printf_i+0x1f2>
 800365e:	1b40      	subs	r0, r0, r5
 8003660:	6060      	str	r0, [r4, #4]
 8003662:	6863      	ldr	r3, [r4, #4]
 8003664:	6123      	str	r3, [r4, #16]
 8003666:	2300      	movs	r3, #0
 8003668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800366c:	e7a8      	b.n	80035c0 <_printf_i+0x150>
 800366e:	6923      	ldr	r3, [r4, #16]
 8003670:	462a      	mov	r2, r5
 8003672:	4649      	mov	r1, r9
 8003674:	4640      	mov	r0, r8
 8003676:	47d0      	blx	sl
 8003678:	3001      	adds	r0, #1
 800367a:	d0ab      	beq.n	80035d4 <_printf_i+0x164>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	079b      	lsls	r3, r3, #30
 8003680:	d413      	bmi.n	80036aa <_printf_i+0x23a>
 8003682:	68e0      	ldr	r0, [r4, #12]
 8003684:	9b03      	ldr	r3, [sp, #12]
 8003686:	4298      	cmp	r0, r3
 8003688:	bfb8      	it	lt
 800368a:	4618      	movlt	r0, r3
 800368c:	e7a4      	b.n	80035d8 <_printf_i+0x168>
 800368e:	2301      	movs	r3, #1
 8003690:	4632      	mov	r2, r6
 8003692:	4649      	mov	r1, r9
 8003694:	4640      	mov	r0, r8
 8003696:	47d0      	blx	sl
 8003698:	3001      	adds	r0, #1
 800369a:	d09b      	beq.n	80035d4 <_printf_i+0x164>
 800369c:	3501      	adds	r5, #1
 800369e:	68e3      	ldr	r3, [r4, #12]
 80036a0:	9903      	ldr	r1, [sp, #12]
 80036a2:	1a5b      	subs	r3, r3, r1
 80036a4:	42ab      	cmp	r3, r5
 80036a6:	dcf2      	bgt.n	800368e <_printf_i+0x21e>
 80036a8:	e7eb      	b.n	8003682 <_printf_i+0x212>
 80036aa:	2500      	movs	r5, #0
 80036ac:	f104 0619 	add.w	r6, r4, #25
 80036b0:	e7f5      	b.n	800369e <_printf_i+0x22e>
 80036b2:	bf00      	nop
 80036b4:	08003e01 	.word	0x08003e01
 80036b8:	08003e12 	.word	0x08003e12

080036bc <_sbrk_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4d06      	ldr	r5, [pc, #24]	; (80036d8 <_sbrk_r+0x1c>)
 80036c0:	2300      	movs	r3, #0
 80036c2:	4604      	mov	r4, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	f7fe fe66 	bl	8002398 <_sbrk>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d102      	bne.n	80036d6 <_sbrk_r+0x1a>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	b103      	cbz	r3, 80036d6 <_sbrk_r+0x1a>
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	20004ccc 	.word	0x20004ccc

080036dc <__sread>:
 80036dc:	b510      	push	{r4, lr}
 80036de:	460c      	mov	r4, r1
 80036e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e4:	f000 fab2 	bl	8003c4c <_read_r>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	bfab      	itete	ge
 80036ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036ee:	89a3      	ldrhlt	r3, [r4, #12]
 80036f0:	181b      	addge	r3, r3, r0
 80036f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036f6:	bfac      	ite	ge
 80036f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80036fa:	81a3      	strhlt	r3, [r4, #12]
 80036fc:	bd10      	pop	{r4, pc}

080036fe <__swrite>:
 80036fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003702:	461f      	mov	r7, r3
 8003704:	898b      	ldrh	r3, [r1, #12]
 8003706:	05db      	lsls	r3, r3, #23
 8003708:	4605      	mov	r5, r0
 800370a:	460c      	mov	r4, r1
 800370c:	4616      	mov	r6, r2
 800370e:	d505      	bpl.n	800371c <__swrite+0x1e>
 8003710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003714:	2302      	movs	r3, #2
 8003716:	2200      	movs	r2, #0
 8003718:	f000 f9c8 	bl	8003aac <_lseek_r>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	4632      	mov	r2, r6
 800372a:	463b      	mov	r3, r7
 800372c:	4628      	mov	r0, r5
 800372e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003732:	f000 b869 	b.w	8003808 <_write_r>

08003736 <__sseek>:
 8003736:	b510      	push	{r4, lr}
 8003738:	460c      	mov	r4, r1
 800373a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373e:	f000 f9b5 	bl	8003aac <_lseek_r>
 8003742:	1c43      	adds	r3, r0, #1
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	bf15      	itete	ne
 8003748:	6560      	strne	r0, [r4, #84]	; 0x54
 800374a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800374e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003752:	81a3      	strheq	r3, [r4, #12]
 8003754:	bf18      	it	ne
 8003756:	81a3      	strhne	r3, [r4, #12]
 8003758:	bd10      	pop	{r4, pc}

0800375a <__sclose>:
 800375a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375e:	f000 b8d3 	b.w	8003908 <_close_r>
	...

08003764 <__swbuf_r>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	460e      	mov	r6, r1
 8003768:	4614      	mov	r4, r2
 800376a:	4605      	mov	r5, r0
 800376c:	b118      	cbz	r0, 8003776 <__swbuf_r+0x12>
 800376e:	6983      	ldr	r3, [r0, #24]
 8003770:	b90b      	cbnz	r3, 8003776 <__swbuf_r+0x12>
 8003772:	f7ff fb81 	bl	8002e78 <__sinit>
 8003776:	4b21      	ldr	r3, [pc, #132]	; (80037fc <__swbuf_r+0x98>)
 8003778:	429c      	cmp	r4, r3
 800377a:	d12b      	bne.n	80037d4 <__swbuf_r+0x70>
 800377c:	686c      	ldr	r4, [r5, #4]
 800377e:	69a3      	ldr	r3, [r4, #24]
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	071a      	lsls	r2, r3, #28
 8003786:	d52f      	bpl.n	80037e8 <__swbuf_r+0x84>
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	b36b      	cbz	r3, 80037e8 <__swbuf_r+0x84>
 800378c:	6923      	ldr	r3, [r4, #16]
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	1ac0      	subs	r0, r0, r3
 8003792:	6963      	ldr	r3, [r4, #20]
 8003794:	b2f6      	uxtb	r6, r6
 8003796:	4283      	cmp	r3, r0
 8003798:	4637      	mov	r7, r6
 800379a:	dc04      	bgt.n	80037a6 <__swbuf_r+0x42>
 800379c:	4621      	mov	r1, r4
 800379e:	4628      	mov	r0, r5
 80037a0:	f000 f948 	bl	8003a34 <_fflush_r>
 80037a4:	bb30      	cbnz	r0, 80037f4 <__swbuf_r+0x90>
 80037a6:	68a3      	ldr	r3, [r4, #8]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60a3      	str	r3, [r4, #8]
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	6022      	str	r2, [r4, #0]
 80037b2:	701e      	strb	r6, [r3, #0]
 80037b4:	6963      	ldr	r3, [r4, #20]
 80037b6:	3001      	adds	r0, #1
 80037b8:	4283      	cmp	r3, r0
 80037ba:	d004      	beq.n	80037c6 <__swbuf_r+0x62>
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	07db      	lsls	r3, r3, #31
 80037c0:	d506      	bpl.n	80037d0 <__swbuf_r+0x6c>
 80037c2:	2e0a      	cmp	r6, #10
 80037c4:	d104      	bne.n	80037d0 <__swbuf_r+0x6c>
 80037c6:	4621      	mov	r1, r4
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 f933 	bl	8003a34 <_fflush_r>
 80037ce:	b988      	cbnz	r0, 80037f4 <__swbuf_r+0x90>
 80037d0:	4638      	mov	r0, r7
 80037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <__swbuf_r+0x9c>)
 80037d6:	429c      	cmp	r4, r3
 80037d8:	d101      	bne.n	80037de <__swbuf_r+0x7a>
 80037da:	68ac      	ldr	r4, [r5, #8]
 80037dc:	e7cf      	b.n	800377e <__swbuf_r+0x1a>
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <__swbuf_r+0xa0>)
 80037e0:	429c      	cmp	r4, r3
 80037e2:	bf08      	it	eq
 80037e4:	68ec      	ldreq	r4, [r5, #12]
 80037e6:	e7ca      	b.n	800377e <__swbuf_r+0x1a>
 80037e8:	4621      	mov	r1, r4
 80037ea:	4628      	mov	r0, r5
 80037ec:	f000 f81e 	bl	800382c <__swsetup_r>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d0cb      	beq.n	800378c <__swbuf_r+0x28>
 80037f4:	f04f 37ff 	mov.w	r7, #4294967295
 80037f8:	e7ea      	b.n	80037d0 <__swbuf_r+0x6c>
 80037fa:	bf00      	nop
 80037fc:	08003db0 	.word	0x08003db0
 8003800:	08003dd0 	.word	0x08003dd0
 8003804:	08003d90 	.word	0x08003d90

08003808 <_write_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4d07      	ldr	r5, [pc, #28]	; (8003828 <_write_r+0x20>)
 800380c:	4604      	mov	r4, r0
 800380e:	4608      	mov	r0, r1
 8003810:	4611      	mov	r1, r2
 8003812:	2200      	movs	r2, #0
 8003814:	602a      	str	r2, [r5, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	f000 fa74 	bl	8003d04 <_write>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d102      	bne.n	8003826 <_write_r+0x1e>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	b103      	cbz	r3, 8003826 <_write_r+0x1e>
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	20004ccc 	.word	0x20004ccc

0800382c <__swsetup_r>:
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <__swsetup_r+0xcc>)
 800382e:	b570      	push	{r4, r5, r6, lr}
 8003830:	681d      	ldr	r5, [r3, #0]
 8003832:	4606      	mov	r6, r0
 8003834:	460c      	mov	r4, r1
 8003836:	b125      	cbz	r5, 8003842 <__swsetup_r+0x16>
 8003838:	69ab      	ldr	r3, [r5, #24]
 800383a:	b913      	cbnz	r3, 8003842 <__swsetup_r+0x16>
 800383c:	4628      	mov	r0, r5
 800383e:	f7ff fb1b 	bl	8002e78 <__sinit>
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <__swsetup_r+0xd0>)
 8003844:	429c      	cmp	r4, r3
 8003846:	d10f      	bne.n	8003868 <__swsetup_r+0x3c>
 8003848:	686c      	ldr	r4, [r5, #4]
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003850:	0719      	lsls	r1, r3, #28
 8003852:	d42c      	bmi.n	80038ae <__swsetup_r+0x82>
 8003854:	06dd      	lsls	r5, r3, #27
 8003856:	d411      	bmi.n	800387c <__swsetup_r+0x50>
 8003858:	2309      	movs	r3, #9
 800385a:	6033      	str	r3, [r6, #0]
 800385c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003860:	81a3      	strh	r3, [r4, #12]
 8003862:	f04f 30ff 	mov.w	r0, #4294967295
 8003866:	e03e      	b.n	80038e6 <__swsetup_r+0xba>
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <__swsetup_r+0xd4>)
 800386a:	429c      	cmp	r4, r3
 800386c:	d101      	bne.n	8003872 <__swsetup_r+0x46>
 800386e:	68ac      	ldr	r4, [r5, #8]
 8003870:	e7eb      	b.n	800384a <__swsetup_r+0x1e>
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <__swsetup_r+0xd8>)
 8003874:	429c      	cmp	r4, r3
 8003876:	bf08      	it	eq
 8003878:	68ec      	ldreq	r4, [r5, #12]
 800387a:	e7e6      	b.n	800384a <__swsetup_r+0x1e>
 800387c:	0758      	lsls	r0, r3, #29
 800387e:	d512      	bpl.n	80038a6 <__swsetup_r+0x7a>
 8003880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003882:	b141      	cbz	r1, 8003896 <__swsetup_r+0x6a>
 8003884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003888:	4299      	cmp	r1, r3
 800388a:	d002      	beq.n	8003892 <__swsetup_r+0x66>
 800388c:	4630      	mov	r0, r6
 800388e:	f000 f991 	bl	8003bb4 <_free_r>
 8003892:	2300      	movs	r3, #0
 8003894:	6363      	str	r3, [r4, #52]	; 0x34
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	2300      	movs	r3, #0
 80038a0:	6063      	str	r3, [r4, #4]
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	f043 0308 	orr.w	r3, r3, #8
 80038ac:	81a3      	strh	r3, [r4, #12]
 80038ae:	6923      	ldr	r3, [r4, #16]
 80038b0:	b94b      	cbnz	r3, 80038c6 <__swsetup_r+0x9a>
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038bc:	d003      	beq.n	80038c6 <__swsetup_r+0x9a>
 80038be:	4621      	mov	r1, r4
 80038c0:	4630      	mov	r0, r6
 80038c2:	f000 f92b 	bl	8003b1c <__smakebuf_r>
 80038c6:	89a0      	ldrh	r0, [r4, #12]
 80038c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038cc:	f010 0301 	ands.w	r3, r0, #1
 80038d0:	d00a      	beq.n	80038e8 <__swsetup_r+0xbc>
 80038d2:	2300      	movs	r3, #0
 80038d4:	60a3      	str	r3, [r4, #8]
 80038d6:	6963      	ldr	r3, [r4, #20]
 80038d8:	425b      	negs	r3, r3
 80038da:	61a3      	str	r3, [r4, #24]
 80038dc:	6923      	ldr	r3, [r4, #16]
 80038de:	b943      	cbnz	r3, 80038f2 <__swsetup_r+0xc6>
 80038e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038e4:	d1ba      	bne.n	800385c <__swsetup_r+0x30>
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	0781      	lsls	r1, r0, #30
 80038ea:	bf58      	it	pl
 80038ec:	6963      	ldrpl	r3, [r4, #20]
 80038ee:	60a3      	str	r3, [r4, #8]
 80038f0:	e7f4      	b.n	80038dc <__swsetup_r+0xb0>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e7f7      	b.n	80038e6 <__swsetup_r+0xba>
 80038f6:	bf00      	nop
 80038f8:	20000050 	.word	0x20000050
 80038fc:	08003db0 	.word	0x08003db0
 8003900:	08003dd0 	.word	0x08003dd0
 8003904:	08003d90 	.word	0x08003d90

08003908 <_close_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4d06      	ldr	r5, [pc, #24]	; (8003924 <_close_r+0x1c>)
 800390c:	2300      	movs	r3, #0
 800390e:	4604      	mov	r4, r0
 8003910:	4608      	mov	r0, r1
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	f000 f9ce 	bl	8003cb4 <_close>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_close_r+0x1a>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_close_r+0x1a>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	20004ccc 	.word	0x20004ccc

08003928 <__sflush_r>:
 8003928:	898a      	ldrh	r2, [r1, #12]
 800392a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800392e:	4605      	mov	r5, r0
 8003930:	0710      	lsls	r0, r2, #28
 8003932:	460c      	mov	r4, r1
 8003934:	d458      	bmi.n	80039e8 <__sflush_r+0xc0>
 8003936:	684b      	ldr	r3, [r1, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	dc05      	bgt.n	8003948 <__sflush_r+0x20>
 800393c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	dc02      	bgt.n	8003948 <__sflush_r+0x20>
 8003942:	2000      	movs	r0, #0
 8003944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800394a:	2e00      	cmp	r6, #0
 800394c:	d0f9      	beq.n	8003942 <__sflush_r+0x1a>
 800394e:	2300      	movs	r3, #0
 8003950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003954:	682f      	ldr	r7, [r5, #0]
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	d032      	beq.n	80039c0 <__sflush_r+0x98>
 800395a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	075a      	lsls	r2, r3, #29
 8003960:	d505      	bpl.n	800396e <__sflush_r+0x46>
 8003962:	6863      	ldr	r3, [r4, #4]
 8003964:	1ac0      	subs	r0, r0, r3
 8003966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003968:	b10b      	cbz	r3, 800396e <__sflush_r+0x46>
 800396a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800396c:	1ac0      	subs	r0, r0, r3
 800396e:	2300      	movs	r3, #0
 8003970:	4602      	mov	r2, r0
 8003972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003974:	6a21      	ldr	r1, [r4, #32]
 8003976:	4628      	mov	r0, r5
 8003978:	47b0      	blx	r6
 800397a:	1c43      	adds	r3, r0, #1
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	d106      	bne.n	800398e <__sflush_r+0x66>
 8003980:	6829      	ldr	r1, [r5, #0]
 8003982:	291d      	cmp	r1, #29
 8003984:	d82c      	bhi.n	80039e0 <__sflush_r+0xb8>
 8003986:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <__sflush_r+0x108>)
 8003988:	40ca      	lsrs	r2, r1
 800398a:	07d6      	lsls	r6, r2, #31
 800398c:	d528      	bpl.n	80039e0 <__sflush_r+0xb8>
 800398e:	2200      	movs	r2, #0
 8003990:	6062      	str	r2, [r4, #4]
 8003992:	04d9      	lsls	r1, r3, #19
 8003994:	6922      	ldr	r2, [r4, #16]
 8003996:	6022      	str	r2, [r4, #0]
 8003998:	d504      	bpl.n	80039a4 <__sflush_r+0x7c>
 800399a:	1c42      	adds	r2, r0, #1
 800399c:	d101      	bne.n	80039a2 <__sflush_r+0x7a>
 800399e:	682b      	ldr	r3, [r5, #0]
 80039a0:	b903      	cbnz	r3, 80039a4 <__sflush_r+0x7c>
 80039a2:	6560      	str	r0, [r4, #84]	; 0x54
 80039a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039a6:	602f      	str	r7, [r5, #0]
 80039a8:	2900      	cmp	r1, #0
 80039aa:	d0ca      	beq.n	8003942 <__sflush_r+0x1a>
 80039ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039b0:	4299      	cmp	r1, r3
 80039b2:	d002      	beq.n	80039ba <__sflush_r+0x92>
 80039b4:	4628      	mov	r0, r5
 80039b6:	f000 f8fd 	bl	8003bb4 <_free_r>
 80039ba:	2000      	movs	r0, #0
 80039bc:	6360      	str	r0, [r4, #52]	; 0x34
 80039be:	e7c1      	b.n	8003944 <__sflush_r+0x1c>
 80039c0:	6a21      	ldr	r1, [r4, #32]
 80039c2:	2301      	movs	r3, #1
 80039c4:	4628      	mov	r0, r5
 80039c6:	47b0      	blx	r6
 80039c8:	1c41      	adds	r1, r0, #1
 80039ca:	d1c7      	bne.n	800395c <__sflush_r+0x34>
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0c4      	beq.n	800395c <__sflush_r+0x34>
 80039d2:	2b1d      	cmp	r3, #29
 80039d4:	d001      	beq.n	80039da <__sflush_r+0xb2>
 80039d6:	2b16      	cmp	r3, #22
 80039d8:	d101      	bne.n	80039de <__sflush_r+0xb6>
 80039da:	602f      	str	r7, [r5, #0]
 80039dc:	e7b1      	b.n	8003942 <__sflush_r+0x1a>
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e4:	81a3      	strh	r3, [r4, #12]
 80039e6:	e7ad      	b.n	8003944 <__sflush_r+0x1c>
 80039e8:	690f      	ldr	r7, [r1, #16]
 80039ea:	2f00      	cmp	r7, #0
 80039ec:	d0a9      	beq.n	8003942 <__sflush_r+0x1a>
 80039ee:	0793      	lsls	r3, r2, #30
 80039f0:	680e      	ldr	r6, [r1, #0]
 80039f2:	bf08      	it	eq
 80039f4:	694b      	ldreq	r3, [r1, #20]
 80039f6:	600f      	str	r7, [r1, #0]
 80039f8:	bf18      	it	ne
 80039fa:	2300      	movne	r3, #0
 80039fc:	eba6 0807 	sub.w	r8, r6, r7
 8003a00:	608b      	str	r3, [r1, #8]
 8003a02:	f1b8 0f00 	cmp.w	r8, #0
 8003a06:	dd9c      	ble.n	8003942 <__sflush_r+0x1a>
 8003a08:	6a21      	ldr	r1, [r4, #32]
 8003a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a0c:	4643      	mov	r3, r8
 8003a0e:	463a      	mov	r2, r7
 8003a10:	4628      	mov	r0, r5
 8003a12:	47b0      	blx	r6
 8003a14:	2800      	cmp	r0, #0
 8003a16:	dc06      	bgt.n	8003a26 <__sflush_r+0xfe>
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	e78e      	b.n	8003944 <__sflush_r+0x1c>
 8003a26:	4407      	add	r7, r0
 8003a28:	eba8 0800 	sub.w	r8, r8, r0
 8003a2c:	e7e9      	b.n	8003a02 <__sflush_r+0xda>
 8003a2e:	bf00      	nop
 8003a30:	20400001 	.word	0x20400001

08003a34 <_fflush_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	690b      	ldr	r3, [r1, #16]
 8003a38:	4605      	mov	r5, r0
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	b913      	cbnz	r3, 8003a44 <_fflush_r+0x10>
 8003a3e:	2500      	movs	r5, #0
 8003a40:	4628      	mov	r0, r5
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	b118      	cbz	r0, 8003a4e <_fflush_r+0x1a>
 8003a46:	6983      	ldr	r3, [r0, #24]
 8003a48:	b90b      	cbnz	r3, 8003a4e <_fflush_r+0x1a>
 8003a4a:	f7ff fa15 	bl	8002e78 <__sinit>
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <_fflush_r+0x6c>)
 8003a50:	429c      	cmp	r4, r3
 8003a52:	d11b      	bne.n	8003a8c <_fflush_r+0x58>
 8003a54:	686c      	ldr	r4, [r5, #4]
 8003a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ef      	beq.n	8003a3e <_fflush_r+0xa>
 8003a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a60:	07d0      	lsls	r0, r2, #31
 8003a62:	d404      	bmi.n	8003a6e <_fflush_r+0x3a>
 8003a64:	0599      	lsls	r1, r3, #22
 8003a66:	d402      	bmi.n	8003a6e <_fflush_r+0x3a>
 8003a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a6a:	f7ff faa3 	bl	8002fb4 <__retarget_lock_acquire_recursive>
 8003a6e:	4628      	mov	r0, r5
 8003a70:	4621      	mov	r1, r4
 8003a72:	f7ff ff59 	bl	8003928 <__sflush_r>
 8003a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a78:	07da      	lsls	r2, r3, #31
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	d4e0      	bmi.n	8003a40 <_fflush_r+0xc>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	059b      	lsls	r3, r3, #22
 8003a82:	d4dd      	bmi.n	8003a40 <_fflush_r+0xc>
 8003a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a86:	f7ff fa96 	bl	8002fb6 <__retarget_lock_release_recursive>
 8003a8a:	e7d9      	b.n	8003a40 <_fflush_r+0xc>
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <_fflush_r+0x70>)
 8003a8e:	429c      	cmp	r4, r3
 8003a90:	d101      	bne.n	8003a96 <_fflush_r+0x62>
 8003a92:	68ac      	ldr	r4, [r5, #8]
 8003a94:	e7df      	b.n	8003a56 <_fflush_r+0x22>
 8003a96:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <_fflush_r+0x74>)
 8003a98:	429c      	cmp	r4, r3
 8003a9a:	bf08      	it	eq
 8003a9c:	68ec      	ldreq	r4, [r5, #12]
 8003a9e:	e7da      	b.n	8003a56 <_fflush_r+0x22>
 8003aa0:	08003db0 	.word	0x08003db0
 8003aa4:	08003dd0 	.word	0x08003dd0
 8003aa8:	08003d90 	.word	0x08003d90

08003aac <_lseek_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4d07      	ldr	r5, [pc, #28]	; (8003acc <_lseek_r+0x20>)
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	4608      	mov	r0, r1
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	602a      	str	r2, [r5, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 f912 	bl	8003ce4 <_lseek>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d102      	bne.n	8003aca <_lseek_r+0x1e>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	b103      	cbz	r3, 8003aca <_lseek_r+0x1e>
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	20004ccc 	.word	0x20004ccc

08003ad0 <__swhatbuf_r>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	460e      	mov	r6, r1
 8003ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	b096      	sub	sp, #88	; 0x58
 8003adc:	4614      	mov	r4, r2
 8003ade:	461d      	mov	r5, r3
 8003ae0:	da08      	bge.n	8003af4 <__swhatbuf_r+0x24>
 8003ae2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	602a      	str	r2, [r5, #0]
 8003aea:	061a      	lsls	r2, r3, #24
 8003aec:	d410      	bmi.n	8003b10 <__swhatbuf_r+0x40>
 8003aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af2:	e00e      	b.n	8003b12 <__swhatbuf_r+0x42>
 8003af4:	466a      	mov	r2, sp
 8003af6:	f000 f8bb 	bl	8003c70 <_fstat_r>
 8003afa:	2800      	cmp	r0, #0
 8003afc:	dbf1      	blt.n	8003ae2 <__swhatbuf_r+0x12>
 8003afe:	9a01      	ldr	r2, [sp, #4]
 8003b00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b08:	425a      	negs	r2, r3
 8003b0a:	415a      	adcs	r2, r3
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	e7ee      	b.n	8003aee <__swhatbuf_r+0x1e>
 8003b10:	2340      	movs	r3, #64	; 0x40
 8003b12:	2000      	movs	r0, #0
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	b016      	add	sp, #88	; 0x58
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b1c <__smakebuf_r>:
 8003b1c:	898b      	ldrh	r3, [r1, #12]
 8003b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b20:	079d      	lsls	r5, r3, #30
 8003b22:	4606      	mov	r6, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	d507      	bpl.n	8003b38 <__smakebuf_r+0x1c>
 8003b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	2301      	movs	r3, #1
 8003b32:	6163      	str	r3, [r4, #20]
 8003b34:	b002      	add	sp, #8
 8003b36:	bd70      	pop	{r4, r5, r6, pc}
 8003b38:	ab01      	add	r3, sp, #4
 8003b3a:	466a      	mov	r2, sp
 8003b3c:	f7ff ffc8 	bl	8003ad0 <__swhatbuf_r>
 8003b40:	9900      	ldr	r1, [sp, #0]
 8003b42:	4605      	mov	r5, r0
 8003b44:	4630      	mov	r0, r6
 8003b46:	f7ff fa57 	bl	8002ff8 <_malloc_r>
 8003b4a:	b948      	cbnz	r0, 8003b60 <__smakebuf_r+0x44>
 8003b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b50:	059a      	lsls	r2, r3, #22
 8003b52:	d4ef      	bmi.n	8003b34 <__smakebuf_r+0x18>
 8003b54:	f023 0303 	bic.w	r3, r3, #3
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	e7e3      	b.n	8003b28 <__smakebuf_r+0xc>
 8003b60:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <__smakebuf_r+0x7c>)
 8003b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	6020      	str	r0, [r4, #0]
 8003b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	9b00      	ldr	r3, [sp, #0]
 8003b70:	6163      	str	r3, [r4, #20]
 8003b72:	9b01      	ldr	r3, [sp, #4]
 8003b74:	6120      	str	r0, [r4, #16]
 8003b76:	b15b      	cbz	r3, 8003b90 <__smakebuf_r+0x74>
 8003b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f000 f889 	bl	8003c94 <_isatty_r>
 8003b82:	b128      	cbz	r0, 8003b90 <__smakebuf_r+0x74>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	81a3      	strh	r3, [r4, #12]
 8003b90:	89a0      	ldrh	r0, [r4, #12]
 8003b92:	4305      	orrs	r5, r0
 8003b94:	81a5      	strh	r5, [r4, #12]
 8003b96:	e7cd      	b.n	8003b34 <__smakebuf_r+0x18>
 8003b98:	08002e11 	.word	0x08002e11

08003b9c <__malloc_lock>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <__malloc_lock+0x8>)
 8003b9e:	f7ff ba09 	b.w	8002fb4 <__retarget_lock_acquire_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	20004cc0 	.word	0x20004cc0

08003ba8 <__malloc_unlock>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	; (8003bb0 <__malloc_unlock+0x8>)
 8003baa:	f7ff ba04 	b.w	8002fb6 <__retarget_lock_release_recursive>
 8003bae:	bf00      	nop
 8003bb0:	20004cc0 	.word	0x20004cc0

08003bb4 <_free_r>:
 8003bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bb6:	2900      	cmp	r1, #0
 8003bb8:	d044      	beq.n	8003c44 <_free_r+0x90>
 8003bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bbe:	9001      	str	r0, [sp, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8003bc6:	bfb8      	it	lt
 8003bc8:	18e4      	addlt	r4, r4, r3
 8003bca:	f7ff ffe7 	bl	8003b9c <__malloc_lock>
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <_free_r+0x94>)
 8003bd0:	9801      	ldr	r0, [sp, #4]
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	b933      	cbnz	r3, 8003be4 <_free_r+0x30>
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	6014      	str	r4, [r2, #0]
 8003bda:	b003      	add	sp, #12
 8003bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003be0:	f7ff bfe2 	b.w	8003ba8 <__malloc_unlock>
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d908      	bls.n	8003bfa <_free_r+0x46>
 8003be8:	6825      	ldr	r5, [r4, #0]
 8003bea:	1961      	adds	r1, r4, r5
 8003bec:	428b      	cmp	r3, r1
 8003bee:	bf01      	itttt	eq
 8003bf0:	6819      	ldreq	r1, [r3, #0]
 8003bf2:	685b      	ldreq	r3, [r3, #4]
 8003bf4:	1949      	addeq	r1, r1, r5
 8003bf6:	6021      	streq	r1, [r4, #0]
 8003bf8:	e7ed      	b.n	8003bd6 <_free_r+0x22>
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b10b      	cbz	r3, 8003c04 <_free_r+0x50>
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d9fa      	bls.n	8003bfa <_free_r+0x46>
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	1855      	adds	r5, r2, r1
 8003c08:	42a5      	cmp	r5, r4
 8003c0a:	d10b      	bne.n	8003c24 <_free_r+0x70>
 8003c0c:	6824      	ldr	r4, [r4, #0]
 8003c0e:	4421      	add	r1, r4
 8003c10:	1854      	adds	r4, r2, r1
 8003c12:	42a3      	cmp	r3, r4
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	d1e0      	bne.n	8003bda <_free_r+0x26>
 8003c18:	681c      	ldr	r4, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	6053      	str	r3, [r2, #4]
 8003c1e:	4421      	add	r1, r4
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	e7da      	b.n	8003bda <_free_r+0x26>
 8003c24:	d902      	bls.n	8003c2c <_free_r+0x78>
 8003c26:	230c      	movs	r3, #12
 8003c28:	6003      	str	r3, [r0, #0]
 8003c2a:	e7d6      	b.n	8003bda <_free_r+0x26>
 8003c2c:	6825      	ldr	r5, [r4, #0]
 8003c2e:	1961      	adds	r1, r4, r5
 8003c30:	428b      	cmp	r3, r1
 8003c32:	bf04      	itt	eq
 8003c34:	6819      	ldreq	r1, [r3, #0]
 8003c36:	685b      	ldreq	r3, [r3, #4]
 8003c38:	6063      	str	r3, [r4, #4]
 8003c3a:	bf04      	itt	eq
 8003c3c:	1949      	addeq	r1, r1, r5
 8003c3e:	6021      	streq	r1, [r4, #0]
 8003c40:	6054      	str	r4, [r2, #4]
 8003c42:	e7ca      	b.n	8003bda <_free_r+0x26>
 8003c44:	b003      	add	sp, #12
 8003c46:	bd30      	pop	{r4, r5, pc}
 8003c48:	20004cc4 	.word	0x20004cc4

08003c4c <_read_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4d07      	ldr	r5, [pc, #28]	; (8003c6c <_read_r+0x20>)
 8003c50:	4604      	mov	r4, r0
 8003c52:	4608      	mov	r0, r1
 8003c54:	4611      	mov	r1, r2
 8003c56:	2200      	movs	r2, #0
 8003c58:	602a      	str	r2, [r5, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 f84a 	bl	8003cf4 <_read>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_read_r+0x1e>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_read_r+0x1e>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	20004ccc 	.word	0x20004ccc

08003c70 <_fstat_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4d07      	ldr	r5, [pc, #28]	; (8003c90 <_fstat_r+0x20>)
 8003c74:	2300      	movs	r3, #0
 8003c76:	4604      	mov	r4, r0
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	602b      	str	r3, [r5, #0]
 8003c7e:	f000 f821 	bl	8003cc4 <_fstat>
 8003c82:	1c43      	adds	r3, r0, #1
 8003c84:	d102      	bne.n	8003c8c <_fstat_r+0x1c>
 8003c86:	682b      	ldr	r3, [r5, #0]
 8003c88:	b103      	cbz	r3, 8003c8c <_fstat_r+0x1c>
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	bd38      	pop	{r3, r4, r5, pc}
 8003c8e:	bf00      	nop
 8003c90:	20004ccc 	.word	0x20004ccc

08003c94 <_isatty_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4d06      	ldr	r5, [pc, #24]	; (8003cb0 <_isatty_r+0x1c>)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	f000 f818 	bl	8003cd4 <_isatty>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_isatty_r+0x1a>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_isatty_r+0x1a>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	20004ccc 	.word	0x20004ccc

08003cb4 <_close>:
 8003cb4:	4b02      	ldr	r3, [pc, #8]	; (8003cc0 <_close+0xc>)
 8003cb6:	2258      	movs	r2, #88	; 0x58
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbe:	4770      	bx	lr
 8003cc0:	20004ccc 	.word	0x20004ccc

08003cc4 <_fstat>:
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <_fstat+0xc>)
 8003cc6:	2258      	movs	r2, #88	; 0x58
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f04f 30ff 	mov.w	r0, #4294967295
 8003cce:	4770      	bx	lr
 8003cd0:	20004ccc 	.word	0x20004ccc

08003cd4 <_isatty>:
 8003cd4:	4b02      	ldr	r3, [pc, #8]	; (8003ce0 <_isatty+0xc>)
 8003cd6:	2258      	movs	r2, #88	; 0x58
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	2000      	movs	r0, #0
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20004ccc 	.word	0x20004ccc

08003ce4 <_lseek>:
 8003ce4:	4b02      	ldr	r3, [pc, #8]	; (8003cf0 <_lseek+0xc>)
 8003ce6:	2258      	movs	r2, #88	; 0x58
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295
 8003cee:	4770      	bx	lr
 8003cf0:	20004ccc 	.word	0x20004ccc

08003cf4 <_read>:
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <_read+0xc>)
 8003cf6:	2258      	movs	r2, #88	; 0x58
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfe:	4770      	bx	lr
 8003d00:	20004ccc 	.word	0x20004ccc

08003d04 <_write>:
 8003d04:	4b02      	ldr	r3, [pc, #8]	; (8003d10 <_write+0xc>)
 8003d06:	2258      	movs	r2, #88	; 0x58
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	4770      	bx	lr
 8003d10:	20004ccc 	.word	0x20004ccc

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
