
mm215_gccMy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003088  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003264  08003264  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003264  08003264  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003264  08003264  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003264  08003264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800326c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c54  20000010  0800327c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c64  0800327c  00024c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012637  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c32  00000000  00000000  00032677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009e70  00000000  00000000  000352a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0003f120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e10  00000000  00000000  0003f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154c1  00000000  00000000  000407a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f137  00000000  00000000  00055c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008301b  00000000  00000000  00064da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e7dbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017d0  00000000  00000000  000e7e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003200 	.word	0x08003200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003200 	.word	0x08003200

080001d0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d0:	f100 0308 	add.w	r3, r0, #8
 80001d4:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001d6:	f04f 32ff 	mov.w	r2, #4294967295
 80001da:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001dc:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001de:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001e0:	2300      	movs	r3, #0
 80001e2:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001e4:	4770      	bx	lr

080001e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001ea:	4770      	bx	lr

080001ec <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001ec:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001ee:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001f0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80001f4:	d011      	beq.n	800021a <vListInsert+0x2e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001f6:	f100 0308 	add.w	r3, r0, #8
 80001fa:	461c      	mov	r4, r3
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	42aa      	cmp	r2, r5
 8000202:	d9fa      	bls.n	80001fa <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000204:	6863      	ldr	r3, [r4, #4]
 8000206:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800020a:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 800020c:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800020e:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 8000210:	6803      	ldr	r3, [r0, #0]
 8000212:	3301      	adds	r3, #1
 8000214:	6003      	str	r3, [r0, #0]
}
 8000216:	bc30      	pop	{r4, r5}
 8000218:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 800021a:	6904      	ldr	r4, [r0, #16]
 800021c:	e7f2      	b.n	8000204 <vListInsert+0x18>

0800021e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800021e:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000220:	6841      	ldr	r1, [r0, #4]
 8000222:	6882      	ldr	r2, [r0, #8]
 8000224:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000226:	6841      	ldr	r1, [r0, #4]
 8000228:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800022a:	685a      	ldr	r2, [r3, #4]
 800022c:	4282      	cmp	r2, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800022e:	bf04      	itt	eq
 8000230:	6882      	ldreq	r2, [r0, #8]
 8000232:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000234:	2200      	movs	r2, #0
 8000236:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	3a01      	subs	r2, #1
 800023c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800023e:	6818      	ldr	r0, [r3, #0]
}
 8000240:	4770      	bx	lr

08000242 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000242:	b510      	push	{r4, lr}
 8000244:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000246:	f001 fe05 	bl	8001e54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800024a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 800024c:	f001 fe24 	bl	8001e98 <vPortExitCritical>

    return xReturn;
}
 8000250:	fab4 f084 	clz	r0, r4
 8000254:	0940      	lsrs	r0, r0, #5
 8000256:	bd10      	pop	{r4, pc}

08000258 <prvCopyDataToQueue>:
{
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	4604      	mov	r4, r0
 800025c:	4615      	mov	r5, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800025e:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000260:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000262:	b95a      	cbnz	r2, 800027c <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000264:	6803      	ldr	r3, [r0, #0]
 8000266:	b11b      	cbz	r3, 8000270 <prvCopyDataToQueue+0x18>
    BaseType_t xReturn = pdFALSE;
 8000268:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800026a:	3601      	adds	r6, #1
 800026c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800026e:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000270:	6880      	ldr	r0, [r0, #8]
 8000272:	f001 fb0b 	bl	800188c <xTaskPriorityDisinherit>
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000276:	2300      	movs	r3, #0
 8000278:	60a3      	str	r3, [r4, #8]
 800027a:	e7f6      	b.n	800026a <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
 800027c:	b96d      	cbnz	r5, 800029a <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800027e:	6840      	ldr	r0, [r0, #4]
 8000280:	f002 ffa8 	bl	80031d4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000284:	6863      	ldr	r3, [r4, #4]
 8000286:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000288:	4413      	add	r3, r2
 800028a:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800028c:	68a2      	ldr	r2, [r4, #8]
 800028e:	4293      	cmp	r3, r2
 8000290:	d319      	bcc.n	80002c6 <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000292:	6823      	ldr	r3, [r4, #0]
 8000294:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8000296:	4628      	mov	r0, r5
 8000298:	e7e7      	b.n	800026a <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800029a:	68c0      	ldr	r0, [r0, #12]
 800029c:	f002 ff9a 	bl	80031d4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80002a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80002a2:	4251      	negs	r1, r2
 80002a4:	68e3      	ldr	r3, [r4, #12]
 80002a6:	1a9b      	subs	r3, r3, r2
 80002a8:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80002aa:	6822      	ldr	r2, [r4, #0]
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d202      	bcs.n	80002b6 <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80002b0:	68a3      	ldr	r3, [r4, #8]
 80002b2:	440b      	add	r3, r1
 80002b4:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 80002b6:	2d02      	cmp	r5, #2
 80002b8:	d001      	beq.n	80002be <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
 80002ba:	2000      	movs	r0, #0
 80002bc:	e7d5      	b.n	800026a <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80002be:	b126      	cbz	r6, 80002ca <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
 80002c0:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 80002c2:	2000      	movs	r0, #0
 80002c4:	e7d1      	b.n	800026a <prvCopyDataToQueue+0x12>
 80002c6:	4628      	mov	r0, r5
 80002c8:	e7cf      	b.n	800026a <prvCopyDataToQueue+0x12>
 80002ca:	2000      	movs	r0, #0
 80002cc:	e7cd      	b.n	800026a <prvCopyDataToQueue+0x12>

080002ce <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80002ce:	b570      	push	{r4, r5, r6, lr}
 80002d0:	b082      	sub	sp, #8
 80002d2:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80002d4:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 80002d6:	b164      	cbz	r4, 80002f2 <prvNotifyQueueSetContainer+0x24>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80002d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80002da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80002dc:	429a      	cmp	r2, r3
 80002de:	d311      	bcc.n	8000304 <prvNotifyQueueSetContainer+0x36>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002e0:	f04f 0310 	mov.w	r3, #16
 80002e4:	f383 8811 	msr	BASEPRI, r3
 80002e8:	f3bf 8f6f 	isb	sy
 80002ec:	f3bf 8f4f 	dsb	sy
 80002f0:	e7fe      	b.n	80002f0 <prvNotifyQueueSetContainer+0x22>
 80002f2:	f04f 0310 	mov.w	r3, #16
 80002f6:	f383 8811 	msr	BASEPRI, r3
 80002fa:	f3bf 8f6f 	isb	sy
 80002fe:	f3bf 8f4f 	dsb	sy
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8000302:	e7fe      	b.n	8000302 <prvNotifyQueueSetContainer+0x34>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8000304:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000306:	4293      	cmp	r3, r2
 8000308:	d803      	bhi.n	8000312 <prvNotifyQueueSetContainer+0x44>
        BaseType_t xReturn = pdFALSE;
 800030a:	2500      	movs	r5, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
 800030c:	4628      	mov	r0, r5
 800030e:	b002      	add	sp, #8
 8000310:	bd70      	pop	{r4, r5, r6, pc}
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8000312:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8000316:	b276      	sxtb	r6, r6
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8000318:	2200      	movs	r2, #0
 800031a:	a901      	add	r1, sp, #4
 800031c:	4620      	mov	r0, r4
 800031e:	f7ff ff9b 	bl	8000258 <prvCopyDataToQueue>
 8000322:	4605      	mov	r5, r0
            if( cTxLock == queueUNLOCKED )
 8000324:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000328:	d006      	beq.n	8000338 <prvNotifyQueueSetContainer+0x6a>
                configASSERT( cTxLock != queueINT8_MAX );
 800032a:	2e7f      	cmp	r6, #127	; 0x7f
 800032c:	d00f      	beq.n	800034e <prvNotifyQueueSetContainer+0x80>
                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800032e:	1c73      	adds	r3, r6, #1
 8000330:	b25b      	sxtb	r3, r3
 8000332:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000336:	e7e9      	b.n	800030c <prvNotifyQueueSetContainer+0x3e>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8000338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0e6      	beq.n	800030c <prvNotifyQueueSetContainer+0x3e>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800033e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000342:	f001 f959 	bl	80015f8 <xTaskRemoveFromEventList>
                        xReturn = pdTRUE;
 8000346:	2800      	cmp	r0, #0
 8000348:	bf18      	it	ne
 800034a:	2501      	movne	r5, #1
 800034c:	e7de      	b.n	800030c <prvNotifyQueueSetContainer+0x3e>
 800034e:	f04f 0310 	mov.w	r3, #16
 8000352:	f383 8811 	msr	BASEPRI, r3
 8000356:	f3bf 8f6f 	isb	sy
 800035a:	f3bf 8f4f 	dsb	sy
                configASSERT( cTxLock != queueINT8_MAX );
 800035e:	e7fe      	b.n	800035e <prvNotifyQueueSetContainer+0x90>

08000360 <prvCopyDataFromQueue>:
{
 8000360:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000362:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000364:	b16a      	cbz	r2, 8000382 <prvCopyDataFromQueue+0x22>
{
 8000366:	b510      	push	{r4, lr}
 8000368:	4608      	mov	r0, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800036a:	68d9      	ldr	r1, [r3, #12]
 800036c:	4411      	add	r1, r2
 800036e:	60d9      	str	r1, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000370:	689c      	ldr	r4, [r3, #8]
 8000372:	42a1      	cmp	r1, r4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000374:	bf24      	itt	cs
 8000376:	6819      	ldrcs	r1, [r3, #0]
 8000378:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800037a:	68d9      	ldr	r1, [r3, #12]
 800037c:	f002 ff2a 	bl	80031d4 <memcpy>
}
 8000380:	bd10      	pop	{r4, pc}
 8000382:	4770      	bx	lr

08000384 <prvUnlockQueue>:
{
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
 8000388:	f001 fd64 	bl	8001e54 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800038c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8000390:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000392:	2c00      	cmp	r4, #0
 8000394:	dd19      	ble.n	80003ca <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000396:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800039a:	e008      	b.n	80003ae <prvUnlockQueue+0x2a>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800039c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800039e:	b1a3      	cbz	r3, 80003ca <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80003a0:	4630      	mov	r0, r6
 80003a2:	f001 f929 	bl	80015f8 <xTaskRemoveFromEventList>
 80003a6:	b968      	cbnz	r0, 80003c4 <prvUnlockQueue+0x40>
            --cTxLock;
 80003a8:	3c01      	subs	r4, #1
 80003aa:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80003ac:	b16c      	cbz	r4, 80003ca <prvUnlockQueue+0x46>
                    if( pxQueue->pxQueueSetContainer != NULL )
 80003ae:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0f3      	beq.n	800039c <prvUnlockQueue+0x18>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80003b4:	4628      	mov	r0, r5
 80003b6:	f7ff ff8a 	bl	80002ce <prvNotifyQueueSetContainer>
 80003ba:	2800      	cmp	r0, #0
 80003bc:	d0f4      	beq.n	80003a8 <prvUnlockQueue+0x24>
                            vTaskMissedYield();
 80003be:	f001 f9ef 	bl	80017a0 <vTaskMissedYield>
 80003c2:	e7f1      	b.n	80003a8 <prvUnlockQueue+0x24>
                                vTaskMissedYield();
 80003c4:	f001 f9ec 	bl	80017a0 <vTaskMissedYield>
 80003c8:	e7ee      	b.n	80003a8 <prvUnlockQueue+0x24>
        pxQueue->cTxLock = queueUNLOCKED;
 80003ca:	23ff      	movs	r3, #255	; 0xff
 80003cc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
 80003d0:	f001 fd62 	bl	8001e98 <vPortExitCritical>
    taskENTER_CRITICAL();
 80003d4:	f001 fd3e 	bl	8001e54 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80003d8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80003dc:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80003de:	2c00      	cmp	r4, #0
 80003e0:	dd0f      	ble.n	8000402 <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003e2:	f105 0610 	add.w	r6, r5, #16
 80003e6:	e002      	b.n	80003ee <prvUnlockQueue+0x6a>
                --cRxLock;
 80003e8:	3c01      	subs	r4, #1
 80003ea:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80003ec:	b14c      	cbz	r4, 8000402 <prvUnlockQueue+0x7e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003ee:	692b      	ldr	r3, [r5, #16]
 80003f0:	b13b      	cbz	r3, 8000402 <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003f2:	4630      	mov	r0, r6
 80003f4:	f001 f900 	bl	80015f8 <xTaskRemoveFromEventList>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d0f5      	beq.n	80003e8 <prvUnlockQueue+0x64>
                    vTaskMissedYield();
 80003fc:	f001 f9d0 	bl	80017a0 <vTaskMissedYield>
 8000400:	e7f2      	b.n	80003e8 <prvUnlockQueue+0x64>
        pxQueue->cRxLock = queueUNLOCKED;
 8000402:	23ff      	movs	r3, #255	; 0xff
 8000404:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
 8000408:	f001 fd46 	bl	8001e98 <vPortExitCritical>
}
 800040c:	bd70      	pop	{r4, r5, r6, pc}

0800040e <xQueueGenericReset>:
{
 800040e:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
 8000410:	b180      	cbz	r0, 8000434 <xQueueGenericReset+0x26>
 8000412:	460d      	mov	r5, r1
 8000414:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
 8000416:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000418:	b11b      	cbz	r3, 8000422 <xQueueGenericReset+0x14>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800041a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800041c:	fba2 2303 	umull	r2, r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
 8000420:	b18b      	cbz	r3, 8000446 <xQueueGenericReset+0x38>
 8000422:	f04f 0310 	mov.w	r3, #16
 8000426:	f383 8811 	msr	BASEPRI, r3
 800042a:	f3bf 8f6f 	isb	sy
 800042e:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 8000432:	e7fe      	b.n	8000432 <xQueueGenericReset+0x24>
 8000434:	f04f 0310 	mov.w	r3, #16
 8000438:	f383 8811 	msr	BASEPRI, r3
 800043c:	f3bf 8f6f 	isb	sy
 8000440:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000444:	e7fe      	b.n	8000444 <xQueueGenericReset+0x36>
        taskENTER_CRITICAL();
 8000446:	f001 fd05 	bl	8001e54 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800044a:	6822      	ldr	r2, [r4, #0]
 800044c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800044e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000450:	fb01 f303 	mul.w	r3, r1, r3
 8000454:	18d0      	adds	r0, r2, r3
 8000456:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000458:	2000      	movs	r0, #0
 800045a:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800045c:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800045e:	1a5b      	subs	r3, r3, r1
 8000460:	4413      	add	r3, r2
 8000462:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000464:	23ff      	movs	r3, #255	; 0xff
 8000466:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800046a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 800046e:	b9b5      	cbnz	r5, 800049e <xQueueGenericReset+0x90>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000470:	6923      	ldr	r3, [r4, #16]
 8000472:	b91b      	cbnz	r3, 800047c <xQueueGenericReset+0x6e>
        taskEXIT_CRITICAL();
 8000474:	f001 fd10 	bl	8001e98 <vPortExitCritical>
}
 8000478:	2001      	movs	r0, #1
 800047a:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800047c:	f104 0010 	add.w	r0, r4, #16
 8000480:	f001 f8ba 	bl	80015f8 <xTaskRemoveFromEventList>
 8000484:	2800      	cmp	r0, #0
 8000486:	d0f5      	beq.n	8000474 <xQueueGenericReset+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
 8000488:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800048c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000490:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000494:	f3bf 8f4f 	dsb	sy
 8000498:	f3bf 8f6f 	isb	sy
 800049c:	e7ea      	b.n	8000474 <xQueueGenericReset+0x66>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800049e:	f104 0010 	add.w	r0, r4, #16
 80004a2:	f7ff fe95 	bl	80001d0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80004a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80004aa:	f7ff fe91 	bl	80001d0 <vListInitialise>
 80004ae:	e7e1      	b.n	8000474 <xQueueGenericReset+0x66>

080004b0 <xQueueGenericCreateStatic>:
        configASSERT( pxStaticQueue );
 80004b0:	b173      	cbz	r3, 80004d0 <xQueueGenericCreateStatic+0x20>
    {
 80004b2:	b510      	push	{r4, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	461c      	mov	r4, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004b8:	b108      	cbz	r0, 80004be <xQueueGenericCreateStatic+0xe>
            ( pxStaticQueue != NULL ) &&
 80004ba:	b192      	cbz	r2, 80004e2 <xQueueGenericCreateStatic+0x32>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80004bc:	b9f1      	cbnz	r1, 80004fc <xQueueGenericCreateStatic+0x4c>
 80004be:	f04f 0310 	mov.w	r3, #16
 80004c2:	f383 8811 	msr	BASEPRI, r3
 80004c6:	f3bf 8f6f 	isb	sy
 80004ca:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 80004ce:	e7fe      	b.n	80004ce <xQueueGenericCreateStatic+0x1e>
 80004d0:	f04f 0310 	mov.w	r3, #16
 80004d4:	f383 8811 	msr	BASEPRI, r3
 80004d8:	f3bf 8f6f 	isb	sy
 80004dc:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticQueue );
 80004e0:	e7fe      	b.n	80004e0 <xQueueGenericCreateStatic+0x30>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80004e2:	2900      	cmp	r1, #0
 80004e4:	d1eb      	bne.n	80004be <xQueueGenericCreateStatic+0xe>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 80004e6:	2354      	movs	r3, #84	; 0x54
 80004e8:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80004ea:	9b01      	ldr	r3, [sp, #4]
 80004ec:	2b54      	cmp	r3, #84	; 0x54
 80004ee:	d10a      	bne.n	8000506 <xQueueGenericCreateStatic+0x56>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80004f0:	9b01      	ldr	r3, [sp, #4]
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004f8:	4622      	mov	r2, r4
 80004fa:	e011      	b.n	8000520 <xQueueGenericCreateStatic+0x70>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 80004fc:	2354      	movs	r3, #84	; 0x54
 80004fe:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8000500:	9b01      	ldr	r3, [sp, #4]
 8000502:	2b54      	cmp	r3, #84	; 0x54
 8000504:	d008      	beq.n	8000518 <xQueueGenericCreateStatic+0x68>
 8000506:	f04f 0310 	mov.w	r3, #16
 800050a:	f383 8811 	msr	BASEPRI, r3
 800050e:	f3bf 8f6f 	isb	sy
 8000512:	f3bf 8f4f 	dsb	sy
 8000516:	e7fe      	b.n	8000516 <xQueueGenericCreateStatic+0x66>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8000518:	9b01      	ldr	r3, [sp, #4]
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800051a:	2301      	movs	r3, #1
 800051c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 8000520:	6022      	str	r2, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8000522:	63e0      	str	r0, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000524:	6421      	str	r1, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000526:	2101      	movs	r1, #1
 8000528:	4620      	mov	r0, r4
 800052a:	f7ff ff70 	bl	800040e <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 800052e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000532:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            pxNewQueue->pxQueueSetContainer = NULL;
 8000536:	2300      	movs	r3, #0
 8000538:	64a3      	str	r3, [r4, #72]	; 0x48
    }
 800053a:	4620      	mov	r0, r4
 800053c:	b002      	add	sp, #8
 800053e:	bd10      	pop	{r4, pc}

08000540 <xQueueGenericCreate>:
    {
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000542:	b150      	cbz	r0, 800055a <xQueueGenericCreate+0x1a>
 8000544:	460d      	mov	r5, r1
 8000546:	4614      	mov	r4, r2
 8000548:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800054a:	fba0 2301 	umull	r2, r3, r0, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800054e:	b923      	cbnz	r3, 800055a <xQueueGenericCreate+0x1a>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000550:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000554:	f110 0f55 	cmn.w	r0, #85	; 0x55
 8000558:	d908      	bls.n	800056c <xQueueGenericCreate+0x2c>
 800055a:	f04f 0310 	mov.w	r3, #16
 800055e:	f383 8811 	msr	BASEPRI, r3
 8000562:	f3bf 8f6f 	isb	sy
 8000566:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 800056a:	e7fe      	b.n	800056a <xQueueGenericCreate+0x2a>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800056c:	3054      	adds	r0, #84	; 0x54
 800056e:	f001 fdef 	bl	8002150 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8000572:	4607      	mov	r7, r0
 8000574:	b180      	cbz	r0, 8000598 <xQueueGenericCreate+0x58>
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000576:	2300      	movs	r3, #0
 8000578:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 800057c:	b175      	cbz	r5, 800059c <xQueueGenericCreate+0x5c>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800057e:	f100 0354 	add.w	r3, r0, #84	; 0x54
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000582:	603b      	str	r3, [r7, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8000584:	63fe      	str	r6, [r7, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000586:	643d      	str	r5, [r7, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000588:	2101      	movs	r1, #1
 800058a:	4638      	mov	r0, r7
 800058c:	f7ff ff3f 	bl	800040e <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 8000590:	f887 4050 	strb.w	r4, [r7, #80]	; 0x50
            pxNewQueue->pxQueueSetContainer = NULL;
 8000594:	2300      	movs	r3, #0
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
    }
 8000598:	4638      	mov	r0, r7
 800059a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800059c:	4603      	mov	r3, r0
 800059e:	e7f0      	b.n	8000582 <xQueueGenericCreate+0x42>

080005a0 <xQueueGenericSend>:
{
 80005a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005a4:	b085      	sub	sp, #20
 80005a6:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 80005a8:	b188      	cbz	r0, 80005ce <xQueueGenericSend+0x2e>
 80005aa:	460e      	mov	r6, r1
 80005ac:	461d      	mov	r5, r3
 80005ae:	4604      	mov	r4, r0
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80005b0:	b1b1      	cbz	r1, 80005e0 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80005b2:	2d02      	cmp	r5, #2
 80005b4:	d120      	bne.n	80005f8 <xQueueGenericSend+0x58>
 80005b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d01d      	beq.n	80005f8 <xQueueGenericSend+0x58>
 80005bc:	f04f 0310 	mov.w	r3, #16
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	e7fe      	b.n	80005cc <xQueueGenericSend+0x2c>
 80005ce:	f04f 0310 	mov.w	r3, #16
 80005d2:	f383 8811 	msr	BASEPRI, r3
 80005d6:	f3bf 8f6f 	isb	sy
 80005da:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 80005de:	e7fe      	b.n	80005de <xQueueGenericSend+0x3e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80005e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0e5      	beq.n	80005b2 <xQueueGenericSend+0x12>
 80005e6:	f04f 0310 	mov.w	r3, #16
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	e7fe      	b.n	80005f6 <xQueueGenericSend+0x56>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80005f8:	f001 f8d8 	bl	80017ac <xTaskGetSchedulerState>
 80005fc:	b950      	cbnz	r0, 8000614 <xQueueGenericSend+0x74>
 80005fe:	9b01      	ldr	r3, [sp, #4]
 8000600:	b163      	cbz	r3, 800061c <xQueueGenericSend+0x7c>
 8000602:	f04f 0310 	mov.w	r3, #16
 8000606:	f383 8811 	msr	BASEPRI, r3
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	f3bf 8f4f 	dsb	sy
 8000612:	e7fe      	b.n	8000612 <xQueueGenericSend+0x72>
 8000614:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
 8000618:	2700      	movs	r7, #0
 800061a:	e050      	b.n	80006be <xQueueGenericSend+0x11e>
 800061c:	f04f 0800 	mov.w	r8, #0
 8000620:	e7fa      	b.n	8000618 <xQueueGenericSend+0x78>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000622:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000624:	462a      	mov	r2, r5
 8000626:	4631      	mov	r1, r6
 8000628:	4620      	mov	r0, r4
 800062a:	f7ff fe15 	bl	8000258 <prvCopyDataToQueue>
                        if( pxQueue->pxQueueSetContainer != NULL )
 800062e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000630:	b1b3      	cbz	r3, 8000660 <xQueueGenericSend+0xc0>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8000632:	2d02      	cmp	r5, #2
 8000634:	f000 80a0 	beq.w	8000778 <xQueueGenericSend+0x1d8>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8000638:	4620      	mov	r0, r4
 800063a:	f7ff fe48 	bl	80002ce <prvNotifyQueueSetContainer>
 800063e:	b148      	cbz	r0, 8000654 <xQueueGenericSend+0xb4>
                                queueYIELD_IF_USING_PREEMPTION();
 8000640:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000648:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800064c:	f3bf 8f4f 	dsb	sy
 8000650:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8000654:	f001 fc20 	bl	8001e98 <vPortExitCritical>
                return pdPASS;
 8000658:	2001      	movs	r0, #1
}
 800065a:	b005      	add	sp, #20
 800065c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000662:	b963      	cbnz	r3, 800067e <xQueueGenericSend+0xde>
                            else if( xYieldRequired != pdFALSE )
 8000664:	2800      	cmp	r0, #0
 8000666:	d0f5      	beq.n	8000654 <xQueueGenericSend+0xb4>
                                queueYIELD_IF_USING_PREEMPTION();
 8000668:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800066c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000670:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000674:	f3bf 8f4f 	dsb	sy
 8000678:	f3bf 8f6f 	isb	sy
 800067c:	e7ea      	b.n	8000654 <xQueueGenericSend+0xb4>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800067e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000682:	f000 ffb9 	bl	80015f8 <xTaskRemoveFromEventList>
 8000686:	2800      	cmp	r0, #0
 8000688:	d0e4      	beq.n	8000654 <xQueueGenericSend+0xb4>
                                    queueYIELD_IF_USING_PREEMPTION();
 800068a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800068e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000692:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	e7d9      	b.n	8000654 <xQueueGenericSend+0xb4>
                    taskEXIT_CRITICAL();
 80006a0:	f001 fbfa 	bl	8001e98 <vPortExitCritical>
                    return errQUEUE_FULL;
 80006a4:	2000      	movs	r0, #0
 80006a6:	e7d8      	b.n	800065a <xQueueGenericSend+0xba>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80006a8:	a802      	add	r0, sp, #8
 80006aa:	f001 f81b 	bl	80016e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80006ae:	e014      	b.n	80006da <xQueueGenericSend+0x13a>
                prvUnlockQueue( pxQueue );
 80006b0:	4620      	mov	r0, r4
 80006b2:	f7ff fe67 	bl	8000384 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006b6:	f000 fdff 	bl	80012b8 <xTaskResumeAll>
 80006ba:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
 80006be:	f001 fbc9 	bl	8001e54 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80006c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3ab      	bcc.n	8000622 <xQueueGenericSend+0x82>
 80006ca:	2d02      	cmp	r5, #2
 80006cc:	d04a      	beq.n	8000764 <xQueueGenericSend+0x1c4>
                if( xTicksToWait == ( TickType_t ) 0 )
 80006ce:	9b01      	ldr	r3, [sp, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0e5      	beq.n	80006a0 <xQueueGenericSend+0x100>
                else if( xEntryTimeSet == pdFALSE )
 80006d4:	f1b8 0f00 	cmp.w	r8, #0
 80006d8:	d0e6      	beq.n	80006a8 <xQueueGenericSend+0x108>
        taskEXIT_CRITICAL();
 80006da:	f001 fbdd 	bl	8001e98 <vPortExitCritical>
        vTaskSuspendAll();
 80006de:	f000 fd03 	bl	80010e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80006e2:	f001 fbb7 	bl	8001e54 <vPortEnterCritical>
 80006e6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80006ea:	b252      	sxtb	r2, r2
 80006ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80006f0:	bf08      	it	eq
 80006f2:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80006f6:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80006fa:	b252      	sxtb	r2, r2
 80006fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000700:	bf08      	it	eq
 8000702:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8000706:	f001 fbc7 	bl	8001e98 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800070a:	a901      	add	r1, sp, #4
 800070c:	a802      	add	r0, sp, #8
 800070e:	f000 fff5 	bl	80016fc <xTaskCheckForTimeOut>
 8000712:	bb00      	cbnz	r0, 8000756 <xQueueGenericSend+0x1b6>
    taskENTER_CRITICAL();
 8000714:	f001 fb9e 	bl	8001e54 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000718:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 800071c:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
 8000720:	f001 fbba 	bl	8001e98 <vPortExitCritical>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000724:	45c1      	cmp	r9, r8
 8000726:	d1c3      	bne.n	80006b0 <xQueueGenericSend+0x110>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000728:	9901      	ldr	r1, [sp, #4]
 800072a:	f104 0010 	add.w	r0, r4, #16
 800072e:	f000 ff21 	bl	8001574 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000732:	4620      	mov	r0, r4
 8000734:	f7ff fe26 	bl	8000384 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8000738:	f000 fdbe 	bl	80012b8 <xTaskResumeAll>
 800073c:	2800      	cmp	r0, #0
 800073e:	d1bc      	bne.n	80006ba <xQueueGenericSend+0x11a>
                    portYIELD_WITHIN_API();
 8000740:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000748:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800074c:	f3bf 8f4f 	dsb	sy
 8000750:	f3bf 8f6f 	isb	sy
 8000754:	e7b1      	b.n	80006ba <xQueueGenericSend+0x11a>
            prvUnlockQueue( pxQueue );
 8000756:	4620      	mov	r0, r4
 8000758:	f7ff fe14 	bl	8000384 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800075c:	f000 fdac 	bl	80012b8 <xTaskResumeAll>
            return errQUEUE_FULL;
 8000760:	2000      	movs	r0, #0
 8000762:	e77a      	b.n	800065a <xQueueGenericSend+0xba>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000764:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000766:	2202      	movs	r2, #2
 8000768:	4631      	mov	r1, r6
 800076a:	4620      	mov	r0, r4
 800076c:	f7ff fd74 	bl	8000258 <prvCopyDataToQueue>
                        if( pxQueue->pxQueueSetContainer != NULL )
 8000770:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000772:	2b00      	cmp	r3, #0
 8000774:	f43f af74 	beq.w	8000660 <xQueueGenericSend+0xc0>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8000778:	2f00      	cmp	r7, #0
 800077a:	f47f af6b 	bne.w	8000654 <xQueueGenericSend+0xb4>
 800077e:	e75b      	b.n	8000638 <xQueueGenericSend+0x98>

08000780 <xQueueGiveFromISR>:
    configASSERT( pxQueue );
 8000780:	b168      	cbz	r0, 800079e <xQueueGiveFromISR+0x1e>
{
 8000782:	b570      	push	{r4, r5, r6, lr}
 8000784:	460d      	mov	r5, r1
 8000786:	4604      	mov	r4, r0
    configASSERT( pxQueue->uxItemSize == 0 );
 8000788:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800078a:	b18b      	cbz	r3, 80007b0 <xQueueGiveFromISR+0x30>
 800078c:	f04f 0310 	mov.w	r3, #16
 8000790:	f383 8811 	msr	BASEPRI, r3
 8000794:	f3bf 8f6f 	isb	sy
 8000798:	f3bf 8f4f 	dsb	sy
 800079c:	e7fe      	b.n	800079c <xQueueGiveFromISR+0x1c>
 800079e:	f04f 0310 	mov.w	r3, #16
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 80007ae:	e7fe      	b.n	80007ae <xQueueGiveFromISR+0x2e>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80007b0:	6803      	ldr	r3, [r0, #0]
 80007b2:	b1fb      	cbz	r3, 80007f4 <xQueueGiveFromISR+0x74>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80007b4:	f001 fc6e 	bl	8002094 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80007b8:	f3ef 8611 	mrs	r6, BASEPRI
 80007bc:	f04f 0310 	mov.w	r3, #16
 80007c0:	f383 8811 	msr	BASEPRI, r3
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	f3bf 8f4f 	dsb	sy
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80007cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 80007ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d93b      	bls.n	800084c <xQueueGiveFromISR+0xcc>
            const int8_t cTxLock = pxQueue->cTxLock;
 80007d4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80007d8:	b252      	sxtb	r2, r2
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80007da:	3301      	adds	r3, #1
 80007dc:	63a3      	str	r3, [r4, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 80007de:	f1b2 3fff 	cmp.w	r2, #4294967295
 80007e2:	d013      	beq.n	800080c <xQueueGiveFromISR+0x8c>
                configASSERT( cTxLock != queueINT8_MAX );
 80007e4:	2a7f      	cmp	r2, #127	; 0x7f
 80007e6:	d028      	beq.n	800083a <xQueueGiveFromISR+0xba>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80007e8:	1c53      	adds	r3, r2, #1
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            xReturn = pdPASS;
 80007f0:	2001      	movs	r0, #1
 80007f2:	e02c      	b.n	800084e <xQueueGiveFromISR+0xce>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80007f4:	6883      	ldr	r3, [r0, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0dc      	beq.n	80007b4 <xQueueGiveFromISR+0x34>
        __asm volatile
 80007fa:	f04f 0310 	mov.w	r3, #16
 80007fe:	f383 8811 	msr	BASEPRI, r3
 8000802:	f3bf 8f6f 	isb	sy
 8000806:	f3bf 8f4f 	dsb	sy
 800080a:	e7fe      	b.n	800080a <xQueueGiveFromISR+0x8a>
                        if( pxQueue->pxQueueSetContainer != NULL )
 800080c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800080e:	b13b      	cbz	r3, 8000820 <xQueueGiveFromISR+0xa0>
                            if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fd5c 	bl	80002ce <prvNotifyQueueSetContainer>
 8000816:	b1e8      	cbz	r0, 8000854 <xQueueGiveFromISR+0xd4>
                                if( pxHigherPriorityTaskWoken != NULL )
 8000818:	b1f5      	cbz	r5, 8000858 <xQueueGiveFromISR+0xd8>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800081a:	2001      	movs	r0, #1
 800081c:	6028      	str	r0, [r5, #0]
 800081e:	e016      	b.n	800084e <xQueueGiveFromISR+0xce>
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000822:	b90b      	cbnz	r3, 8000828 <xQueueGiveFromISR+0xa8>
            xReturn = pdPASS;
 8000824:	2001      	movs	r0, #1
 8000826:	e012      	b.n	800084e <xQueueGiveFromISR+0xce>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000828:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800082c:	f000 fee4 	bl	80015f8 <xTaskRemoveFromEventList>
 8000830:	b1a0      	cbz	r0, 800085c <xQueueGiveFromISR+0xdc>
                                    if( pxHigherPriorityTaskWoken != NULL )
 8000832:	b1ad      	cbz	r5, 8000860 <xQueueGiveFromISR+0xe0>
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8000834:	2001      	movs	r0, #1
 8000836:	6028      	str	r0, [r5, #0]
 8000838:	e009      	b.n	800084e <xQueueGiveFromISR+0xce>
 800083a:	f04f 0310 	mov.w	r3, #16
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
                configASSERT( cTxLock != queueINT8_MAX );
 800084a:	e7fe      	b.n	800084a <xQueueGiveFromISR+0xca>
            xReturn = errQUEUE_FULL;
 800084c:	2000      	movs	r0, #0
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800084e:	f386 8811 	msr	BASEPRI, r6
}
 8000852:	bd70      	pop	{r4, r5, r6, pc}
            xReturn = pdPASS;
 8000854:	2001      	movs	r0, #1
 8000856:	e7fa      	b.n	800084e <xQueueGiveFromISR+0xce>
 8000858:	2001      	movs	r0, #1
 800085a:	e7f8      	b.n	800084e <xQueueGiveFromISR+0xce>
 800085c:	2001      	movs	r0, #1
 800085e:	e7f6      	b.n	800084e <xQueueGiveFromISR+0xce>
 8000860:	2001      	movs	r0, #1
 8000862:	e7f4      	b.n	800084e <xQueueGiveFromISR+0xce>

08000864 <xQueueReceive>:
{
 8000864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 800086c:	b180      	cbz	r0, 8000890 <xQueueReceive+0x2c>
 800086e:	460e      	mov	r6, r1
 8000870:	4604      	mov	r4, r0
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000872:	b1b1      	cbz	r1, 80008a2 <xQueueReceive+0x3e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000874:	f000 ff9a 	bl	80017ac <xTaskGetSchedulerState>
 8000878:	b9f8      	cbnz	r0, 80008ba <xQueueReceive+0x56>
 800087a:	9b01      	ldr	r3, [sp, #4]
 800087c:	b30b      	cbz	r3, 80008c2 <xQueueReceive+0x5e>
        __asm volatile
 800087e:	f04f 0310 	mov.w	r3, #16
 8000882:	f383 8811 	msr	BASEPRI, r3
 8000886:	f3bf 8f6f 	isb	sy
 800088a:	f3bf 8f4f 	dsb	sy
 800088e:	e7fe      	b.n	800088e <xQueueReceive+0x2a>
 8000890:	f04f 0310 	mov.w	r3, #16
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 80008a0:	e7fe      	b.n	80008a0 <xQueueReceive+0x3c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0e5      	beq.n	8000874 <xQueueReceive+0x10>
 80008a8:	f04f 0310 	mov.w	r3, #16
 80008ac:	f383 8811 	msr	BASEPRI, r3
 80008b0:	f3bf 8f6f 	isb	sy
 80008b4:	f3bf 8f4f 	dsb	sy
 80008b8:	e7fe      	b.n	80008b8 <xQueueReceive+0x54>
 80008ba:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
 80008be:	2700      	movs	r7, #0
 80008c0:	e03b      	b.n	800093a <xQueueReceive+0xd6>
 80008c2:	f04f 0800 	mov.w	r8, #0
 80008c6:	e7fa      	b.n	80008be <xQueueReceive+0x5a>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80008c8:	4631      	mov	r1, r6
 80008ca:	4620      	mov	r0, r4
 80008cc:	f7ff fd48 	bl	8000360 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80008d0:	3d01      	subs	r5, #1
 80008d2:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008d4:	6923      	ldr	r3, [r4, #16]
 80008d6:	b92b      	cbnz	r3, 80008e4 <xQueueReceive+0x80>
                taskEXIT_CRITICAL();
 80008d8:	f001 fade 	bl	8001e98 <vPortExitCritical>
                return pdPASS;
 80008dc:	2001      	movs	r0, #1
}
 80008de:	b004      	add	sp, #16
 80008e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008e4:	f104 0010 	add.w	r0, r4, #16
 80008e8:	f000 fe86 	bl	80015f8 <xTaskRemoveFromEventList>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d0f3      	beq.n	80008d8 <xQueueReceive+0x74>
                        queueYIELD_IF_USING_PREEMPTION();
 80008f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80008f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80008fc:	f3bf 8f4f 	dsb	sy
 8000900:	f3bf 8f6f 	isb	sy
 8000904:	e7e8      	b.n	80008d8 <xQueueReceive+0x74>
                    taskEXIT_CRITICAL();
 8000906:	f001 fac7 	bl	8001e98 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 800090a:	2000      	movs	r0, #0
 800090c:	e7e7      	b.n	80008de <xQueueReceive+0x7a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800090e:	a802      	add	r0, sp, #8
 8000910:	f000 fee8 	bl	80016e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000914:	e01c      	b.n	8000950 <xQueueReceive+0xec>
                prvUnlockQueue( pxQueue );
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff fd34 	bl	8000384 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800091c:	f000 fccc 	bl	80012b8 <xTaskResumeAll>
 8000920:	e009      	b.n	8000936 <xQueueReceive+0xd2>
            prvUnlockQueue( pxQueue );
 8000922:	4620      	mov	r0, r4
 8000924:	f7ff fd2e 	bl	8000384 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000928:	f000 fcc6 	bl	80012b8 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800092c:	4620      	mov	r0, r4
 800092e:	f7ff fc88 	bl	8000242 <prvIsQueueEmpty>
 8000932:	2800      	cmp	r0, #0
 8000934:	d146      	bne.n	80009c4 <xQueueReceive+0x160>
 8000936:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
 800093a:	f001 fa8b 	bl	8001e54 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800093e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000940:	2d00      	cmp	r5, #0
 8000942:	d1c1      	bne.n	80008c8 <xQueueReceive+0x64>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000944:	9b01      	ldr	r3, [sp, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0dd      	beq.n	8000906 <xQueueReceive+0xa2>
                else if( xEntryTimeSet == pdFALSE )
 800094a:	f1b8 0f00 	cmp.w	r8, #0
 800094e:	d0de      	beq.n	800090e <xQueueReceive+0xaa>
        taskEXIT_CRITICAL();
 8000950:	f001 faa2 	bl	8001e98 <vPortExitCritical>
        vTaskSuspendAll();
 8000954:	f000 fbc8 	bl	80010e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000958:	f001 fa7c 	bl	8001e54 <vPortEnterCritical>
 800095c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000960:	b25b      	sxtb	r3, r3
 8000962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000966:	bf08      	it	eq
 8000968:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800096c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000970:	b25b      	sxtb	r3, r3
 8000972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000976:	bf08      	it	eq
 8000978:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800097c:	f001 fa8c 	bl	8001e98 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000980:	a901      	add	r1, sp, #4
 8000982:	a802      	add	r0, sp, #8
 8000984:	f000 feba 	bl	80016fc <xTaskCheckForTimeOut>
 8000988:	2800      	cmp	r0, #0
 800098a:	d1ca      	bne.n	8000922 <xQueueReceive+0xbe>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800098c:	4620      	mov	r0, r4
 800098e:	f7ff fc58 	bl	8000242 <prvIsQueueEmpty>
 8000992:	2800      	cmp	r0, #0
 8000994:	d0bf      	beq.n	8000916 <xQueueReceive+0xb2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000996:	9901      	ldr	r1, [sp, #4]
 8000998:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800099c:	f000 fdea 	bl	8001574 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80009a0:	4620      	mov	r0, r4
 80009a2:	f7ff fcef 	bl	8000384 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80009a6:	f000 fc87 	bl	80012b8 <xTaskResumeAll>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d1c3      	bne.n	8000936 <xQueueReceive+0xd2>
                    portYIELD_WITHIN_API();
 80009ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80009b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	f3bf 8f6f 	isb	sy
 80009c2:	e7b8      	b.n	8000936 <xQueueReceive+0xd2>
                return errQUEUE_EMPTY;
 80009c4:	2000      	movs	r0, #0
 80009c6:	e78a      	b.n	80008de <xQueueReceive+0x7a>

080009c8 <xQueueSemaphoreTake>:
{
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	b085      	sub	sp, #20
 80009cc:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 80009ce:	b158      	cbz	r0, 80009e8 <xQueueSemaphoreTake+0x20>
 80009d0:	4604      	mov	r4, r0
    configASSERT( pxQueue->uxItemSize == 0 );
 80009d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009d4:	b18b      	cbz	r3, 80009fa <xQueueSemaphoreTake+0x32>
 80009d6:	f04f 0310 	mov.w	r3, #16
 80009da:	f383 8811 	msr	BASEPRI, r3
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	f3bf 8f4f 	dsb	sy
 80009e6:	e7fe      	b.n	80009e6 <xQueueSemaphoreTake+0x1e>
 80009e8:	f04f 0310 	mov.w	r3, #16
 80009ec:	f383 8811 	msr	BASEPRI, r3
 80009f0:	f3bf 8f6f 	isb	sy
 80009f4:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 80009f8:	e7fe      	b.n	80009f8 <xQueueSemaphoreTake+0x30>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009fa:	f000 fed7 	bl	80017ac <xTaskGetSchedulerState>
 80009fe:	b950      	cbnz	r0, 8000a16 <xQueueSemaphoreTake+0x4e>
 8000a00:	9b01      	ldr	r3, [sp, #4]
 8000a02:	b163      	cbz	r3, 8000a1e <xQueueSemaphoreTake+0x56>
 8000a04:	f04f 0310 	mov.w	r3, #16
 8000a08:	f383 8811 	msr	BASEPRI, r3
 8000a0c:	f3bf 8f6f 	isb	sy
 8000a10:	f3bf 8f4f 	dsb	sy
 8000a14:	e7fe      	b.n	8000a14 <xQueueSemaphoreTake+0x4c>
 8000a16:	2600      	movs	r6, #0
 8000a18:	4637      	mov	r7, r6
        prvLockQueue( pxQueue );
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e04e      	b.n	8000abc <xQueueSemaphoreTake+0xf4>
 8000a1e:	2600      	movs	r6, #0
 8000a20:	4637      	mov	r7, r6
 8000a22:	e7fa      	b.n	8000a1a <xQueueSemaphoreTake+0x52>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000a24:	3b01      	subs	r3, #1
 8000a26:	63a3      	str	r3, [r4, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	b13b      	cbz	r3, 8000a3c <xQueueSemaphoreTake+0x74>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a2c:	6923      	ldr	r3, [r4, #16]
 8000a2e:	b94b      	cbnz	r3, 8000a44 <xQueueSemaphoreTake+0x7c>
                taskEXIT_CRITICAL();
 8000a30:	f001 fa32 	bl	8001e98 <vPortExitCritical>
                return pdPASS;
 8000a34:	2601      	movs	r6, #1
}
 8000a36:	4630      	mov	r0, r6
 8000a38:	b005      	add	sp, #20
 8000a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000a3c:	f000 ffea 	bl	8001a14 <pvTaskIncrementMutexHeldCount>
 8000a40:	60a0      	str	r0, [r4, #8]
 8000a42:	e7f3      	b.n	8000a2c <xQueueSemaphoreTake+0x64>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a44:	f104 0010 	add.w	r0, r4, #16
 8000a48:	f000 fdd6 	bl	80015f8 <xTaskRemoveFromEventList>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d0ef      	beq.n	8000a30 <xQueueSemaphoreTake+0x68>
                        queueYIELD_IF_USING_PREEMPTION();
 8000a50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a58:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a5c:	f3bf 8f4f 	dsb	sy
 8000a60:	f3bf 8f6f 	isb	sy
 8000a64:	e7e4      	b.n	8000a30 <xQueueSemaphoreTake+0x68>
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8000a66:	b146      	cbz	r6, 8000a7a <xQueueSemaphoreTake+0xb2>
 8000a68:	f04f 0310 	mov.w	r3, #16
 8000a6c:	f383 8811 	msr	BASEPRI, r3
 8000a70:	f3bf 8f6f 	isb	sy
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	e7fe      	b.n	8000a78 <xQueueSemaphoreTake+0xb0>
                    taskEXIT_CRITICAL();
 8000a7a:	f001 fa0d 	bl	8001e98 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8000a7e:	e7da      	b.n	8000a36 <xQueueSemaphoreTake+0x6e>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a80:	a802      	add	r0, sp, #8
 8000a82:	f000 fe2f 	bl	80016e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a86:	e023      	b.n	8000ad0 <xQueueSemaphoreTake+0x108>
                            taskENTER_CRITICAL();
 8000a88:	f001 f9e4 	bl	8001e54 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000a8c:	68a0      	ldr	r0, [r4, #8]
 8000a8e:	f000 fe9d 	bl	80017cc <xTaskPriorityInherit>
 8000a92:	4606      	mov	r6, r0
                            taskEXIT_CRITICAL();
 8000a94:	f001 fa00 	bl	8001e98 <vPortExitCritical>
 8000a98:	e040      	b.n	8000b1c <xQueueSemaphoreTake+0x154>
                prvUnlockQueue( pxQueue );
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff fc72 	bl	8000384 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000aa0:	f000 fc0a 	bl	80012b8 <xTaskResumeAll>
 8000aa4:	e009      	b.n	8000aba <xQueueSemaphoreTake+0xf2>
            prvUnlockQueue( pxQueue );
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f7ff fc6c 	bl	8000384 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aac:	f000 fc04 	bl	80012b8 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f7ff fbc6 	bl	8000242 <prvIsQueueEmpty>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d147      	bne.n	8000b4a <xQueueSemaphoreTake+0x182>
 8000aba:	2701      	movs	r7, #1
        taskENTER_CRITICAL();
 8000abc:	f001 f9ca 	bl	8001e54 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1ae      	bne.n	8000a24 <xQueueSemaphoreTake+0x5c>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0cc      	beq.n	8000a66 <xQueueSemaphoreTake+0x9e>
                else if( xEntryTimeSet == pdFALSE )
 8000acc:	2f00      	cmp	r7, #0
 8000ace:	d0d7      	beq.n	8000a80 <xQueueSemaphoreTake+0xb8>
        taskEXIT_CRITICAL();
 8000ad0:	f001 f9e2 	bl	8001e98 <vPortExitCritical>
        vTaskSuspendAll();
 8000ad4:	f000 fb08 	bl	80010e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ad8:	f001 f9bc 	bl	8001e54 <vPortEnterCritical>
 8000adc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae6:	bf08      	it	eq
 8000ae8:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 8000aec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af6:	bf08      	it	eq
 8000af8:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 8000afc:	f001 f9cc 	bl	8001e98 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b00:	a901      	add	r1, sp, #4
 8000b02:	a802      	add	r0, sp, #8
 8000b04:	f000 fdfa 	bl	80016fc <xTaskCheckForTimeOut>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d1cc      	bne.n	8000aa6 <xQueueSemaphoreTake+0xde>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f7ff fb98 	bl	8000242 <prvIsQueueEmpty>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d0c1      	beq.n	8000a9a <xQueueSemaphoreTake+0xd2>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0b5      	beq.n	8000a88 <xQueueSemaphoreTake+0xc0>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b1c:	9901      	ldr	r1, [sp, #4]
 8000b1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000b22:	f000 fd27 	bl	8001574 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b26:	4620      	mov	r0, r4
 8000b28:	f7ff fc2c 	bl	8000384 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8000b2c:	f000 fbc4 	bl	80012b8 <xTaskResumeAll>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d1c2      	bne.n	8000aba <xQueueSemaphoreTake+0xf2>
                    portYIELD_WITHIN_API();
 8000b34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000b40:	f3bf 8f4f 	dsb	sy
 8000b44:	f3bf 8f6f 	isb	sy
 8000b48:	e7b7      	b.n	8000aba <xQueueSemaphoreTake+0xf2>
                        if( xInheritanceOccurred != pdFALSE )
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	f43f af73 	beq.w	8000a36 <xQueueSemaphoreTake+0x6e>
                            taskENTER_CRITICAL();
 8000b50:	f001 f980 	bl	8001e54 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000b54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b56:	b119      	cbz	r1, 8000b60 <xQueueSemaphoreTake+0x198>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	f1c1 0105 	rsb	r1, r1, #5
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000b60:	68a0      	ldr	r0, [r4, #8]
 8000b62:	f000 fef1 	bl	8001948 <vTaskPriorityDisinheritAfterTimeout>
                            taskEXIT_CRITICAL();
 8000b66:	f001 f997 	bl	8001e98 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8000b6a:	2600      	movs	r6, #0
 8000b6c:	e763      	b.n	8000a36 <xQueueSemaphoreTake+0x6e>
	...

08000b70 <vQueueAddToRegistry>:
        configASSERT( xQueue );
 8000b70:	b130      	cbz	r0, 8000b80 <vQueueAddToRegistry+0x10>
    {
 8000b72:	b430      	push	{r4, r5}
 8000b74:	4604      	mov	r4, r0
        if( pcQueueName != NULL )
 8000b76:	b309      	cbz	r1, 8000bbc <vQueueAddToRegistry+0x4c>
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <vQueueAddToRegistry+0x50>)
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000b7a:	2000      	movs	r0, #0
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	e010      	b.n	8000ba2 <vQueueAddToRegistry+0x32>
 8000b80:	f04f 0310 	mov.w	r3, #16
 8000b84:	f383 8811 	msr	BASEPRI, r3
 8000b88:	f3bf 8f6f 	isb	sy
 8000b8c:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 8000b90:	e7fe      	b.n	8000b90 <vQueueAddToRegistry+0x20>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <vQueueAddToRegistry+0x50>)
 8000b94:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
        if( pxEntryToWrite != NULL )
 8000b98:	e00e      	b.n	8000bb8 <vQueueAddToRegistry+0x48>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b9a:	3201      	adds	r2, #1
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	2a05      	cmp	r2, #5
 8000ba0:	d009      	beq.n	8000bb6 <vQueueAddToRegistry+0x46>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000ba2:	685d      	ldr	r5, [r3, #4]
 8000ba4:	42a5      	cmp	r5, r4
 8000ba6:	d0f4      	beq.n	8000b92 <vQueueAddToRegistry+0x22>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d1f6      	bne.n	8000b9a <vQueueAddToRegistry+0x2a>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000bac:	681d      	ldr	r5, [r3, #0]
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	bf08      	it	eq
 8000bb2:	4618      	moveq	r0, r3
 8000bb4:	e7f1      	b.n	8000b9a <vQueueAddToRegistry+0x2a>
        if( pxEntryToWrite != NULL )
 8000bb6:	b108      	cbz	r0, 8000bbc <vQueueAddToRegistry+0x4c>
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000bb8:	6001      	str	r1, [r0, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000bba:	6044      	str	r4, [r0, #4]
    }
 8000bbc:	bc30      	pop	{r4, r5}
 8000bbe:	4770      	bx	lr
 8000bc0:	2000002c 	.word	0x2000002c

08000bc4 <vQueueWaitForMessageRestricted>:
    {
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	460d      	mov	r5, r1
 8000bca:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
 8000bcc:	f001 f942 	bl	8001e54 <vPortEnterCritical>
 8000bd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bda:	bf04      	itt	eq
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8000be2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	bf04      	itt	eq
 8000bee:	2300      	moveq	r3, #0
 8000bf0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8000bf4:	f001 f950 	bl	8001e98 <vPortExitCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000bfa:	b11b      	cbz	r3, 8000c04 <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f7ff fbc1 	bl	8000384 <prvUnlockQueue>
    }
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000c04:	4632      	mov	r2, r6
 8000c06:	4629      	mov	r1, r5
 8000c08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000c0c:	f000 fcca 	bl	80015a4 <vTaskPlaceOnEventListRestricted>
 8000c10:	e7f4      	b.n	8000bfc <vQueueWaitForMessageRestricted+0x38>
	...

08000c14 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <prvResetNextTaskUnblockTime+0x20>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	b923      	cbnz	r3, 8000c26 <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <prvResetNextTaskUnblockTime+0x24>)
 8000c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	4770      	bx	lr
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000c26:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <prvResetNextTaskUnblockTime+0x20>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <prvResetNextTaskUnblockTime+0x24>)
 8000c30:	601a      	str	r2, [r3, #0]
    }
}
 8000c32:	4770      	bx	lr
 8000c34:	20000058 	.word	0x20000058
 8000c38:	2000010c 	.word	0x2000010c

08000c3c <prvInitialiseNewTask>:
{
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	4607      	mov	r7, r0
 8000c42:	468a      	mov	sl, r1
 8000c44:	4698      	mov	r8, r3
 8000c46:	9e08      	ldr	r6, [sp, #32]
 8000c48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000c4a:	0095      	lsls	r5, r2, #2
 8000c4c:	462a      	mov	r2, r5
 8000c4e:	21a5      	movs	r1, #165	; 0xa5
 8000c50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000c52:	f002 facd 	bl	80031f0 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000c56:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
    if( pcName != NULL )
 8000c5a:	f1ba 0f00 	cmp.w	sl, #0
 8000c5e:	d01a      	beq.n	8000c96 <prvInitialiseNewTask+0x5a>
 8000c60:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000c64:	f104 0333 	add.w	r3, r4, #51	; 0x33
 8000c68:	f10a 0a09 	add.w	sl, sl, #9
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000c6c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000c70:	f803 1f01 	strb.w	r1, [r3, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8000c74:	b109      	cbz	r1, 8000c7a <prvInitialiseNewTask+0x3e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c76:	4552      	cmp	r2, sl
 8000c78:	d1f8      	bne.n	8000c6c <prvInitialiseNewTask+0x30>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000c80:	2e04      	cmp	r6, #4
 8000c82:	d90c      	bls.n	8000c9e <prvInitialiseNewTask+0x62>
 8000c84:	f04f 0310 	mov.w	r3, #16
 8000c88:	f383 8811 	msr	BASEPRI, r3
 8000c8c:	f3bf 8f6f 	isb	sy
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	e7fe      	b.n	8000c94 <prvInitialiseNewTask+0x58>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8000c9c:	e7f0      	b.n	8000c80 <prvInitialiseNewTask+0x44>
    pxNewTCB->uxPriority = uxPriority;
 8000c9e:	62e6      	str	r6, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8000ca0:	64a6      	str	r6, [r4, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000ca2:	f04f 0a00 	mov.w	sl, #0
 8000ca6:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000caa:	1d20      	adds	r0, r4, #4
 8000cac:	f7ff fa9b 	bl	80001e6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000cb0:	f104 0018 	add.w	r0, r4, #24
 8000cb4:	f7ff fa97 	bl	80001e6 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000cb8:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cba:	f1c6 0605 	rsb	r6, r6, #5
 8000cbe:	61a6      	str	r6, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000cc0:	6264      	str	r4, [r4, #36]	; 0x24
            pxNewTCB->pxTaskTag = NULL;
 8000cc2:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
            pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8000cc6:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8000cca:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 8000cce:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000cd2:	f8c4 a060 	str.w	sl, [r4, #96]	; 0x60
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000cd6:	f884 a064 	strb.w	sl, [r4, #100]	; 0x64
            pxNewTCB->ucDelayAborted = pdFALSE;
 8000cda:	f884 a066 	strb.w	sl, [r4, #102]	; 0x66
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000cde:	3d04      	subs	r5, #4
 8000ce0:	444d      	add	r5, r9
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	f025 0007 	bic.w	r0, r5, #7
 8000cea:	f001 f885 	bl	8001df8 <pxPortInitialiseStack>
 8000cee:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8000cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cf2:	b103      	cbz	r3, 8000cf6 <prvInitialiseNewTask+0xba>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000cf4:	601c      	str	r4, [r3, #0]
}
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08000cfc <prvAddNewTaskToReadyList>:
{
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000d00:	f001 f8a8 	bl	8001e54 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8000d04:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <prvAddNewTaskToReadyList+0xe8>)
 8000d06:	6813      	ldr	r3, [r2, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <prvAddNewTaskToReadyList+0xec>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d042      	beq.n	8000d9a <prvAddNewTaskToReadyList+0x9e>
            if( xSchedulerRunning == pdFALSE )
 8000d14:	4b35      	ldr	r3, [pc, #212]	; (8000dec <prvAddNewTaskToReadyList+0xf0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	b93b      	cbnz	r3, 8000d2a <prvAddNewTaskToReadyList+0x2e>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <prvAddNewTaskToReadyList+0xec>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d22:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8000d24:	bf9c      	itt	ls
 8000d26:	4b30      	ldrls	r3, [pc, #192]	; (8000de8 <prvAddNewTaskToReadyList+0xec>)
 8000d28:	601c      	strls	r4, [r3, #0]
        uxTaskNumber++;
 8000d2a:	4a31      	ldr	r2, [pc, #196]	; (8000df0 <prvAddNewTaskToReadyList+0xf4>)
 8000d2c:	6813      	ldr	r3, [r2, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000d32:	6423      	str	r3, [r4, #64]	; 0x40
        prvAddTaskToReadyList( pxNewTCB );
 8000d34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d36:	492f      	ldr	r1, [pc, #188]	; (8000df4 <prvAddNewTaskToReadyList+0xf8>)
 8000d38:	6808      	ldr	r0, [r1, #0]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	600a      	str	r2, [r1, #0]
 8000d42:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <prvAddNewTaskToReadyList+0xfc>)
 8000d44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	60a3      	str	r3, [r4, #8]
 8000d50:	6898      	ldr	r0, [r3, #8]
 8000d52:	60e0      	str	r0, [r4, #12]
 8000d54:	1d21      	adds	r1, r4, #4
 8000d56:	6041      	str	r1, [r0, #4]
 8000d58:	6099      	str	r1, [r3, #8]
 8000d5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d5c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000d60:	0088      	lsls	r0, r1, #2
 8000d62:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8000d66:	6161      	str	r1, [r4, #20]
 8000d68:	5811      	ldr	r1, [r2, r0]
 8000d6a:	3101      	adds	r1, #1
 8000d6c:	5011      	str	r1, [r2, r0]
    taskEXIT_CRITICAL();
 8000d6e:	f001 f893 	bl	8001e98 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <prvAddNewTaskToReadyList+0xf0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	b17b      	cbz	r3, 8000d98 <prvAddNewTaskToReadyList+0x9c>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <prvAddNewTaskToReadyList+0xec>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d209      	bcs.n	8000d98 <prvAddNewTaskToReadyList+0x9c>
            taskYIELD_IF_USING_PREEMPTION();
 8000d84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000d90:	f3bf 8f4f 	dsb	sy
 8000d94:	f3bf 8f6f 	isb	sy
}
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
            pxCurrentTCB = pxNewTCB;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <prvAddNewTaskToReadyList+0xec>)
 8000d9c:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d1c2      	bne.n	8000d2a <prvAddNewTaskToReadyList+0x2e>
 8000da4:	4d14      	ldr	r5, [pc, #80]	; (8000df8 <prvAddNewTaskToReadyList+0xfc>)
 8000da6:	f105 0664 	add.w	r6, r5, #100	; 0x64
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000daa:	4628      	mov	r0, r5
 8000dac:	f7ff fa10 	bl	80001d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000db0:	3514      	adds	r5, #20
 8000db2:	42b5      	cmp	r5, r6
 8000db4:	d1f9      	bne.n	8000daa <prvAddNewTaskToReadyList+0xae>
    vListInitialise( &xDelayedTaskList1 );
 8000db6:	4e11      	ldr	r6, [pc, #68]	; (8000dfc <prvAddNewTaskToReadyList+0x100>)
 8000db8:	4630      	mov	r0, r6
 8000dba:	f7ff fa09 	bl	80001d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000dbe:	4d10      	ldr	r5, [pc, #64]	; (8000e00 <prvAddNewTaskToReadyList+0x104>)
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	f7ff fa05 	bl	80001d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000dc6:	480f      	ldr	r0, [pc, #60]	; (8000e04 <prvAddNewTaskToReadyList+0x108>)
 8000dc8:	f7ff fa02 	bl	80001d0 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <prvAddNewTaskToReadyList+0x10c>)
 8000dce:	f7ff f9ff 	bl	80001d0 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <prvAddNewTaskToReadyList+0x110>)
 8000dd4:	f7ff f9fc 	bl	80001d0 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <prvAddNewTaskToReadyList+0x114>)
 8000dda:	601e      	str	r6, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <prvAddNewTaskToReadyList+0x118>)
 8000dde:	601d      	str	r5, [r3, #0]
}
 8000de0:	e7a3      	b.n	8000d2a <prvAddNewTaskToReadyList+0x2e>
 8000de2:	bf00      	nop
 8000de4:	200000cc 	.word	0x200000cc
 8000de8:	20000054 	.word	0x20000054
 8000dec:	2000012c 	.word	0x2000012c
 8000df0:	200000d8 	.word	0x200000d8
 8000df4:	200000dc 	.word	0x200000dc
 8000df8:	20000060 	.word	0x20000060
 8000dfc:	200000e0 	.word	0x200000e0
 8000e00:	200000f4 	.word	0x200000f4
 8000e04:	20000118 	.word	0x20000118
 8000e08:	20000144 	.word	0x20000144
 8000e0c:	20000130 	.word	0x20000130
 8000e10:	20000058 	.word	0x20000058
 8000e14:	2000005c 	.word	0x2000005c

08000e18 <prvDeleteTCB>:
    {
 8000e18:	b510      	push	{r4, lr}
 8000e1a:	4604      	mov	r4, r0
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8000e1c:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8000e20:	b163      	cbz	r3, 8000e3c <prvDeleteTCB+0x24>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d011      	beq.n	8000e4a <prvDeleteTCB+0x32>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d00e      	beq.n	8000e48 <prvDeleteTCB+0x30>
 8000e2a:	f04f 0310 	mov.w	r3, #16
 8000e2e:	f383 8811 	msr	BASEPRI, r3
 8000e32:	f3bf 8f6f 	isb	sy
 8000e36:	f3bf 8f4f 	dsb	sy
 8000e3a:	e7fe      	b.n	8000e3a <prvDeleteTCB+0x22>
                    vPortFreeStack( pxTCB->pxStack );
 8000e3c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8000e3e:	f001 fa35 	bl	80022ac <vPortFree>
                    vPortFree( pxTCB );
 8000e42:	4620      	mov	r0, r4
 8000e44:	f001 fa32 	bl	80022ac <vPortFree>
    }
 8000e48:	bd10      	pop	{r4, pc}
                    vPortFree( pxTCB );
 8000e4a:	f001 fa2f 	bl	80022ac <vPortFree>
 8000e4e:	e7fb      	b.n	8000e48 <prvDeleteTCB+0x30>

08000e50 <prvIdleTask>:
{
 8000e50:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e52:	4c15      	ldr	r4, [pc, #84]	; (8000ea8 <prvIdleTask+0x58>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e54:	4f15      	ldr	r7, [pc, #84]	; (8000eac <prvIdleTask+0x5c>)
                    --uxCurrentNumberOfTasks;
 8000e56:	4e16      	ldr	r6, [pc, #88]	; (8000eb0 <prvIdleTask+0x60>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000e58:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000eb4 <prvIdleTask+0x64>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	b1a3      	cbz	r3, 8000e8a <prvIdleTask+0x3a>
                taskENTER_CRITICAL();
 8000e60:	f000 fff8 	bl	8001e54 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e68:	1d28      	adds	r0, r5, #4
 8000e6a:	f7ff f9d8 	bl	800021e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000e6e:	6833      	ldr	r3, [r6, #0]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	6033      	str	r3, [r6, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 8000e7a:	f001 f80d 	bl	8001e98 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 8000e7e:	4628      	mov	r0, r5
 8000e80:	f7ff ffca 	bl	8000e18 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1ea      	bne.n	8000e60 <prvIdleTask+0x10>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d9e4      	bls.n	8000e5c <prvIdleTask+0xc>
                    taskYIELD();
 8000e92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000e9e:	f3bf 8f4f 	dsb	sy
 8000ea2:	f3bf 8f6f 	isb	sy
 8000ea6:	e7d9      	b.n	8000e5c <prvIdleTask+0xc>
 8000ea8:	200000d0 	.word	0x200000d0
 8000eac:	20000144 	.word	0x20000144
 8000eb0:	200000cc 	.word	0x200000cc
 8000eb4:	20000060 	.word	0x20000060

08000eb8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000eb8:	b570      	push	{r4, r5, r6, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8000ec0:	681e      	ldr	r6, [r3, #0]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	3004      	adds	r0, #4
 8000ed0:	f7ff f9a5 	bl	800021e <uxListRemove>
 8000ed4:	b948      	cbnz	r0, 8000eea <prvAddCurrentTaskToDelayedList+0x32>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4920      	ldr	r1, [pc, #128]	; (8000f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8000edc:	680b      	ldr	r3, [r1, #0]
 8000ede:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4082      	lsls	r2, r0
 8000ee4:	ea23 0302 	bic.w	r3, r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000eea:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000eee:	d00d      	beq.n	8000f0c <prvAddCurrentTaskToDelayedList+0x54>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000ef0:	4434      	add	r4, r6

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
 8000ef8:	42a6      	cmp	r6, r4
 8000efa:	d91d      	bls.n	8000f38 <prvAddCurrentTaskToDelayedList+0x80>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <prvAddCurrentTaskToDelayedList+0xa8>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8000f02:	6819      	ldr	r1, [r3, #0]
 8000f04:	3104      	adds	r1, #4
 8000f06:	f7ff f971 	bl	80001ec <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000f0c:	2d00      	cmp	r5, #0
 8000f0e:	d0ef      	beq.n	8000ef0 <prvAddCurrentTaskToDelayedList+0x38>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <prvAddCurrentTaskToDelayedList+0xac>)
 8000f12:	6851      	ldr	r1, [r2, #4]
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	6081      	str	r1, [r0, #8]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	688c      	ldr	r4, [r1, #8]
 8000f1e:	60c4      	str	r4, [r0, #12]
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	3004      	adds	r0, #4
 8000f24:	6060      	str	r0, [r4, #4]
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	3004      	adds	r0, #4
 8000f2a:	6088      	str	r0, [r1, #8]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	6813      	ldr	r3, [r2, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e7e8      	b.n	8000f0a <prvAddCurrentTaskToDelayedList+0x52>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8000f3e:	6819      	ldr	r1, [r3, #0]
 8000f40:	3104      	adds	r1, #4
 8000f42:	f7ff f953 	bl	80001ec <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	42a3      	cmp	r3, r4
                        xNextTaskUnblockTime = xTimeToWake;
 8000f4c:	bf84      	itt	hi
 8000f4e:	4b07      	ldrhi	r3, [pc, #28]	; (8000f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000f50:	601c      	strhi	r4, [r3, #0]
}
 8000f52:	e7da      	b.n	8000f0a <prvAddCurrentTaskToDelayedList+0x52>
 8000f54:	20000158 	.word	0x20000158
 8000f58:	20000054 	.word	0x20000054
 8000f5c:	200000dc 	.word	0x200000dc
 8000f60:	2000005c 	.word	0x2000005c
 8000f64:	20000130 	.word	0x20000130
 8000f68:	20000058 	.word	0x20000058
 8000f6c:	2000010c 	.word	0x2000010c

08000f70 <xTaskCreateStatic>:
    {
 8000f70:	b530      	push	{r4, r5, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
        configASSERT( puxStackBuffer != NULL );
 8000f76:	b17c      	cbz	r4, 8000f98 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8000f78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f7a:	b1b5      	cbz	r5, 8000faa <xTaskCreateStatic+0x3a>
                volatile size_t xSize = sizeof( StaticTask_t );
 8000f7c:	2568      	movs	r5, #104	; 0x68
 8000f7e:	9504      	str	r5, [sp, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 8000f80:	9d04      	ldr	r5, [sp, #16]
 8000f82:	2d68      	cmp	r5, #104	; 0x68
 8000f84:	d01a      	beq.n	8000fbc <xTaskCreateStatic+0x4c>
 8000f86:	f04f 0310 	mov.w	r3, #16
 8000f8a:	f383 8811 	msr	BASEPRI, r3
 8000f8e:	f3bf 8f6f 	isb	sy
 8000f92:	f3bf 8f4f 	dsb	sy
 8000f96:	e7fe      	b.n	8000f96 <xTaskCreateStatic+0x26>
 8000f98:	f04f 0310 	mov.w	r3, #16
 8000f9c:	f383 8811 	msr	BASEPRI, r3
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	f3bf 8f4f 	dsb	sy
        configASSERT( puxStackBuffer != NULL );
 8000fa8:	e7fe      	b.n	8000fa8 <xTaskCreateStatic+0x38>
 8000faa:	f04f 0310 	mov.w	r3, #16
 8000fae:	f383 8811 	msr	BASEPRI, r3
 8000fb2:	f3bf 8f6f 	isb	sy
 8000fb6:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskBuffer != NULL );
 8000fba:	e7fe      	b.n	8000fba <xTaskCreateStatic+0x4a>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8000fbc:	9d04      	ldr	r5, [sp, #16]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000fc0:	632c      	str	r4, [r5, #48]	; 0x30
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000fc2:	2402      	movs	r4, #2
 8000fc4:	f885 4065 	strb.w	r4, [r5, #101]	; 0x65
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000fc8:	2400      	movs	r4, #0
 8000fca:	9403      	str	r4, [sp, #12]
 8000fcc:	9502      	str	r5, [sp, #8]
 8000fce:	ac05      	add	r4, sp, #20
 8000fd0:	9401      	str	r4, [sp, #4]
 8000fd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8000fd4:	9400      	str	r4, [sp, #0]
 8000fd6:	f7ff fe31 	bl	8000c3c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000fda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000fdc:	f7ff fe8e 	bl	8000cfc <prvAddNewTaskToReadyList>
    }
 8000fe0:	9805      	ldr	r0, [sp, #20]
 8000fe2:	b007      	add	sp, #28
 8000fe4:	bd30      	pop	{r4, r5, pc}

08000fe6 <xTaskCreate>:
    {
 8000fe6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	4607      	mov	r7, r0
 8000fee:	4688      	mov	r8, r1
 8000ff0:	4614      	mov	r4, r2
 8000ff2:	461e      	mov	r6, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ff4:	0090      	lsls	r0, r2, #2
 8000ff6:	f001 f8ab 	bl	8002150 <pvPortMalloc>
                if( pxStack != NULL )
 8000ffa:	b308      	cbz	r0, 8001040 <xTaskCreate+0x5a>
 8000ffc:	4681      	mov	r9, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ffe:	2068      	movs	r0, #104	; 0x68
 8001000:	f001 f8a6 	bl	8002150 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8001004:	4605      	mov	r5, r0
 8001006:	b1a8      	cbz	r0, 8001034 <xTaskCreate+0x4e>
                        pxNewTCB->pxStack = pxStack;
 8001008:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800100c:	2300      	movs	r3, #0
 800100e:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001012:	9303      	str	r3, [sp, #12]
 8001014:	9002      	str	r0, [sp, #8]
 8001016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4633      	mov	r3, r6
 8001020:	4622      	mov	r2, r4
 8001022:	4641      	mov	r1, r8
 8001024:	4638      	mov	r0, r7
 8001026:	f7ff fe09 	bl	8000c3c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800102a:	4628      	mov	r0, r5
 800102c:	f7ff fe66 	bl	8000cfc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001030:	2001      	movs	r0, #1
 8001032:	e007      	b.n	8001044 <xTaskCreate+0x5e>
                        vPortFreeStack( pxStack );
 8001034:	4648      	mov	r0, r9
 8001036:	f001 f939 	bl	80022ac <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800103a:	f04f 30ff 	mov.w	r0, #4294967295
 800103e:	e001      	b.n	8001044 <xTaskCreate+0x5e>
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8001044:	b005      	add	sp, #20
 8001046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800104c <vTaskStartScheduler>:
{
 800104c:	b510      	push	{r4, lr}
 800104e:	b088      	sub	sp, #32
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8001050:	2400      	movs	r4, #0
 8001052:	9405      	str	r4, [sp, #20]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8001054:	9406      	str	r4, [sp, #24]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001056:	aa07      	add	r2, sp, #28
 8001058:	a906      	add	r1, sp, #24
 800105a:	a805      	add	r0, sp, #20
 800105c:	f001 fa9e 	bl	800259c <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8001060:	9b05      	ldr	r3, [sp, #20]
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	9b06      	ldr	r3, [sp, #24]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	9400      	str	r4, [sp, #0]
 800106a:	4623      	mov	r3, r4
 800106c:	9a07      	ldr	r2, [sp, #28]
 800106e:	4917      	ldr	r1, [pc, #92]	; (80010cc <vTaskStartScheduler+0x80>)
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <vTaskStartScheduler+0x84>)
 8001072:	f7ff ff7d 	bl	8000f70 <xTaskCreateStatic>
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <vTaskStartScheduler+0x88>)
 8001078:	6018      	str	r0, [r3, #0]
            if( xIdleTaskHandle != NULL )
 800107a:	b310      	cbz	r0, 80010c2 <vTaskStartScheduler+0x76>
                xReturn = xTimerCreateTimerTask();
 800107c:	f000 fe4c 	bl	8001d18 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8001080:	2801      	cmp	r0, #1
 8001082:	d00b      	beq.n	800109c <vTaskStartScheduler+0x50>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001084:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001088:	d11b      	bne.n	80010c2 <vTaskStartScheduler+0x76>
 800108a:	f04f 0310 	mov.w	r3, #16
 800108e:	f383 8811 	msr	BASEPRI, r3
 8001092:	f3bf 8f6f 	isb	sy
 8001096:	f3bf 8f4f 	dsb	sy
 800109a:	e7fe      	b.n	800109a <vTaskStartScheduler+0x4e>
 800109c:	f04f 0310 	mov.w	r3, #16
 80010a0:	f383 8811 	msr	BASEPRI, r3
 80010a4:	f3bf 8f6f 	isb	sy
 80010a8:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <vTaskStartScheduler+0x8c>)
 80010ae:	f04f 32ff 	mov.w	r2, #4294967295
 80010b2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <vTaskStartScheduler+0x90>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <vTaskStartScheduler+0x94>)
 80010bc:	601c      	str	r4, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 80010be:	f000 ff5b 	bl	8001f78 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <vTaskStartScheduler+0x98>)
 80010c4:	681b      	ldr	r3, [r3, #0]
}
 80010c6:	b008      	add	sp, #32
 80010c8:	bd10      	pop	{r4, pc}
 80010ca:	bf00      	nop
 80010cc:	0800324c 	.word	0x0800324c
 80010d0:	08000e51 	.word	0x08000e51
 80010d4:	20000108 	.word	0x20000108
 80010d8:	2000010c 	.word	0x2000010c
 80010dc:	2000012c 	.word	0x2000012c
 80010e0:	20000158 	.word	0x20000158
 80010e4:	20000000 	.word	0x20000000

080010e8 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 80010e8:	4a02      	ldr	r2, [pc, #8]	; (80010f4 <vTaskSuspendAll+0xc>)
 80010ea:	6813      	ldr	r3, [r2, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200000d4 	.word	0x200000d4

080010f8 <xTaskGetTickCount>:
        xTicks = xTickCount;
 80010f8:	4b01      	ldr	r3, [pc, #4]	; (8001100 <xTaskGetTickCount+0x8>)
 80010fa:	6818      	ldr	r0, [r3, #0]
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000158 	.word	0x20000158

08001104 <xTaskIncrementTick>:
{
 8001104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <xTaskIncrementTick+0x188>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f040 80b6 	bne.w	800127e <xTaskIncrementTick+0x17a>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001112:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <xTaskIncrementTick+0x18c>)
 8001114:	681c      	ldr	r4, [r3, #0]
 8001116:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8001118:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800111a:	b9c4      	cbnz	r4, 800114e <xTaskIncrementTick+0x4a>
            taskSWITCH_DELAYED_LISTS();
 800111c:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <xTaskIncrementTick+0x190>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b143      	cbz	r3, 8001136 <xTaskIncrementTick+0x32>
 8001124:	f04f 0310 	mov.w	r3, #16
 8001128:	f383 8811 	msr	BASEPRI, r3
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	e7fe      	b.n	8001134 <xTaskIncrementTick+0x30>
 8001136:	4a57      	ldr	r2, [pc, #348]	; (8001294 <xTaskIncrementTick+0x190>)
 8001138:	6811      	ldr	r1, [r2, #0]
 800113a:	4b57      	ldr	r3, [pc, #348]	; (8001298 <xTaskIncrementTick+0x194>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	6010      	str	r0, [r2, #0]
 8001140:	6019      	str	r1, [r3, #0]
 8001142:	4a56      	ldr	r2, [pc, #344]	; (800129c <xTaskIncrementTick+0x198>)
 8001144:	6813      	ldr	r3, [r2, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	f7ff fd63 	bl	8000c14 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <xTaskIncrementTick+0x19c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	42a3      	cmp	r3, r4
 8001154:	f200 8081 	bhi.w	800125a <xTaskIncrementTick+0x156>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001158:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <xTaskIncrementTick+0x190>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b153      	cbz	r3, 8001176 <xTaskIncrementTick+0x72>
    BaseType_t xSwitchRequired = pdFALSE;
 8001160:	2000      	movs	r0, #0
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001162:	494c      	ldr	r1, [pc, #304]	; (8001294 <xTaskIncrementTick+0x190>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001164:	4605      	mov	r5, r0
                    prvAddTaskToReadyList( pxTCB );
 8001166:	f8df c14c 	ldr.w	ip, [pc, #332]	; 80012b4 <xTaskIncrementTick+0x1b0>
 800116a:	f04f 0b01 	mov.w	fp, #1
 800116e:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <xTaskIncrementTick+0x1a0>)
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001170:	f8df e134 	ldr.w	lr, [pc, #308]	; 80012a8 <xTaskIncrementTick+0x1a4>
 8001174:	e03a      	b.n	80011ec <xTaskIncrementTick+0xe8>
    BaseType_t xSwitchRequired = pdFALSE;
 8001176:	2000      	movs	r0, #0
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <xTaskIncrementTick+0x19c>)
 800117a:	f04f 32ff 	mov.w	r2, #4294967295
 800117e:	601a      	str	r2, [r3, #0]
                    break;
 8001180:	e06c      	b.n	800125c <xTaskIncrementTick+0x158>
                        xNextTaskUnblockTime = xItemValue;
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <xTaskIncrementTick+0x19c>)
 8001184:	601f      	str	r7, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001186:	e069      	b.n	800125c <xTaskIncrementTick+0x158>
                    prvAddTaskToReadyList( pxTCB );
 8001188:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 800118a:	f8dc a000 	ldr.w	sl, [ip]
 800118e:	fa0b f907 	lsl.w	r9, fp, r7
 8001192:	ea49 090a 	orr.w	r9, r9, sl
 8001196:	f8cc 9000 	str.w	r9, [ip]
 800119a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800119e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80011a2:	687f      	ldr	r7, [r7, #4]
 80011a4:	609f      	str	r7, [r3, #8]
 80011a6:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80011aa:	f8c3 900c 	str.w	r9, [r3, #12]
 80011ae:	f8c9 8004 	str.w	r8, [r9, #4]
 80011b2:	f8c7 8008 	str.w	r8, [r7, #8]
 80011b6:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 80011b8:	eb07 0887 	add.w	r8, r7, r7, lsl #2
 80011bc:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 80011c0:	f8c3 9014 	str.w	r9, [r3, #20]
 80011c4:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 80011c8:	f108 0801 	add.w	r8, r8, #1
 80011cc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80011d0:	f842 8027 	str.w	r8, [r2, r7, lsl #2]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011d4:	f8de 8000 	ldr.w	r8, [lr]
 80011d8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 80011da:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 80011de:	429f      	cmp	r7, r3
 80011e0:	bf28      	it	cs
 80011e2:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011e4:	680b      	ldr	r3, [r1, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0c5      	beq.n	8001178 <xTaskIncrementTick+0x74>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011ec:	680b      	ldr	r3, [r1, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011f2:	685f      	ldr	r7, [r3, #4]
                    if( xConstTickCount < xItemValue )
 80011f4:	42bc      	cmp	r4, r7
 80011f6:	d3c4      	bcc.n	8001182 <xTaskIncrementTick+0x7e>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011f8:	695f      	ldr	r7, [r3, #20]
 80011fa:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80011fe:	689e      	ldr	r6, [r3, #8]
 8001200:	f8c6 8008 	str.w	r8, [r6, #8]
 8001204:	689e      	ldr	r6, [r3, #8]
 8001206:	f8c8 6004 	str.w	r6, [r8, #4]
 800120a:	f103 0804 	add.w	r8, r3, #4
 800120e:	687e      	ldr	r6, [r7, #4]
 8001210:	4546      	cmp	r6, r8
 8001212:	bf04      	itt	eq
 8001214:	68de      	ldreq	r6, [r3, #12]
 8001216:	607e      	streq	r6, [r7, #4]
 8001218:	615d      	str	r5, [r3, #20]
 800121a:	f8d7 9000 	ldr.w	r9, [r7]
 800121e:	f109 39ff 	add.w	r9, r9, #4294967295
 8001222:	f8c7 9000 	str.w	r9, [r7]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001226:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800122a:	f1b9 0f00 	cmp.w	r9, #0
 800122e:	d0ab      	beq.n	8001188 <xTaskIncrementTick+0x84>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001230:	6a1f      	ldr	r7, [r3, #32]
 8001232:	69de      	ldr	r6, [r3, #28]
 8001234:	60b7      	str	r7, [r6, #8]
 8001236:	69de      	ldr	r6, [r3, #28]
 8001238:	607e      	str	r6, [r7, #4]
 800123a:	f103 0718 	add.w	r7, r3, #24
 800123e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001242:	42be      	cmp	r6, r7
 8001244:	bf04      	itt	eq
 8001246:	6a1f      	ldreq	r7, [r3, #32]
 8001248:	f8c9 7004 	streq.w	r7, [r9, #4]
 800124c:	629d      	str	r5, [r3, #40]	; 0x28
 800124e:	f8d9 7000 	ldr.w	r7, [r9]
 8001252:	3f01      	subs	r7, #1
 8001254:	f8c9 7000 	str.w	r7, [r9]
 8001258:	e796      	b.n	8001188 <xTaskIncrementTick+0x84>
    BaseType_t xSwitchRequired = pdFALSE;
 800125a:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <xTaskIncrementTick+0x1a4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <xTaskIncrementTick+0x1a0>)
 800126a:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
 800126c:	2b02      	cmp	r3, #2
 800126e:	bf28      	it	cs
 8001270:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <xTaskIncrementTick+0x1a8>)
 8001274:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf18      	it	ne
 800127a:	2001      	movne	r0, #1
 800127c:	e004      	b.n	8001288 <xTaskIncrementTick+0x184>
        ++xPendedTicks;
 800127e:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <xTaskIncrementTick+0x1ac>)
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
 8001286:	2000      	movs	r0, #0
}
 8001288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800128c:	200000d4 	.word	0x200000d4
 8001290:	20000158 	.word	0x20000158
 8001294:	20000058 	.word	0x20000058
 8001298:	2000005c 	.word	0x2000005c
 800129c:	20000110 	.word	0x20000110
 80012a0:	2000010c 	.word	0x2000010c
 80012a4:	20000060 	.word	0x20000060
 80012a8:	20000054 	.word	0x20000054
 80012ac:	2000015c 	.word	0x2000015c
 80012b0:	20000114 	.word	0x20000114
 80012b4:	200000dc 	.word	0x200000dc

080012b8 <xTaskResumeAll>:
    configASSERT( uxSchedulerSuspended );
 80012b8:	4b55      	ldr	r3, [pc, #340]	; (8001410 <xTaskResumeAll+0x158>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b943      	cbnz	r3, 80012d0 <xTaskResumeAll+0x18>
 80012be:	f04f 0310 	mov.w	r3, #16
 80012c2:	f383 8811 	msr	BASEPRI, r3
 80012c6:	f3bf 8f6f 	isb	sy
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	e7fe      	b.n	80012ce <xTaskResumeAll+0x16>
{
 80012d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    taskENTER_CRITICAL();
 80012d4:	f000 fdbe 	bl	8001e54 <vPortEnterCritical>
        --uxSchedulerSuspended;
 80012d8:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <xTaskResumeAll+0x158>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	3a01      	subs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 808b 	bne.w	80013fe <xTaskResumeAll+0x146>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80012e8:	4b4a      	ldr	r3, [pc, #296]	; (8001414 <xTaskResumeAll+0x15c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 808c 	beq.w	800140a <xTaskResumeAll+0x152>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <xTaskResumeAll+0x160>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d061      	beq.n	80013be <xTaskResumeAll+0x106>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012fa:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8001418 <xTaskResumeAll+0x160>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80012fe:	2000      	movs	r0, #0
                    prvAddTaskToReadyList( pxTCB );
 8001300:	4946      	ldr	r1, [pc, #280]	; (800141c <xTaskResumeAll+0x164>)
 8001302:	f04f 0e01 	mov.w	lr, #1
 8001306:	4a46      	ldr	r2, [pc, #280]	; (8001420 <xTaskResumeAll+0x168>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001308:	4c46      	ldr	r4, [pc, #280]	; (8001424 <xTaskResumeAll+0x16c>)
                        xYieldPending = pdTRUE;
 800130a:	f8df a120 	ldr.w	sl, [pc, #288]	; 800142c <xTaskResumeAll+0x174>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800130e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001312:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001314:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8001316:	6a1f      	ldr	r7, [r3, #32]
 8001318:	69dd      	ldr	r5, [r3, #28]
 800131a:	60af      	str	r7, [r5, #8]
 800131c:	69dd      	ldr	r5, [r3, #28]
 800131e:	607d      	str	r5, [r7, #4]
 8001320:	f103 0718 	add.w	r7, r3, #24
 8001324:	6875      	ldr	r5, [r6, #4]
 8001326:	42bd      	cmp	r5, r7
 8001328:	bf04      	itt	eq
 800132a:	6a1d      	ldreq	r5, [r3, #32]
 800132c:	6075      	streq	r5, [r6, #4]
 800132e:	6298      	str	r0, [r3, #40]	; 0x28
 8001330:	6837      	ldr	r7, [r6, #0]
 8001332:	3f01      	subs	r7, #1
 8001334:	6037      	str	r7, [r6, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001336:	695e      	ldr	r6, [r3, #20]
 8001338:	68df      	ldr	r7, [r3, #12]
 800133a:	689d      	ldr	r5, [r3, #8]
 800133c:	60af      	str	r7, [r5, #8]
 800133e:	689d      	ldr	r5, [r3, #8]
 8001340:	607d      	str	r5, [r7, #4]
 8001342:	1d1f      	adds	r7, r3, #4
 8001344:	6875      	ldr	r5, [r6, #4]
 8001346:	42bd      	cmp	r5, r7
 8001348:	bf04      	itt	eq
 800134a:	68dd      	ldreq	r5, [r3, #12]
 800134c:	6075      	streq	r5, [r6, #4]
 800134e:	6158      	str	r0, [r3, #20]
 8001350:	f8d6 8000 	ldr.w	r8, [r6]
 8001354:	f108 38ff 	add.w	r8, r8, #4294967295
 8001358:	f8c6 8000 	str.w	r8, [r6]
                    prvAddTaskToReadyList( pxTCB );
 800135c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800135e:	f8d1 9000 	ldr.w	r9, [r1]
 8001362:	fa0e f806 	lsl.w	r8, lr, r6
 8001366:	ea48 0809 	orr.w	r8, r8, r9
 800136a:	f8c1 8000 	str.w	r8, [r1]
 800136e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001372:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001376:	6876      	ldr	r6, [r6, #4]
 8001378:	609e      	str	r6, [r3, #8]
 800137a:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800137e:	f8c3 800c 	str.w	r8, [r3, #12]
 8001382:	f8c8 7004 	str.w	r7, [r8, #4]
 8001386:	60b7      	str	r7, [r6, #8]
 8001388:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800138a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800138e:	eb02 0887 	add.w	r8, r2, r7, lsl #2
 8001392:	f8c3 8014 	str.w	r8, [r3, #20]
 8001396:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 800139a:	3701      	adds	r7, #1
 800139c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80013a0:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80013a4:	6827      	ldr	r7, [r4, #0]
 80013a6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80013a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013aa:	429e      	cmp	r6, r3
                        xYieldPending = pdTRUE;
 80013ac:	bf28      	it	cs
 80013ae:	f8ca e000 	strcs.w	lr, [sl]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80013b2:	f8dc 3000 	ldr.w	r3, [ip]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1a9      	bne.n	800130e <xTaskResumeAll+0x56>
                    prvResetNextTaskUnblockTime();
 80013ba:	f7ff fc2b 	bl	8000c14 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <xTaskResumeAll+0x170>)
 80013c0:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 80013c2:	b16c      	cbz	r4, 80013e0 <xTaskResumeAll+0x128>
                                xYieldPending = pdTRUE;
 80013c4:	4e19      	ldr	r6, [pc, #100]	; (800142c <xTaskResumeAll+0x174>)
 80013c6:	2501      	movs	r5, #1
 80013c8:	e001      	b.n	80013ce <xTaskResumeAll+0x116>
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80013ca:	3c01      	subs	r4, #1
 80013cc:	d005      	beq.n	80013da <xTaskResumeAll+0x122>
                            if( xTaskIncrementTick() != pdFALSE )
 80013ce:	f7ff fe99 	bl	8001104 <xTaskIncrementTick>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d0f9      	beq.n	80013ca <xTaskResumeAll+0x112>
                                xYieldPending = pdTRUE;
 80013d6:	6035      	str	r5, [r6, #0]
 80013d8:	e7f7      	b.n	80013ca <xTaskResumeAll+0x112>
                        xPendedTicks = 0;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <xTaskResumeAll+0x170>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <xTaskResumeAll+0x174>)
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	b164      	cbz	r4, 8001400 <xTaskResumeAll+0x148>
                    taskYIELD_IF_USING_PREEMPTION();
 80013e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80013ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80013f2:	f3bf 8f4f 	dsb	sy
 80013f6:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 80013fa:	2401      	movs	r4, #1
 80013fc:	e000      	b.n	8001400 <xTaskResumeAll+0x148>
    BaseType_t xAlreadyYielded = pdFALSE;
 80013fe:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8001400:	f000 fd4a 	bl	8001e98 <vPortExitCritical>
}
 8001404:	4620      	mov	r0, r4
 8001406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
 800140a:	2400      	movs	r4, #0
 800140c:	e7f8      	b.n	8001400 <xTaskResumeAll+0x148>
 800140e:	bf00      	nop
 8001410:	200000d4 	.word	0x200000d4
 8001414:	200000cc 	.word	0x200000cc
 8001418:	20000118 	.word	0x20000118
 800141c:	200000dc 	.word	0x200000dc
 8001420:	20000060 	.word	0x20000060
 8001424:	20000054 	.word	0x20000054
 8001428:	20000114 	.word	0x20000114
 800142c:	2000015c 	.word	0x2000015c

08001430 <vTaskDelay>:
    {
 8001430:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001432:	b1a8      	cbz	r0, 8001460 <vTaskDelay+0x30>
 8001434:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <vTaskDelay+0x48>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b143      	cbz	r3, 800144e <vTaskDelay+0x1e>
 800143c:	f04f 0310 	mov.w	r3, #16
 8001440:	f383 8811 	msr	BASEPRI, r3
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	f3bf 8f4f 	dsb	sy
 800144c:	e7fe      	b.n	800144c <vTaskDelay+0x1c>
            vTaskSuspendAll();
 800144e:	f7ff fe4b 	bl	80010e8 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001452:	2100      	movs	r1, #0
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff fd2f 	bl	8000eb8 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 800145a:	f7ff ff2d 	bl	80012b8 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 800145e:	b948      	cbnz	r0, 8001474 <vTaskDelay+0x44>
            portYIELD_WITHIN_API();
 8001460:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001468:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	f3bf 8f6f 	isb	sy
    }
 8001474:	bd10      	pop	{r4, pc}
 8001476:	bf00      	nop
 8001478:	200000d4 	.word	0x200000d4

0800147c <vTaskSwitchContext>:
{
 800147c:	b508      	push	{r3, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <vTaskSwitchContext+0xdc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b11b      	cbz	r3, 800148c <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <vTaskSwitchContext+0xe0>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	bd08      	pop	{r3, pc}
        xYieldPending = pdFALSE;
 800148c:	2200      	movs	r2, #0
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <vTaskSwitchContext+0xe0>)
 8001490:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8001492:	4b33      	ldr	r3, [pc, #204]	; (8001560 <vTaskSwitchContext+0xe4>)
 8001494:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a32      	ldr	r2, [pc, #200]	; (8001564 <vTaskSwitchContext+0xe8>)
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4293      	cmp	r3, r2
 800149e:	d907      	bls.n	80014b0 <vTaskSwitchContext+0x34>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <vTaskSwitchContext+0xe4>)
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <vTaskSwitchContext+0xec>)
 80014a6:	6819      	ldr	r1, [r3, #0]
 80014a8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	4403      	add	r3, r0
 80014ae:	65cb      	str	r3, [r1, #92]	; 0x5c
                ulTaskSwitchedInTime = ulTotalRunTime;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <vTaskSwitchContext+0xe4>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <vTaskSwitchContext+0xe8>)
 80014b6:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <vTaskSwitchContext+0xec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80014c4:	d103      	bne.n	80014ce <vTaskSwitchContext+0x52>
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80014cc:	d01b      	beq.n	8001506 <vTaskSwitchContext+0x8a>
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <vTaskSwitchContext+0xec>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	6819      	ldr	r1, [r3, #0]
 80014d4:	3134      	adds	r1, #52	; 0x34
 80014d6:	f001 f879 	bl	80025cc <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <vTaskSwitchContext+0xf0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f1c3 031f 	rsb	r3, r3, #31
 80014e8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	4920      	ldr	r1, [pc, #128]	; (8001570 <vTaskSwitchContext+0xf4>)
 80014f0:	588a      	ldr	r2, [r1, r2]
 80014f2:	b98a      	cbnz	r2, 8001518 <vTaskSwitchContext+0x9c>
        __asm volatile
 80014f4:	f04f 0310 	mov.w	r3, #16
 80014f8:	f383 8811 	msr	BASEPRI, r3
 80014fc:	f3bf 8f6f 	isb	sy
 8001500:	f3bf 8f4f 	dsb	sy
 8001504:	e7fe      	b.n	8001504 <vTaskSwitchContext+0x88>
        taskCHECK_FOR_STACK_OVERFLOW();
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800150c:	d1df      	bne.n	80014ce <vTaskSwitchContext+0x52>
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8001514:	d1db      	bne.n	80014ce <vTaskSwitchContext+0x52>
 8001516:	e7e0      	b.n	80014da <vTaskSwitchContext+0x5e>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001518:	4a15      	ldr	r2, [pc, #84]	; (8001570 <vTaskSwitchContext+0xf4>)
 800151a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800151e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001522:	6848      	ldr	r0, [r1, #4]
 8001524:	6840      	ldr	r0, [r0, #4]
 8001526:	6048      	str	r0, [r1, #4]
 8001528:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800152c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001530:	3208      	adds	r2, #8
 8001532:	4290      	cmp	r0, r2
 8001534:	d009      	beq.n	800154a <vTaskSwitchContext+0xce>
 8001536:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800153a:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <vTaskSwitchContext+0xf4>)
 800153c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <vTaskSwitchContext+0xec>)
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	e79f      	b.n	800148a <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800154a:	6840      	ldr	r0, [r0, #4]
 800154c:	4a08      	ldr	r2, [pc, #32]	; (8001570 <vTaskSwitchContext+0xf4>)
 800154e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001552:	6050      	str	r0, [r2, #4]
 8001554:	e7ef      	b.n	8001536 <vTaskSwitchContext+0xba>
 8001556:	bf00      	nop
 8001558:	200000d4 	.word	0x200000d4
 800155c:	2000015c 	.word	0x2000015c
 8001560:	200000c8 	.word	0x200000c8
 8001564:	200000c4 	.word	0x200000c4
 8001568:	20000054 	.word	0x20000054
 800156c:	200000dc 	.word	0x200000dc
 8001570:	20000060 	.word	0x20000060

08001574 <vTaskPlaceOnEventList>:
    configASSERT( pxEventList );
 8001574:	b158      	cbz	r0, 800158e <vTaskPlaceOnEventList+0x1a>
{
 8001576:	b510      	push	{r4, lr}
 8001578:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <vTaskPlaceOnEventList+0x2c>)
 800157c:	6811      	ldr	r1, [r2, #0]
 800157e:	3118      	adds	r1, #24
 8001580:	f7fe fe34 	bl	80001ec <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001584:	2101      	movs	r1, #1
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff fc96 	bl	8000eb8 <prvAddCurrentTaskToDelayedList>
}
 800158c:	bd10      	pop	{r4, pc}
 800158e:	f04f 0310 	mov.w	r3, #16
 8001592:	f383 8811 	msr	BASEPRI, r3
 8001596:	f3bf 8f6f 	isb	sy
 800159a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
 800159e:	e7fe      	b.n	800159e <vTaskPlaceOnEventList+0x2a>
 80015a0:	20000054 	.word	0x20000054

080015a4 <vTaskPlaceOnEventListRestricted>:
    {
 80015a4:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxEventList );
 80015a6:	b1e0      	cbz	r0, 80015e2 <vTaskPlaceOnEventListRestricted+0x3e>
 80015a8:	468c      	mov	ip, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	4605      	mov	r5, r0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80015ae:	6842      	ldr	r2, [r0, #4]
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <vTaskPlaceOnEventListRestricted+0x50>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	61c2      	str	r2, [r0, #28]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	6894      	ldr	r4, [r2, #8]
 80015ba:	6204      	str	r4, [r0, #32]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	3018      	adds	r0, #24
 80015c0:	6060      	str	r0, [r4, #4]
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	3018      	adds	r0, #24
 80015c6:	6090      	str	r0, [r2, #8]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	629d      	str	r5, [r3, #40]	; 0x28
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	602b      	str	r3, [r5, #0]
            xTicksToWait = portMAX_DELAY;
 80015d2:	2900      	cmp	r1, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80015d4:	bf0c      	ite	eq
 80015d6:	4660      	moveq	r0, ip
 80015d8:	f04f 30ff 	movne.w	r0, #4294967295
 80015dc:	f7ff fc6c 	bl	8000eb8 <prvAddCurrentTaskToDelayedList>
    }
 80015e0:	bd38      	pop	{r3, r4, r5, pc}
 80015e2:	f04f 0310 	mov.w	r3, #16
 80015e6:	f383 8811 	msr	BASEPRI, r3
 80015ea:	f3bf 8f6f 	isb	sy
 80015ee:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventList );
 80015f2:	e7fe      	b.n	80015f2 <vTaskPlaceOnEventListRestricted+0x4e>
 80015f4:	20000054 	.word	0x20000054

080015f8 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015f8:	68c3      	ldr	r3, [r0, #12]
 80015fa:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d04f      	beq.n	80016a0 <xTaskRemoveFromEventList+0xa8>
{
 8001600:	b430      	push	{r4, r5}
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001604:	69d8      	ldr	r0, [r3, #28]
 8001606:	6a19      	ldr	r1, [r3, #32]
 8001608:	6081      	str	r1, [r0, #8]
 800160a:	69d8      	ldr	r0, [r3, #28]
 800160c:	6048      	str	r0, [r1, #4]
 800160e:	f103 0018 	add.w	r0, r3, #24
 8001612:	6851      	ldr	r1, [r2, #4]
 8001614:	4281      	cmp	r1, r0
 8001616:	bf04      	itt	eq
 8001618:	6a19      	ldreq	r1, [r3, #32]
 800161a:	6051      	streq	r1, [r2, #4]
 800161c:	2100      	movs	r1, #0
 800161e:	6299      	str	r1, [r3, #40]	; 0x28
 8001620:	6811      	ldr	r1, [r2, #0]
 8001622:	3901      	subs	r1, #1
 8001624:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001626:	4a29      	ldr	r2, [pc, #164]	; (80016cc <xTaskRemoveFromEventList+0xd4>)
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	2a00      	cmp	r2, #0
 800162c:	d141      	bne.n	80016b2 <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	6898      	ldr	r0, [r3, #8]
 8001632:	68d9      	ldr	r1, [r3, #12]
 8001634:	6081      	str	r1, [r0, #8]
 8001636:	6898      	ldr	r0, [r3, #8]
 8001638:	6048      	str	r0, [r1, #4]
 800163a:	1d18      	adds	r0, r3, #4
 800163c:	6851      	ldr	r1, [r2, #4]
 800163e:	4281      	cmp	r1, r0
 8001640:	bf04      	itt	eq
 8001642:	68d9      	ldreq	r1, [r3, #12]
 8001644:	6051      	streq	r1, [r2, #4]
 8001646:	2100      	movs	r1, #0
 8001648:	6159      	str	r1, [r3, #20]
 800164a:	6811      	ldr	r1, [r2, #0]
 800164c:	3901      	subs	r1, #1
 800164e:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001652:	4c1f      	ldr	r4, [pc, #124]	; (80016d0 <xTaskRemoveFromEventList+0xd8>)
 8001654:	6825      	ldr	r5, [r4, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4091      	lsls	r1, r2
 800165a:	4329      	orrs	r1, r5
 800165c:	6021      	str	r1, [r4, #0]
 800165e:	491d      	ldr	r1, [pc, #116]	; (80016d4 <xTaskRemoveFromEventList+0xdc>)
 8001660:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001664:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001668:	6852      	ldr	r2, [r2, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	6894      	ldr	r4, [r2, #8]
 800166e:	60dc      	str	r4, [r3, #12]
 8001670:	6060      	str	r0, [r4, #4]
 8001672:	6090      	str	r0, [r2, #8]
 8001674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001676:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800167a:	0084      	lsls	r4, r0, #2
 800167c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8001680:	6158      	str	r0, [r3, #20]
 8001682:	5908      	ldr	r0, [r1, r4]
 8001684:	3001      	adds	r0, #1
 8001686:	5108      	str	r0, [r1, r4]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001688:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <xTaskRemoveFromEventList+0xe0>)
 800168a:	6811      	ldr	r1, [r2, #0]
 800168c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001690:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
 8001692:	bf83      	ittte	hi
 8001694:	2001      	movhi	r0, #1
 8001696:	4b11      	ldrhi	r3, [pc, #68]	; (80016dc <xTaskRemoveFromEventList+0xe4>)
 8001698:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
 800169a:	2000      	movls	r0, #0
}
 800169c:	bc30      	pop	{r4, r5}
 800169e:	4770      	bx	lr
 80016a0:	f04f 0310 	mov.w	r3, #16
 80016a4:	f383 8811 	msr	BASEPRI, r3
 80016a8:	f3bf 8f6f 	isb	sy
 80016ac:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
 80016b0:	e7fe      	b.n	80016b0 <xTaskRemoveFromEventList+0xb8>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <xTaskRemoveFromEventList+0xe8>)
 80016b4:	6851      	ldr	r1, [r2, #4]
 80016b6:	61d9      	str	r1, [r3, #28]
 80016b8:	688c      	ldr	r4, [r1, #8]
 80016ba:	621c      	str	r4, [r3, #32]
 80016bc:	6060      	str	r0, [r4, #4]
 80016be:	6088      	str	r0, [r1, #8]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
 80016c2:	6811      	ldr	r1, [r2, #0]
 80016c4:	3101      	adds	r1, #1
 80016c6:	6011      	str	r1, [r2, #0]
 80016c8:	e7de      	b.n	8001688 <xTaskRemoveFromEventList+0x90>
 80016ca:	bf00      	nop
 80016cc:	200000d4 	.word	0x200000d4
 80016d0:	200000dc 	.word	0x200000dc
 80016d4:	20000060 	.word	0x20000060
 80016d8:	20000054 	.word	0x20000054
 80016dc:	2000015c 	.word	0x2000015c
 80016e0:	20000118 	.word	0x20000118

080016e4 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <vTaskInternalSetTimeOutState+0x10>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80016ea:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <vTaskInternalSetTimeOutState+0x14>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6043      	str	r3, [r0, #4]
}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000110 	.word	0x20000110
 80016f8:	20000158 	.word	0x20000158

080016fc <xTaskCheckForTimeOut>:
    configASSERT( pxTimeOut );
 80016fc:	b1b0      	cbz	r0, 800172c <xTaskCheckForTimeOut+0x30>
{
 80016fe:	b570      	push	{r4, r5, r6, lr}
 8001700:	460c      	mov	r4, r1
 8001702:	4605      	mov	r5, r0
    configASSERT( pxTicksToWait );
 8001704:	b1d9      	cbz	r1, 800173e <xTaskCheckForTimeOut+0x42>
    taskENTER_CRITICAL();
 8001706:	f000 fba5 	bl	8001e54 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <xTaskCheckForTimeOut+0x98>)
 800170c:	681a      	ldr	r2, [r3, #0]
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <xTaskCheckForTimeOut+0x9c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001716:	b1db      	cbz	r3, 8001750 <xTaskCheckForTimeOut+0x54>
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <xTaskCheckForTimeOut+0x9c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
                xReturn = pdTRUE;
 8001722:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
 8001724:	f000 fbb8 	bl	8001e98 <vPortExitCritical>
}
 8001728:	4620      	mov	r0, r4
 800172a:	bd70      	pop	{r4, r5, r6, pc}
 800172c:	f04f 0310 	mov.w	r3, #16
 8001730:	f383 8811 	msr	BASEPRI, r3
 8001734:	f3bf 8f6f 	isb	sy
 8001738:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
 800173c:	e7fe      	b.n	800173c <xTaskCheckForTimeOut+0x40>
 800173e:	f04f 0310 	mov.w	r3, #16
 8001742:	f383 8811 	msr	BASEPRI, r3
 8001746:	f3bf 8f6f 	isb	sy
 800174a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTicksToWait );
 800174e:	e7fe      	b.n	800174e <xTaskCheckForTimeOut+0x52>
            if( *pxTicksToWait == portMAX_DELAY )
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001756:	d01a      	beq.n	800178e <xTaskCheckForTimeOut+0x92>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001758:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800175a:	4810      	ldr	r0, [pc, #64]	; (800179c <xTaskCheckForTimeOut+0xa0>)
 800175c:	6800      	ldr	r0, [r0, #0]
 800175e:	682e      	ldr	r6, [r5, #0]
 8001760:	4286      	cmp	r6, r0
 8001762:	d005      	beq.n	8001770 <xTaskCheckForTimeOut+0x74>
 8001764:	4291      	cmp	r1, r2
 8001766:	d803      	bhi.n	8001770 <xTaskCheckForTimeOut+0x74>
            *pxTicksToWait = ( TickType_t ) 0;
 8001768:	2300      	movs	r3, #0
 800176a:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 800176c:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 800176e:	e7d9      	b.n	8001724 <xTaskCheckForTimeOut+0x28>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001770:	1a50      	subs	r0, r2, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001772:	4283      	cmp	r3, r0
 8001774:	d803      	bhi.n	800177e <xTaskCheckForTimeOut+0x82>
            *pxTicksToWait = ( TickType_t ) 0;
 8001776:	2300      	movs	r3, #0
 8001778:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 800177a:	2401      	movs	r4, #1
 800177c:	e7d2      	b.n	8001724 <xTaskCheckForTimeOut+0x28>
            *pxTicksToWait -= xElapsedTime;
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	440b      	add	r3, r1
 8001782:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001784:	4628      	mov	r0, r5
 8001786:	f7ff ffad 	bl	80016e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800178a:	2400      	movs	r4, #0
 800178c:	e7ca      	b.n	8001724 <xTaskCheckForTimeOut+0x28>
                xReturn = pdFALSE;
 800178e:	2400      	movs	r4, #0
 8001790:	e7c8      	b.n	8001724 <xTaskCheckForTimeOut+0x28>
 8001792:	bf00      	nop
 8001794:	20000158 	.word	0x20000158
 8001798:	20000054 	.word	0x20000054
 800179c:	20000110 	.word	0x20000110

080017a0 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 80017a0:	4b01      	ldr	r3, [pc, #4]	; (80017a8 <vTaskMissedYield+0x8>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	4770      	bx	lr
 80017a8:	2000015c 	.word	0x2000015c

080017ac <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <xTaskGetSchedulerState+0x18>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b133      	cbz	r3, 80017c0 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <xTaskGetSchedulerState+0x1c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
                xReturn = taskSCHEDULER_SUSPENDED;
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf0c      	ite	eq
 80017ba:	2002      	moveq	r0, #2
 80017bc:	2000      	movne	r0, #0
 80017be:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 80017c0:	2001      	movs	r0, #1
    }
 80017c2:	4770      	bx	lr
 80017c4:	2000012c 	.word	0x2000012c
 80017c8:	200000d4 	.word	0x200000d4

080017cc <xTaskPriorityInherit>:
        if( pxMutexHolder != NULL )
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d055      	beq.n	800187c <xTaskPriorityInherit+0xb0>
    {
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	4604      	mov	r4, r0
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80017d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80017d6:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <xTaskPriorityInherit+0xb4>)
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017dc:	4293      	cmp	r3, r2
 80017de:	d244      	bcs.n	800186a <xTaskPriorityInherit+0x9e>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80017e0:	6982      	ldr	r2, [r0, #24]
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	db05      	blt.n	80017f2 <xTaskPriorityInherit+0x26>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017e6:	4a26      	ldr	r2, [pc, #152]	; (8001880 <xTaskPriorityInherit+0xb4>)
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017ec:	f1c2 0205 	rsb	r2, r2, #5
 80017f0:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80017f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017f6:	4a23      	ldr	r2, [pc, #140]	; (8001884 <xTaskPriorityInherit+0xb8>)
 80017f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80017fc:	6962      	ldr	r2, [r4, #20]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d005      	beq.n	800180e <xTaskPriorityInherit+0x42>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <xTaskPriorityInherit+0xb4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	62e3      	str	r3, [r4, #44]	; 0x2c
                xReturn = pdTRUE;
 800180a:	2001      	movs	r0, #1
 800180c:	e035      	b.n	800187a <xTaskPriorityInherit+0xae>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800180e:	1d25      	adds	r5, r4, #4
 8001810:	4628      	mov	r0, r5
 8001812:	f7fe fd04 	bl	800021e <uxListRemove>
 8001816:	b938      	cbnz	r0, 8001828 <xTaskPriorityInherit+0x5c>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001818:	491b      	ldr	r1, [pc, #108]	; (8001888 <xTaskPriorityInherit+0xbc>)
 800181a:	680b      	ldr	r3, [r1, #0]
 800181c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800181e:	2201      	movs	r2, #1
 8001820:	4082      	lsls	r2, r0
 8001822:	ea23 0302 	bic.w	r3, r3, r2
 8001826:	600b      	str	r3, [r1, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <xTaskPriorityInherit+0xb4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001830:	4915      	ldr	r1, [pc, #84]	; (8001888 <xTaskPriorityInherit+0xbc>)
 8001832:	680e      	ldr	r6, [r1, #0]
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f203 	lsl.w	r2, r0, r3
 800183a:	4332      	orrs	r2, r6
 800183c:	600a      	str	r2, [r1, #0]
 800183e:	4a11      	ldr	r2, [pc, #68]	; (8001884 <xTaskPriorityInherit+0xb8>)
 8001840:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001844:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60a3      	str	r3, [r4, #8]
 800184c:	6899      	ldr	r1, [r3, #8]
 800184e:	60e1      	str	r1, [r4, #12]
 8001850:	604d      	str	r5, [r1, #4]
 8001852:	609d      	str	r5, [r3, #8]
 8001854:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001856:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800185a:	008d      	lsls	r5, r1, #2
 800185c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001860:	6161      	str	r1, [r4, #20]
 8001862:	5951      	ldr	r1, [r2, r5]
 8001864:	4401      	add	r1, r0
 8001866:	5151      	str	r1, [r2, r5]
 8001868:	e007      	b.n	800187a <xTaskPriorityInherit+0xae>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <xTaskPriorityInherit+0xb4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	4298      	cmp	r0, r3
 8001874:	bf2c      	ite	cs
 8001876:	2000      	movcs	r0, #0
 8001878:	2001      	movcc	r0, #1
    }
 800187a:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
 800187c:	2000      	movs	r0, #0
    }
 800187e:	4770      	bx	lr
 8001880:	20000054 	.word	0x20000054
 8001884:	20000060 	.word	0x20000060
 8001888:	200000dc 	.word	0x200000dc

0800188c <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 800188c:	2800      	cmp	r0, #0
 800188e:	d051      	beq.n	8001934 <xTaskPriorityDisinherit+0xa8>
    {
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <xTaskPriorityDisinherit+0xb0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4283      	cmp	r3, r0
 800189a:	d008      	beq.n	80018ae <xTaskPriorityDisinherit+0x22>
 800189c:	f04f 0310 	mov.w	r3, #16
 80018a0:	f383 8811 	msr	BASEPRI, r3
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	e7fe      	b.n	80018ac <xTaskPriorityDisinherit+0x20>
            configASSERT( pxTCB->uxMutexesHeld );
 80018ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80018b0:	b943      	cbnz	r3, 80018c4 <xTaskPriorityDisinherit+0x38>
 80018b2:	f04f 0310 	mov.w	r3, #16
 80018b6:	f383 8811 	msr	BASEPRI, r3
 80018ba:	f3bf 8f6f 	isb	sy
 80018be:	f3bf 8f4f 	dsb	sy
 80018c2:	e7fe      	b.n	80018c2 <xTaskPriorityDisinherit+0x36>
            ( pxTCB->uxMutexesHeld )--;
 80018c4:	3b01      	subs	r3, #1
 80018c6:	64c3      	str	r3, [r0, #76]	; 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80018c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80018ca:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80018cc:	4291      	cmp	r1, r2
 80018ce:	d033      	beq.n	8001938 <xTaskPriorityDisinherit+0xac>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80018d0:	b10b      	cbz	r3, 80018d6 <xTaskPriorityDisinherit+0x4a>
        BaseType_t xReturn = pdFALSE;
 80018d2:	2000      	movs	r0, #0
    }
 80018d4:	bd70      	pop	{r4, r5, r6, pc}
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018d6:	1d05      	adds	r5, r0, #4
 80018d8:	4628      	mov	r0, r5
 80018da:	f7fe fca0 	bl	800021e <uxListRemove>
 80018de:	b938      	cbnz	r0, 80018f0 <xTaskPriorityDisinherit+0x64>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80018e0:	4917      	ldr	r1, [pc, #92]	; (8001940 <xTaskPriorityDisinherit+0xb4>)
 80018e2:	680b      	ldr	r3, [r1, #0]
 80018e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80018e6:	2201      	movs	r2, #1
 80018e8:	4082      	lsls	r2, r0
 80018ea:	ea23 0302 	bic.w	r3, r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80018f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018f2:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018f4:	f1c3 0205 	rsb	r2, r3, #5
 80018f8:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 80018fa:	4911      	ldr	r1, [pc, #68]	; (8001940 <xTaskPriorityDisinherit+0xb4>)
 80018fc:	680e      	ldr	r6, [r1, #0]
 80018fe:	2001      	movs	r0, #1
 8001900:	fa00 f203 	lsl.w	r2, r0, r3
 8001904:	4332      	orrs	r2, r6
 8001906:	600a      	str	r2, [r1, #0]
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <xTaskPriorityDisinherit+0xb8>)
 800190a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800190e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	60a3      	str	r3, [r4, #8]
 8001916:	6899      	ldr	r1, [r3, #8]
 8001918:	60e1      	str	r1, [r4, #12]
 800191a:	604d      	str	r5, [r1, #4]
 800191c:	609d      	str	r5, [r3, #8]
 800191e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001920:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001924:	008d      	lsls	r5, r1, #2
 8001926:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800192a:	6161      	str	r1, [r4, #20]
 800192c:	5951      	ldr	r1, [r2, r5]
 800192e:	4401      	add	r1, r0
 8001930:	5151      	str	r1, [r2, r5]
                    xReturn = pdTRUE;
 8001932:	e7cf      	b.n	80018d4 <xTaskPriorityDisinherit+0x48>
        BaseType_t xReturn = pdFALSE;
 8001934:	2000      	movs	r0, #0
    }
 8001936:	4770      	bx	lr
        BaseType_t xReturn = pdFALSE;
 8001938:	2000      	movs	r0, #0
 800193a:	e7cb      	b.n	80018d4 <xTaskPriorityDisinherit+0x48>
 800193c:	20000054 	.word	0x20000054
 8001940:	200000dc 	.word	0x200000dc
 8001944:	20000060 	.word	0x20000060

08001948 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 8001948:	2800      	cmp	r0, #0
 800194a:	d05c      	beq.n	8001a06 <vTaskPriorityDisinheritAfterTimeout+0xbe>
    {
 800194c:	b538      	push	{r3, r4, r5, lr}
 800194e:	4604      	mov	r4, r0
            configASSERT( pxTCB->uxMutexesHeld );
 8001950:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001952:	b943      	cbnz	r3, 8001966 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8001954:	f04f 0310 	mov.w	r3, #16
 8001958:	f383 8811 	msr	BASEPRI, r3
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f3bf 8f4f 	dsb	sy
 8001964:	e7fe      	b.n	8001964 <vTaskPriorityDisinheritAfterTimeout+0x1c>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001966:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001968:	4291      	cmp	r1, r2
 800196a:	bf38      	it	cc
 800196c:	4611      	movcc	r1, r2
            if( pxTCB->uxPriority != uxPriorityToUse )
 800196e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001970:	428a      	cmp	r2, r1
 8001972:	d001      	beq.n	8001978 <vTaskPriorityDisinheritAfterTimeout+0x30>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001974:	2b01      	cmp	r3, #1
 8001976:	d000      	beq.n	800197a <vTaskPriorityDisinheritAfterTimeout+0x32>
    }
 8001978:	bd38      	pop	{r3, r4, r5, pc}
                    configASSERT( pxTCB != pxCurrentTCB );
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4283      	cmp	r3, r0
 8001980:	d038      	beq.n	80019f4 <vTaskPriorityDisinheritAfterTimeout+0xac>
                    pxTCB->uxPriority = uxPriorityToUse;
 8001982:	62c1      	str	r1, [r0, #44]	; 0x2c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001984:	6983      	ldr	r3, [r0, #24]
 8001986:	2b00      	cmp	r3, #0
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001988:	bfa4      	itt	ge
 800198a:	f1c1 0105 	rsbge	r1, r1, #5
 800198e:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001990:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8001996:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800199a:	6943      	ldr	r3, [r0, #20]
 800199c:	4293      	cmp	r3, r2
 800199e:	d1eb      	bne.n	8001978 <vTaskPriorityDisinheritAfterTimeout+0x30>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019a0:	1d05      	adds	r5, r0, #4
 80019a2:	4628      	mov	r0, r5
 80019a4:	f7fe fc3b 	bl	800021e <uxListRemove>
 80019a8:	b938      	cbnz	r0, 80019ba <vTaskPriorityDisinheritAfterTimeout+0x72>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80019aa:	4919      	ldr	r1, [pc, #100]	; (8001a10 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 80019ac:	680b      	ldr	r3, [r1, #0]
 80019ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80019b0:	2201      	movs	r2, #1
 80019b2:	4082      	lsls	r2, r0
 80019b4:	ea23 0302 	bic.w	r3, r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
                        prvAddTaskToReadyList( pxTCB );
 80019ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019bc:	4914      	ldr	r1, [pc, #80]	; (8001a10 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 80019be:	6808      	ldr	r0, [r1, #0]
 80019c0:	2201      	movs	r2, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	4302      	orrs	r2, r0
 80019c6:	600a      	str	r2, [r1, #0]
 80019c8:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80019ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	60a3      	str	r3, [r4, #8]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	60e1      	str	r1, [r4, #12]
 80019da:	604d      	str	r5, [r1, #4]
 80019dc:	609d      	str	r5, [r3, #8]
 80019de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80019e4:	0088      	lsls	r0, r1, #2
 80019e6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80019ea:	6161      	str	r1, [r4, #20]
 80019ec:	5811      	ldr	r1, [r2, r0]
 80019ee:	3101      	adds	r1, #1
 80019f0:	5011      	str	r1, [r2, r0]
    }
 80019f2:	e7c1      	b.n	8001978 <vTaskPriorityDisinheritAfterTimeout+0x30>
 80019f4:	f04f 0310 	mov.w	r3, #16
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
                    configASSERT( pxTCB != pxCurrentTCB );
 8001a04:	e7fe      	b.n	8001a04 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8001a06:	4770      	bx	lr
 8001a08:	20000054 	.word	0x20000054
 8001a0c:	20000060 	.word	0x20000060
 8001a10:	200000dc 	.word	0x200000dc

08001a14 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <pvTaskIncrementMutexHeldCount+0x18>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b123      	cbz	r3, 8001a24 <pvTaskIncrementMutexHeldCount+0x10>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <pvTaskIncrementMutexHeldCount+0x18>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001a20:	3301      	adds	r3, #1
 8001a22:	64d3      	str	r3, [r2, #76]	; 0x4c
        return pxCurrentTCB;
 8001a24:	4b01      	ldr	r3, [pc, #4]	; (8001a2c <pvTaskIncrementMutexHeldCount+0x18>)
 8001a26:	6818      	ldr	r0, [r3, #0]
    }
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000054 	.word	0x20000054

08001a30 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001a30:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001a32:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001a34:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001a36:	4291      	cmp	r1, r2
 8001a38:	d80c      	bhi.n	8001a54 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	6983      	ldr	r3, [r0, #24]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d301      	bcc.n	8001a46 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001a42:	2001      	movs	r0, #1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
 8001a44:	bd08      	pop	{r3, pc}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001a46:	1d01      	adds	r1, r0, #4
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <prvInsertTimerInActiveList+0x40>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	f7fe fbce 	bl	80001ec <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8001a50:	2000      	movs	r0, #0
 8001a52:	e7f7      	b.n	8001a44 <prvInsertTimerInActiveList+0x14>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d201      	bcs.n	8001a5c <prvInsertTimerInActiveList+0x2c>
 8001a58:	4299      	cmp	r1, r3
 8001a5a:	d206      	bcs.n	8001a6a <prvInsertTimerInActiveList+0x3a>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001a5c:	1d01      	adds	r1, r0, #4
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <prvInsertTimerInActiveList+0x44>)
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	f7fe fbc3 	bl	80001ec <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8001a66:	2000      	movs	r0, #0
 8001a68:	e7ec      	b.n	8001a44 <prvInsertTimerInActiveList+0x14>
                xProcessTimerNow = pdTRUE;
 8001a6a:	2001      	movs	r0, #1
        return xProcessTimerNow;
 8001a6c:	e7ea      	b.n	8001a44 <prvInsertTimerInActiveList+0x14>
 8001a6e:	bf00      	nop
 8001a70:	20000164 	.word	0x20000164
 8001a74:	20000160 	.word	0x20000160

08001a78 <prvReloadTimer>:
    {
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	460d      	mov	r5, r1
 8001a7e:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001a80:	e004      	b.n	8001a8c <prvReloadTimer+0x14>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001a82:	69a3      	ldr	r3, [r4, #24]
 8001a84:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001a86:	6a23      	ldr	r3, [r4, #32]
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001a8c:	69a1      	ldr	r1, [r4, #24]
 8001a8e:	462b      	mov	r3, r5
 8001a90:	4632      	mov	r2, r6
 8001a92:	4429      	add	r1, r5
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff ffcb 	bl	8001a30 <prvInsertTimerInActiveList>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d1f1      	bne.n	8001a82 <prvReloadTimer+0xa>
    }
 8001a9e:	bd70      	pop	{r4, r5, r6, pc}

08001aa0 <prvProcessExpiredTimer>:
    {
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	4605      	mov	r5, r0
 8001aa4:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <prvProcessExpiredTimer+0x3c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001aae:	1d20      	adds	r0, r4, #4
 8001ab0:	f7fe fbb5 	bl	800021e <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001ab4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001ab8:	f013 0f04 	tst.w	r3, #4
 8001abc:	d107      	bne.n	8001ace <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001ac6:	6a23      	ldr	r3, [r4, #32]
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4798      	blx	r3
    }
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001ace:	4632      	mov	r2, r6
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff ffd0 	bl	8001a78 <prvReloadTimer>
 8001ad8:	e7f5      	b.n	8001ac6 <prvProcessExpiredTimer+0x26>
 8001ada:	bf00      	nop
 8001adc:	20000160 	.word	0x20000160

08001ae0 <prvSampleTimeNow>:
    {
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae2:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 8001ae4:	f7ff fb08 	bl	80010f8 <xTaskGetTickCount>
 8001ae8:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <prvSampleTimeNow+0x50>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4283      	cmp	r3, r0
 8001af0:	d805      	bhi.n	8001afe <prvSampleTimeNow+0x1e>
            *pxTimerListsWereSwitched = pdFALSE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <prvSampleTimeNow+0x50>)
 8001af8:	601c      	str	r4, [r3, #0]
    }
 8001afa:	4620      	mov	r0, r4
 8001afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <prvSampleTimeNow+0x54>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	b15a      	cbz	r2, 8001b1e <prvSampleTimeNow+0x3e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001b06:	f04f 37ff 	mov.w	r7, #4294967295
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001b0a:	4e0a      	ldr	r6, [pc, #40]	; (8001b34 <prvSampleTimeNow+0x54>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b0c:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001b0e:	4639      	mov	r1, r7
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f7ff ffc5 	bl	8001aa0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001b16:	6833      	ldr	r3, [r6, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d1f6      	bne.n	8001b0c <prvSampleTimeNow+0x2c>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 8001b1e:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <prvSampleTimeNow+0x58>)
 8001b20:	6810      	ldr	r0, [r2, #0]
 8001b22:	4904      	ldr	r1, [pc, #16]	; (8001b34 <prvSampleTimeNow+0x54>)
 8001b24:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
 8001b26:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	602b      	str	r3, [r5, #0]
 8001b2c:	e7e3      	b.n	8001af6 <prvSampleTimeNow+0x16>
 8001b2e:	bf00      	nop
 8001b30:	200001cc 	.word	0x200001cc
 8001b34:	20000160 	.word	0x20000160
 8001b38:	20000164 	.word	0x20000164

08001b3c <prvTimerTask>:
    {
 8001b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b40:	b084      	sub	sp, #16
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001b42:	4f56      	ldr	r7, [pc, #344]	; (8001c9c <prvTimerTask+0x160>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001b44:	4d56      	ldr	r5, [pc, #344]	; (8001ca0 <prvTimerTask+0x164>)
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681e      	ldr	r6, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 8001b4a:	b196      	cbz	r6, 8001b72 <prvTimerTask+0x36>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	681e      	ldr	r6, [r3, #0]
        vTaskSuspendAll();
 8001b50:	f7ff faca 	bl	80010e8 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b54:	a801      	add	r0, sp, #4
 8001b56:	f7ff ffc3 	bl	8001ae0 <prvSampleTimeNow>
 8001b5a:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
 8001b5c:	9a01      	ldr	r2, [sp, #4]
 8001b5e:	bb42      	cbnz	r2, 8001bb2 <prvTimerTask+0x76>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001b60:	42b0      	cmp	r0, r6
 8001b62:	d314      	bcc.n	8001b8e <prvTimerTask+0x52>
                    ( void ) xTaskResumeAll();
 8001b64:	f7ff fba8 	bl	80012b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f7ff ff98 	bl	8001aa0 <prvProcessExpiredTimer>
 8001b70:	e021      	b.n	8001bb6 <prvTimerTask+0x7a>
        vTaskSuspendAll();
 8001b72:	f7ff fab9 	bl	80010e8 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b76:	a801      	add	r0, sp, #4
 8001b78:	f7ff ffb2 	bl	8001ae0 <prvSampleTimeNow>
 8001b7c:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
 8001b7e:	9b01      	ldr	r3, [sp, #4]
 8001b80:	b9bb      	cbnz	r3, 8001bb2 <prvTimerTask+0x76>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001b82:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <prvTimerTask+0x168>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	fab2 f282 	clz	r2, r2
 8001b8c:	0952      	lsrs	r2, r2, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001b8e:	1b31      	subs	r1, r6, r4
 8001b90:	6828      	ldr	r0, [r5, #0]
 8001b92:	f7ff f817 	bl	8000bc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001b96:	f7ff fb8f 	bl	80012b8 <xTaskResumeAll>
 8001b9a:	b960      	cbnz	r0, 8001bb6 <prvTimerTask+0x7a>
                        portYIELD_WITHIN_API();
 8001b9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	e001      	b.n	8001bb6 <prvTimerTask+0x7a>
                ( void ) xTaskResumeAll();
 8001bb2:	f7ff fb81 	bl	80012b8 <xTaskResumeAll>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001bb6:	2400      	movs	r4, #0
 8001bb8:	4622      	mov	r2, r4
 8001bba:	a901      	add	r1, sp, #4
 8001bbc:	6828      	ldr	r0, [r5, #0]
 8001bbe:	f7fe fe51 	bl	8000864 <xQueueReceive>
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d0bf      	beq.n	8001b46 <prvTimerTask+0xa>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001bc6:	9b01      	ldr	r3, [sp, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	dbf5      	blt.n	8001bb8 <prvTimerTask+0x7c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001bcc:	9e03      	ldr	r6, [sp, #12]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001bce:	6973      	ldr	r3, [r6, #20]
 8001bd0:	b113      	cbz	r3, 8001bd8 <prvTimerTask+0x9c>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001bd2:	1d30      	adds	r0, r6, #4
 8001bd4:	f7fe fb23 	bl	800021e <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001bd8:	4668      	mov	r0, sp
 8001bda:	f7ff ff81 	bl	8001ae0 <prvSampleTimeNow>
 8001bde:	4680      	mov	r8, r0
                switch( xMessage.xMessageID )
 8001be0:	9b01      	ldr	r3, [sp, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d8e7      	bhi.n	8001bb8 <prvTimerTask+0x7c>
 8001be8:	e8df f003 	tbb	[pc, r3]
 8001bec:	30290505 	.word	0x30290505
 8001bf0:	29050549 	.word	0x29050549
 8001bf4:	30          	.byte	0x30
 8001bf5:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001bf6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001c02:	9b02      	ldr	r3, [sp, #8]
 8001c04:	69b1      	ldr	r1, [r6, #24]
 8001c06:	4602      	mov	r2, r0
 8001c08:	4419      	add	r1, r3
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	f7ff ff10 	bl	8001a30 <prvInsertTimerInActiveList>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d0d1      	beq.n	8001bb8 <prvTimerTask+0x7c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001c14:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001c18:	f013 0f04 	tst.w	r3, #4
 8001c1c:	d107      	bne.n	8001c2e <prvTimerTask+0xf2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c26:	6a33      	ldr	r3, [r6, #32]
 8001c28:	4630      	mov	r0, r6
 8001c2a:	4798      	blx	r3
 8001c2c:	e7c4      	b.n	8001bb8 <prvTimerTask+0x7c>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001c2e:	69b3      	ldr	r3, [r6, #24]
 8001c30:	4642      	mov	r2, r8
 8001c32:	9902      	ldr	r1, [sp, #8]
 8001c34:	4419      	add	r1, r3
 8001c36:	4630      	mov	r0, r6
 8001c38:	f7ff ff1e 	bl	8001a78 <prvReloadTimer>
 8001c3c:	e7f3      	b.n	8001c26 <prvTimerTask+0xea>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c3e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        break;
 8001c4a:	e7b5      	b.n	8001bb8 <prvTimerTask+0x7c>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c4c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001c58:	9902      	ldr	r1, [sp, #8]
 8001c5a:	61b1      	str	r1, [r6, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001c5c:	b131      	cbz	r1, 8001c6c <prvTimerTask+0x130>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4602      	mov	r2, r0
 8001c62:	4401      	add	r1, r0
 8001c64:	4630      	mov	r0, r6
 8001c66:	f7ff fee3 	bl	8001a30 <prvInsertTimerInActiveList>
                        break;
 8001c6a:	e7a5      	b.n	8001bb8 <prvTimerTask+0x7c>
 8001c6c:	f04f 0310 	mov.w	r3, #16
 8001c70:	f383 8811 	msr	BASEPRI, r3
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001c7c:	e7fe      	b.n	8001c7c <prvTimerTask+0x140>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001c7e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001c82:	f013 0f02 	tst.w	r3, #2
 8001c86:	d004      	beq.n	8001c92 <prvTimerTask+0x156>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8001c90:	e792      	b.n	8001bb8 <prvTimerTask+0x7c>
                                    vPortFree( pxTimer );
 8001c92:	4630      	mov	r0, r6
 8001c94:	f000 fb0a 	bl	80022ac <vPortFree>
 8001c98:	e78e      	b.n	8001bb8 <prvTimerTask+0x7c>
 8001c9a:	bf00      	nop
 8001c9c:	20000160 	.word	0x20000160
 8001ca0:	20000224 	.word	0x20000224
 8001ca4:	20000164 	.word	0x20000164

08001ca8 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001ca8:	b530      	push	{r4, r5, lr}
 8001caa:	b083      	sub	sp, #12
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001cac:	f000 f8d2 	bl	8001e54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <prvCheckForValidListAndQueue+0x50>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b11b      	cbz	r3, 8001cbe <prvCheckForValidListAndQueue+0x16>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001cb6:	f000 f8ef 	bl	8001e98 <vPortExitCritical>
    }
 8001cba:	b003      	add	sp, #12
 8001cbc:	bd30      	pop	{r4, r5, pc}
                vListInitialise( &xActiveTimerList1 );
 8001cbe:	4d0f      	ldr	r5, [pc, #60]	; (8001cfc <prvCheckForValidListAndQueue+0x54>)
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f7fe fa85 	bl	80001d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001cc6:	4c0e      	ldr	r4, [pc, #56]	; (8001d00 <prvCheckForValidListAndQueue+0x58>)
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7fe fa81 	bl	80001d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <prvCheckForValidListAndQueue+0x5c>)
 8001cd0:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <prvCheckForValidListAndQueue+0x60>)
 8001cd4:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <prvCheckForValidListAndQueue+0x64>)
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <prvCheckForValidListAndQueue+0x68>)
 8001cde:	210c      	movs	r1, #12
 8001ce0:	2005      	movs	r0, #5
 8001ce2:	f7fe fbe5 	bl	80004b0 <xQueueGenericCreateStatic>
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <prvCheckForValidListAndQueue+0x50>)
 8001ce8:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d0e3      	beq.n	8001cb6 <prvCheckForValidListAndQueue+0xe>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001cee:	4909      	ldr	r1, [pc, #36]	; (8001d14 <prvCheckForValidListAndQueue+0x6c>)
 8001cf0:	f7fe ff3e 	bl	8000b70 <vQueueAddToRegistry>
 8001cf4:	e7df      	b.n	8001cb6 <prvCheckForValidListAndQueue+0xe>
 8001cf6:	bf00      	nop
 8001cf8:	20000224 	.word	0x20000224
 8001cfc:	200001a4 	.word	0x200001a4
 8001d00:	200001b8 	.word	0x200001b8
 8001d04:	20000160 	.word	0x20000160
 8001d08:	20000164 	.word	0x20000164
 8001d0c:	200001d0 	.word	0x200001d0
 8001d10:	20000168 	.word	0x20000168
 8001d14:	08003254 	.word	0x08003254

08001d18 <xTimerCreateTimerTask>:
    {
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
 8001d1c:	f7ff ffc4 	bl	8001ca8 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <xTimerCreateTimerTask+0x54>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b1cb      	cbz	r3, 8001d5a <xTimerCreateTimerTask+0x42>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8001d26:	2400      	movs	r4, #0
 8001d28:	9405      	str	r4, [sp, #20]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8001d2a:	9406      	str	r4, [sp, #24]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001d2c:	aa07      	add	r2, sp, #28
 8001d2e:	a906      	add	r1, sp, #24
 8001d30:	a805      	add	r0, sp, #20
 8001d32:	f000 fc3f 	bl	80025b4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8001d36:	9b05      	ldr	r3, [sp, #20]
 8001d38:	9302      	str	r3, [sp, #8]
 8001d3a:	9b06      	ldr	r3, [sp, #24]
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	4623      	mov	r3, r4
 8001d44:	9a07      	ldr	r2, [sp, #28]
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <xTimerCreateTimerTask+0x58>)
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <xTimerCreateTimerTask+0x5c>)
 8001d4a:	f7ff f911 	bl	8000f70 <xTaskCreateStatic>
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <xTimerCreateTimerTask+0x60>)
 8001d50:	6018      	str	r0, [r3, #0]
                    if( xTimerTaskHandle != NULL )
 8001d52:	b110      	cbz	r0, 8001d5a <xTimerCreateTimerTask+0x42>
    }
 8001d54:	2001      	movs	r0, #1
 8001d56:	b008      	add	sp, #32
 8001d58:	bd10      	pop	{r4, pc}
 8001d5a:	f04f 0310 	mov.w	r3, #16
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 8001d6a:	e7fe      	b.n	8001d6a <xTimerCreateTimerTask+0x52>
 8001d6c:	20000224 	.word	0x20000224
 8001d70:	0800325c 	.word	0x0800325c
 8001d74:	08001b3d 	.word	0x08001b3d
 8001d78:	20000228 	.word	0x20000228

08001d7c <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d7c:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9301      	str	r3, [sp, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <prvTaskExitError+0x3c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8a:	d008      	beq.n	8001d9e <prvTaskExitError+0x22>
 8001d8c:	f04f 0310 	mov.w	r3, #16
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	e7fe      	b.n	8001d9c <prvTaskExitError+0x20>
 8001d9e:	f04f 0310 	mov.w	r3, #16
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001dae:	9b01      	ldr	r3, [sp, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0fc      	beq.n	8001dae <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001db4:	b002      	add	sp, #8
 8001db6:	4770      	bx	lr
 8001db8:	20000004 	.word	0x20000004

08001dbc <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001dbc:	4808      	ldr	r0, [pc, #32]	; (8001de0 <prvPortStartFirstTask+0x24>)
 8001dbe:	6800      	ldr	r0, [r0, #0]
 8001dc0:	6800      	ldr	r0, [r0, #0]
 8001dc2:	f380 8808 	msr	MSP, r0
 8001dc6:	f04f 0000 	mov.w	r0, #0
 8001dca:	f380 8814 	msr	CONTROL, r0
 8001dce:	b662      	cpsie	i
 8001dd0:	b661      	cpsie	f
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	f3bf 8f6f 	isb	sy
 8001dda:	df00      	svc	0
 8001ddc:	bf00      	nop
 8001dde:	0000      	.short	0x0000
 8001de0:	e000ed08 	.word	0xe000ed08

08001de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001df4 <vPortEnableVFP+0x10>
 8001de8:	6801      	ldr	r1, [r0, #0]
 8001dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001dee:	6001      	str	r1, [r0, #0]
 8001df0:	4770      	bx	lr
 8001df2:	0000      	.short	0x0000
 8001df4:	e000ed88 	.word	0xe000ed88

08001df8 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dfc:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001e00:	f021 0101 	bic.w	r1, r1, #1
 8001e04:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <pxPortInitialiseStack+0x28>)
 8001e0a:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001e0e:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e12:	f06f 0302 	mvn.w	r3, #2
 8001e16:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001e1a:	3844      	subs	r0, #68	; 0x44
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	08001d7d 	.word	0x08001d7d
	...

08001e30 <SVC_Handler>:
    __asm volatile (
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <pxCurrentTCBConst2>)
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	6808      	ldr	r0, [r1, #0]
 8001e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e3a:	f380 8809 	msr	PSP, r0
 8001e3e:	f3bf 8f6f 	isb	sy
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	f380 8811 	msr	BASEPRI, r0
 8001e4a:	4770      	bx	lr
 8001e4c:	f3af 8000 	nop.w

08001e50 <pxCurrentTCBConst2>:
 8001e50:	20000054 	.word	0x20000054

08001e54 <vPortEnterCritical>:
 8001e54:	f04f 0310 	mov.w	r3, #16
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <vPortEnterCritical+0x40>)
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d000      	beq.n	8001e72 <vPortEnterCritical+0x1e>
}
 8001e70:	4770      	bx	lr
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001e76:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8001e7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e7e:	d0f7      	beq.n	8001e70 <vPortEnterCritical+0x1c>
 8001e80:	f04f 0310 	mov.w	r3, #16
 8001e84:	f383 8811 	msr	BASEPRI, r3
 8001e88:	f3bf 8f6f 	isb	sy
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	e7fe      	b.n	8001e90 <vPortEnterCritical+0x3c>
 8001e92:	bf00      	nop
 8001e94:	20000004 	.word	0x20000004

08001e98 <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <vPortExitCritical+0x28>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b943      	cbnz	r3, 8001eb0 <vPortExitCritical+0x18>
 8001e9e:	f04f 0310 	mov.w	r3, #16
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	e7fe      	b.n	8001eae <vPortExitCritical+0x16>
    uxCriticalNesting--;
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <vPortExitCritical+0x28>)
 8001eb4:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8001eb6:	b90b      	cbnz	r3, 8001ebc <vPortExitCritical+0x24>
        __asm volatile
 8001eb8:	f383 8811 	msr	BASEPRI, r3
}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000004 	.word	0x20000004
	...

08001ed0 <PendSV_Handler>:
    __asm volatile
 8001ed0:	f3ef 8009 	mrs	r0, PSP
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <pxCurrentTCBConst>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f01e 0f10 	tst.w	lr, #16
 8001ee0:	bf08      	it	eq
 8001ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eea:	6010      	str	r0, [r2, #0]
 8001eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ef0:	f04f 0010 	mov.w	r0, #16
 8001ef4:	f380 8811 	msr	BASEPRI, r0
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f7ff fabc 	bl	800147c <vTaskSwitchContext>
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f380 8811 	msr	BASEPRI, r0
 8001f0c:	bc09      	pop	{r0, r3}
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	6808      	ldr	r0, [r1, #0]
 8001f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f16:	f01e 0f10 	tst.w	lr, #16
 8001f1a:	bf08      	it	eq
 8001f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001f20:	f380 8809 	msr	PSP, r0
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w

08001f30 <pxCurrentTCBConst>:
 8001f30:	20000054 	.word	0x20000054

08001f34 <SysTick_Handler>:
{
 8001f34:	b508      	push	{r3, lr}
        __asm volatile
 8001f36:	f04f 0310 	mov.w	r3, #16
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
 8001f46:	f7ff f8dd 	bl	8001104 <xTaskIncrementTick>
 8001f4a:	b128      	cbz	r0, 8001f58 <SysTick_Handler+0x24>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f383 8811 	msr	BASEPRI, r3
}
 8001f5e:	bd08      	pop	{r3, pc}

08001f60 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f68:	619a      	str	r2, [r3, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f6a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001f6e:	615a      	str	r2, [r3, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f70:	2207      	movs	r2, #7
 8001f72:	611a      	str	r2, [r3, #16]
}
 8001f74:	4770      	bx	lr
	...

08001f78 <xPortStartScheduler>:
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f7c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f80:	4b3e      	ldr	r3, [pc, #248]	; (800207c <xPortStartScheduler+0x104>)
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d03b      	beq.n	8001ffe <xPortStartScheduler+0x86>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f8a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <xPortStartScheduler+0x108>)
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d03d      	beq.n	8002010 <xPortStartScheduler+0x98>
{
 8001f94:	b530      	push	{r4, r5, lr}
 8001f96:	b083      	sub	sp, #12
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <xPortStartScheduler+0x10c>)
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001fa0:	22ff      	movs	r2, #255	; 0xff
 8001fa2:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	4a34      	ldr	r2, [pc, #208]	; (8002088 <xPortStartScheduler+0x110>)
 8001fb6:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fb8:	4b34      	ldr	r3, [pc, #208]	; (800208c <xPortStartScheduler+0x114>)
 8001fba:	2207      	movs	r2, #7
 8001fbc:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001fc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fc6:	d011      	beq.n	8001fec <xPortStartScheduler+0x74>
 8001fc8:	2206      	movs	r2, #6
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001fca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	3a01      	subs	r2, #1
 8001fde:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fe2:	d1f2      	bne.n	8001fca <xPortStartScheduler+0x52>
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <xPortStartScheduler+0x114>)
 8001fe6:	6019      	str	r1, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001fe8:	2903      	cmp	r1, #3
 8001fea:	d01a      	beq.n	8002022 <xPortStartScheduler+0xaa>
        __asm volatile
 8001fec:	f04f 0310 	mov.w	r3, #16
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	e7fe      	b.n	8001ffc <xPortStartScheduler+0x84>
 8001ffe:	f04f 0310 	mov.w	r3, #16
 8002002:	f383 8811 	msr	BASEPRI, r3
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	f3bf 8f4f 	dsb	sy
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800200e:	e7fe      	b.n	800200e <xPortStartScheduler+0x96>
 8002010:	f04f 0310 	mov.w	r3, #16
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002020:	e7fe      	b.n	8002020 <xPortStartScheduler+0xa8>
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <xPortStartScheduler+0x114>)
 8002024:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002028:	601a      	str	r2, [r3, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800202a:	9b01      	ldr	r3, [sp, #4]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <xPortStartScheduler+0x10c>)
 8002030:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002032:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8002036:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800203a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002042:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002046:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800204a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 800204e:	f7ff ff87 	bl	8001f60 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8002052:	2500      	movs	r5, #0
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <xPortStartScheduler+0x118>)
 8002056:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 8002058:	f7ff fec4 	bl	8001de4 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800205c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8002060:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002064:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
    prvPortStartFirstTask();
 8002068:	f7ff fea8 	bl	8001dbc <prvPortStartFirstTask>
    vTaskSwitchContext();
 800206c:	f7ff fa06 	bl	800147c <vTaskSwitchContext>
    prvTaskExitError();
 8002070:	f7ff fe84 	bl	8001d7c <prvTaskExitError>
}
 8002074:	4628      	mov	r0, r5
 8002076:	b003      	add	sp, #12
 8002078:	bd30      	pop	{r4, r5, pc}
 800207a:	bf00      	nop
 800207c:	410fc271 	.word	0x410fc271
 8002080:	410fc270 	.word	0x410fc270
 8002084:	e000e400 	.word	0xe000e400
 8002088:	2000022c 	.word	0x2000022c
 800208c:	20000230 	.word	0x20000230
 8002090:	20000004 	.word	0x20000004

08002094 <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002094:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d90f      	bls.n	80020bc <vPortValidateInterruptPriority+0x28>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <vPortValidateInterruptPriority+0x50>)
 800209e:	5c9b      	ldrb	r3, [r3, r2]
 80020a0:	b2db      	uxtb	r3, r3
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80020a2:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <vPortValidateInterruptPriority+0x54>)
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d908      	bls.n	80020bc <vPortValidateInterruptPriority+0x28>
 80020aa:	f04f 0310 	mov.w	r3, #16
 80020ae:	f383 8811 	msr	BASEPRI, r3
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	e7fe      	b.n	80020ba <vPortValidateInterruptPriority+0x26>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80020bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80020c0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80020c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020c8:	4a08      	ldr	r2, [pc, #32]	; (80020ec <vPortValidateInterruptPriority+0x58>)
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d908      	bls.n	80020e2 <vPortValidateInterruptPriority+0x4e>
 80020d0:	f04f 0310 	mov.w	r3, #16
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	e7fe      	b.n	80020e0 <vPortValidateInterruptPriority+0x4c>
    }
 80020e2:	4770      	bx	lr
 80020e4:	e000e3f0 	.word	0xe000e3f0
 80020e8:	2000022c 	.word	0x2000022c
 80020ec:	20000230 	.word	0x20000230

080020f0 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <prvInsertBlockIntoFreeList+0x58>)
 80020f2:	461a      	mov	r2, r3
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4283      	cmp	r3, r0
 80020f8:	d3fb      	bcc.n	80020f2 <prvInsertBlockIntoFreeList+0x2>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80020fa:	6851      	ldr	r1, [r2, #4]
 80020fc:	eb02 0c01 	add.w	ip, r2, r1
 8002100:	4560      	cmp	r0, ip
 8002102:	d009      	beq.n	8002118 <prvInsertBlockIntoFreeList+0x28>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002104:	6841      	ldr	r1, [r0, #4]
 8002106:	eb00 0c01 	add.w	ip, r0, r1
 800210a:	4563      	cmp	r3, ip
 800210c:	d009      	beq.n	8002122 <prvInsertBlockIntoFreeList+0x32>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800210e:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002110:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002112:	bf18      	it	ne
 8002114:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
 8002116:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002118:	6840      	ldr	r0, [r0, #4]
 800211a:	4401      	add	r1, r0
 800211c:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 800211e:	4610      	mov	r0, r2
 8002120:	e7f0      	b.n	8002104 <prvInsertBlockIntoFreeList+0x14>
{
 8002122:	b410      	push	{r4}
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002124:	4c09      	ldr	r4, [pc, #36]	; (800214c <prvInsertBlockIntoFreeList+0x5c>)
 8002126:	6824      	ldr	r4, [r4, #0]
 8002128:	42a3      	cmp	r3, r4
 800212a:	d00b      	beq.n	8002144 <prvInsertBlockIntoFreeList+0x54>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4419      	add	r1, r3
 8002130:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6003      	str	r3, [r0, #0]
    if( pxIterator != pxBlockToInsert )
 8002138:	4290      	cmp	r0, r2
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800213a:	bf18      	it	ne
 800213c:	6010      	strne	r0, [r2, #0]
    }
}
 800213e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002142:	4770      	bx	lr
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002144:	6004      	str	r4, [r0, #0]
 8002146:	e7f7      	b.n	8002138 <prvInsertBlockIntoFreeList+0x48>
 8002148:	2000424c 	.word	0x2000424c
 800214c:	20000234 	.word	0x20000234

08002150 <pvPortMalloc>:
{
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	4604      	mov	r4, r0
    vTaskSuspendAll();
 8002154:	f7fe ffc8 	bl	80010e8 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <pvPortMalloc+0x140>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b1a3      	cbz	r3, 8002188 <pvPortMalloc+0x38>
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800215e:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <pvPortMalloc+0x144>)
 8002160:	681d      	ldr	r5, [r3, #0]
 8002162:	4225      	tst	r5, r4
 8002164:	d136      	bne.n	80021d4 <pvPortMalloc+0x84>
            if( ( xWantedSize > 0 ) &&
 8002166:	1e63      	subs	r3, r4, #1
 8002168:	f113 0f0a 	cmn.w	r3, #10
 800216c:	d835      	bhi.n	80021da <pvPortMalloc+0x8a>
                xWantedSize += xHeapStructSize;
 800216e:	f104 0208 	add.w	r2, r4, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002172:	f014 0f07 	tst.w	r4, #7
 8002176:	d038      	beq.n	80021ea <pvPortMalloc+0x9a>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002178:	f022 0307 	bic.w	r3, r2, #7
 800217c:	3308      	adds	r3, #8
 800217e:	4293      	cmp	r3, r2
 8002180:	d832      	bhi.n	80021e8 <pvPortMalloc+0x98>
    ( void ) xTaskResumeAll();
 8002182:	f7ff f899 	bl	80012b8 <xTaskResumeAll>
            if( pvReturn == NULL )
 8002186:	e02a      	b.n	80021de <pvPortMalloc+0x8e>
    uxAddress = ( size_t ) ucHeap;
 8002188:	4a43      	ldr	r2, [pc, #268]	; (8002298 <pvPortMalloc+0x148>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800218a:	f012 0f07 	tst.w	r2, #7
 800218e:	d01e      	beq.n	80021ce <pvPortMalloc+0x7e>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002190:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002192:	f021 0107 	bic.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002196:	f502 4380 	add.w	r3, r2, #16384	; 0x4000
 800219a:	1a5b      	subs	r3, r3, r1
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800219c:	460a      	mov	r2, r1
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800219e:	483f      	ldr	r0, [pc, #252]	; (800229c <pvPortMalloc+0x14c>)
 80021a0:	6002      	str	r2, [r0, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80021a2:	2100      	movs	r1, #0
 80021a4:	6041      	str	r1, [r0, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80021a6:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 80021a8:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80021aa:	f023 0307 	bic.w	r3, r3, #7
    pxEnd = ( void * ) uxAddress;
 80021ae:	4838      	ldr	r0, [pc, #224]	; (8002290 <pvPortMalloc+0x140>)
 80021b0:	6003      	str	r3, [r0, #0]
    pxEnd->xBlockSize = 0;
 80021b2:	6059      	str	r1, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80021b4:	6019      	str	r1, [r3, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80021b6:	1a99      	subs	r1, r3, r2
 80021b8:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80021ba:	6013      	str	r3, [r2, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <pvPortMalloc+0x150>)
 80021be:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80021c0:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <pvPortMalloc+0x154>)
 80021c2:	6019      	str	r1, [r3, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80021c4:	4b33      	ldr	r3, [pc, #204]	; (8002294 <pvPortMalloc+0x144>)
 80021c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021ca:	601a      	str	r2, [r3, #0]
}
 80021cc:	e7c7      	b.n	800215e <pvPortMalloc+0xe>
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80021ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021d2:	e7e4      	b.n	800219e <pvPortMalloc+0x4e>
    ( void ) xTaskResumeAll();
 80021d4:	f7ff f870 	bl	80012b8 <xTaskResumeAll>
            if( pvReturn == NULL )
 80021d8:	e001      	b.n	80021de <pvPortMalloc+0x8e>
    ( void ) xTaskResumeAll();
 80021da:	f7ff f86d 	bl	80012b8 <xTaskResumeAll>
                vApplicationMallocFailedHook();
 80021de:	f000 f9db 	bl	8002598 <vApplicationMallocFailedHook>
 80021e2:	2600      	movs	r6, #0
}
 80021e4:	4630      	mov	r0, r6
 80021e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80021e8:	461a      	mov	r2, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <pvPortMalloc+0x154>)
 80021ec:	681f      	ldr	r7, [r3, #0]
 80021ee:	4297      	cmp	r7, r2
 80021f0:	d302      	bcc.n	80021f8 <pvPortMalloc+0xa8>
                pxBlock = xStart.pxNextFreeBlock;
 80021f2:	492a      	ldr	r1, [pc, #168]	; (800229c <pvPortMalloc+0x14c>)
 80021f4:	680c      	ldr	r4, [r1, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80021f6:	e004      	b.n	8002202 <pvPortMalloc+0xb2>
    ( void ) xTaskResumeAll();
 80021f8:	f7ff f85e 	bl	80012b8 <xTaskResumeAll>
            if( pvReturn == NULL )
 80021fc:	e7ef      	b.n	80021de <pvPortMalloc+0x8e>
 80021fe:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002200:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002202:	6863      	ldr	r3, [r4, #4]
 8002204:	4293      	cmp	r3, r2
 8002206:	d202      	bcs.n	800220e <pvPortMalloc+0xbe>
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f7      	bne.n	80021fe <pvPortMalloc+0xae>
                if( pxBlock != pxEnd )
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <pvPortMalloc+0x140>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	42a3      	cmp	r3, r4
 8002214:	d014      	beq.n	8002240 <pvPortMalloc+0xf0>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002216:	680e      	ldr	r6, [r1, #0]
 8002218:	3608      	adds	r6, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	600b      	str	r3, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800221e:	6863      	ldr	r3, [r4, #4]
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	2b10      	cmp	r3, #16
 8002224:	d913      	bls.n	800224e <pvPortMalloc+0xfe>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002226:	18a0      	adds	r0, r4, r2
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002228:	f010 0f07 	tst.w	r0, #7
 800222c:	d00b      	beq.n	8002246 <pvPortMalloc+0xf6>
 800222e:	f04f 0310 	mov.w	r3, #16
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	e7fe      	b.n	800223e <pvPortMalloc+0xee>
    ( void ) xTaskResumeAll();
 8002240:	f7ff f83a 	bl	80012b8 <xTaskResumeAll>
            if( pvReturn == NULL )
 8002244:	e7cb      	b.n	80021de <pvPortMalloc+0x8e>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002246:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002248:	6062      	str	r2, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800224a:	f7ff ff51 	bl	80020f0 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800224e:	6863      	ldr	r3, [r4, #4]
 8002250:	1aff      	subs	r7, r7, r3
 8002252:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <pvPortMalloc+0x154>)
 8002254:	6017      	str	r7, [r2, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <pvPortMalloc+0x150>)
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	4297      	cmp	r7, r2
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800225c:	bf3c      	itt	cc
 800225e:	4a10      	ldrcc	r2, [pc, #64]	; (80022a0 <pvPortMalloc+0x150>)
 8002260:	6017      	strcc	r7, [r2, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002262:	431d      	orrs	r5, r3
 8002264:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 800226a:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <pvPortMalloc+0x158>)
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 8002272:	f7ff f821 	bl	80012b8 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002276:	f016 0f07 	tst.w	r6, #7
 800227a:	d0b3      	beq.n	80021e4 <pvPortMalloc+0x94>
 800227c:	f04f 0310 	mov.w	r3, #16
 8002280:	f383 8811 	msr	BASEPRI, r3
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	e7fe      	b.n	800228c <pvPortMalloc+0x13c>
 800228e:	bf00      	nop
 8002290:	20000234 	.word	0x20000234
 8002294:	20004238 	.word	0x20004238
 8002298:	20000238 	.word	0x20000238
 800229c:	2000424c 	.word	0x2000424c
 80022a0:	20004240 	.word	0x20004240
 80022a4:	2000423c 	.word	0x2000423c
 80022a8:	20004244 	.word	0x20004244

080022ac <vPortFree>:
    if( pv != NULL )
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d033      	beq.n	8002318 <vPortFree+0x6c>
{
 80022b0:	b510      	push	{r4, lr}
 80022b2:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80022b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80022b8:	4a18      	ldr	r2, [pc, #96]	; (800231c <vPortFree+0x70>)
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	4213      	tst	r3, r2
 80022be:	d108      	bne.n	80022d2 <vPortFree+0x26>
 80022c0:	f04f 0310 	mov.w	r3, #16
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	e7fe      	b.n	80022d0 <vPortFree+0x24>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80022d2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80022d6:	b141      	cbz	r1, 80022ea <vPortFree+0x3e>
 80022d8:	f04f 0310 	mov.w	r3, #16
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	f3bf 8f6f 	isb	sy
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	e7fe      	b.n	80022e8 <vPortFree+0x3c>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80022ea:	ea23 0302 	bic.w	r3, r3, r2
 80022ee:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 80022f2:	f7fe fef9 	bl	80010e8 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <vPortFree+0x74>)
 80022f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80022fc:	6811      	ldr	r1, [r2, #0]
 80022fe:	440b      	add	r3, r1
 8002300:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002302:	f1a4 0008 	sub.w	r0, r4, #8
 8002306:	f7ff fef3 	bl	80020f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800230a:	4a06      	ldr	r2, [pc, #24]	; (8002324 <vPortFree+0x78>)
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8002312:	f7fe ffd1 	bl	80012b8 <xTaskResumeAll>
}
 8002316:	bd10      	pop	{r4, pc}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20004238 	.word	0x20004238
 8002320:	2000423c 	.word	0x2000423c
 8002324:	20004248 	.word	0x20004248

08002328 <TaskErase>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    configASSERT( NULL );
}

void TaskErase (void *p){
 8002328:	b500      	push	{lr}
 800232a:	b085      	sub	sp, #20

	QUEUE_DATA flashData;

	flashData.flash_addr = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	9300      	str	r3, [sp, #0]
	flashData.cmd_flash = CMD_ERASE_4KB;
 8002330:	2320      	movs	r3, #32
 8002332:	f88d 300c 	strb.w	r3, [sp, #12]

	while(1){
		xQueueSend(flashQueue, &flashData, 50);
 8002336:	4d06      	ldr	r5, [pc, #24]	; (8002350 <TaskErase+0x28>)
 8002338:	2400      	movs	r4, #0
 800233a:	4623      	mov	r3, r4
 800233c:	2232      	movs	r2, #50	; 0x32
 800233e:	4669      	mov	r1, sp
 8002340:	6828      	ldr	r0, [r5, #0]
 8002342:	f7fe f92d 	bl	80005a0 <xQueueGenericSend>

		vTaskDelay(1500);
 8002346:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800234a:	f7ff f871 	bl	8001430 <vTaskDelay>
	while(1){
 800234e:	e7f4      	b.n	800233a <TaskErase+0x12>
 8002350:	20004b28 	.word	0x20004b28

08002354 <TaskRead>:
	}
}

void TaskRead(void *p){
 8002354:	b500      	push	{lr}
 8002356:	b085      	sub	sp, #20

	QUEUE_DATA flashData;

	flashData.flash_addr = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	9300      	str	r3, [sp, #0]
	flashData.cnt_flashb = 4;
 800235c:	2304      	movs	r3, #4
 800235e:	f88d 3004 	strb.w	r3, [sp, #4]
	flashData.flash_buf = rx_flashb;
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <TaskRead+0x34>)
 8002364:	9302      	str	r3, [sp, #8]
	flashData.cmd_flash = CMD_READ_DATA;
 8002366:	2303      	movs	r3, #3
 8002368:	f88d 300c 	strb.w	r3, [sp, #12]

	while(1){
		xQueueSend(flashQueue, &flashData, 50);
 800236c:	4d07      	ldr	r5, [pc, #28]	; (800238c <TaskRead+0x38>)
 800236e:	2400      	movs	r4, #0
 8002370:	4623      	mov	r3, r4
 8002372:	2232      	movs	r2, #50	; 0x32
 8002374:	4669      	mov	r1, sp
 8002376:	6828      	ldr	r0, [r5, #0]
 8002378:	f7fe f912 	bl	80005a0 <xQueueGenericSend>

		vTaskDelay(500);
 800237c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002380:	f7ff f856 	bl	8001430 <vTaskDelay>
	while(1){
 8002384:	e7f4      	b.n	8002370 <TaskRead+0x1c>
 8002386:	bf00      	nop
 8002388:	20004b44 	.word	0x20004b44
 800238c:	20004b28 	.word	0x20004b28

08002390 <TaskWrite>:
	}

}

void TaskWrite (void *p){
 8002390:	b500      	push	{lr}
 8002392:	b085      	sub	sp, #20

	QUEUE_DATA flashData;

	flashData.flash_addr = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
	flashData.cnt_flashb = 4;
 8002398:	2304      	movs	r3, #4
 800239a:	f88d 3004 	strb.w	r3, [sp, #4]
	flashData.flash_buf = tx_flashb;
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <TaskWrite+0x44>)
 80023a0:	9302      	str	r3, [sp, #8]
	flashData.cmd_flash = CMD_PAGE_PROGRAMM;
 80023a2:	2202      	movs	r2, #2
 80023a4:	f88d 200c 	strb.w	r2, [sp, #12]
	tx_flashb[0] = 10;
 80023a8:	220a      	movs	r2, #10
 80023aa:	701a      	strb	r2, [r3, #0]
	tx_flashb[1] = 20;
 80023ac:	2214      	movs	r2, #20
 80023ae:	705a      	strb	r2, [r3, #1]
	tx_flashb[2] = 30;
 80023b0:	221e      	movs	r2, #30
 80023b2:	709a      	strb	r2, [r3, #2]
	tx_flashb[3] = 40;
 80023b4:	2228      	movs	r2, #40	; 0x28
 80023b6:	70da      	strb	r2, [r3, #3]

	while(1){
		xQueueSend(flashQueue, &flashData, 50);
 80023b8:	4d07      	ldr	r5, [pc, #28]	; (80023d8 <TaskWrite+0x48>)
 80023ba:	2400      	movs	r4, #0
 80023bc:	4623      	mov	r3, r4
 80023be:	2232      	movs	r2, #50	; 0x32
 80023c0:	4669      	mov	r1, sp
 80023c2:	6828      	ldr	r0, [r5, #0]
 80023c4:	f7fe f8ec 	bl	80005a0 <xQueueGenericSend>

		vTaskDelay(1000);
 80023c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023cc:	f7ff f830 	bl	8001430 <vTaskDelay>
	while(1){
 80023d0:	e7f4      	b.n	80023bc <TaskWrite+0x2c>
 80023d2:	bf00      	nop
 80023d4:	20004b88 	.word	0x20004b88
 80023d8:	20004b28 	.word	0x20004b28

080023dc <TaskSpiManager>:
	}

}

void TaskSpiManager (void *p){
 80023dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e0:	b084      	sub	sp, #16

	QUEUE_DATA flashData;
	uint8_t sizeRx = sizeof(rx_flashb);

	while(1){
		xQueueReceive(flashQueue, &flashData, portMAX_DELAY);
 80023e2:	4d35      	ldr	r5, [pc, #212]	; (80024b8 <TaskSpiManager+0xdc>)
 80023e4:	f04f 34ff 	mov.w	r4, #4294967295

		switch(flashData.cmd_flash){
		case CMD_ERASE_4KB:
			wr_en = spiFlash_wrtEnbl();
 80023e8:	4e34      	ldr	r6, [pc, #208]	; (80024bc <TaskSpiManager+0xe0>)
 80023ea:	e022      	b.n	8002432 <TaskSpiManager+0x56>
 80023ec:	f000 fdde 	bl	8002fac <spiFlash_wrtEnbl>
 80023f0:	7030      	strb	r0, [r6, #0]

			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80023f2:	2005      	movs	r0, #5
 80023f4:	f000 fdba 	bl	8002f6c <spiFlash_readStatus>
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <TaskSpiManager+0xe4>)
 80023fa:	8018      	strh	r0, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80023fc:	2035      	movs	r0, #53	; 0x35
 80023fe:	f000 fdb5 	bl	8002f6c <spiFlash_readStatus>
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <TaskSpiManager+0xe8>)
 8002404:	8018      	strh	r0, [r3, #0]

			res_erase = spiFlash_eraseSector(flashData.flash_addr, flashData.cmd_flash);
 8002406:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800240a:	9800      	ldr	r0, [sp, #0]
 800240c:	f000 fde8 	bl	8002fe0 <spiFlash_eraseSector>
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <TaskSpiManager+0xec>)
 8002412:	7018      	strb	r0, [r3, #0]
			do {
				stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8002414:	f04f 0805 	mov.w	r8, #5
 8002418:	4f29      	ldr	r7, [pc, #164]	; (80024c0 <TaskSpiManager+0xe4>)
 800241a:	4640      	mov	r0, r8
 800241c:	f000 fda6 	bl	8002f6c <spiFlash_readStatus>
 8002420:	8038      	strh	r0, [r7, #0]
			} while (stat_reg1 & 0x01 );
 8002422:	f010 0f01 	tst.w	r0, #1
 8002426:	d1f8      	bne.n	800241a <TaskSpiManager+0x3e>

			break;

		}

		xSemaphoreTake(SemaphoreFlash,portMAX_DELAY);
 8002428:	4621      	mov	r1, r4
 800242a:	4b28      	ldr	r3, [pc, #160]	; (80024cc <TaskSpiManager+0xf0>)
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	f7fe facb 	bl	80009c8 <xQueueSemaphoreTake>
		xQueueReceive(flashQueue, &flashData, portMAX_DELAY);
 8002432:	4622      	mov	r2, r4
 8002434:	4669      	mov	r1, sp
 8002436:	6828      	ldr	r0, [r5, #0]
 8002438:	f7fe fa14 	bl	8000864 <xQueueReceive>
		switch(flashData.cmd_flash){
 800243c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d02a      	beq.n	800249a <TaskSpiManager+0xbe>
 8002444:	2b20      	cmp	r3, #32
 8002446:	d0d1      	beq.n	80023ec <TaskSpiManager+0x10>
 8002448:	2b02      	cmp	r3, #2
 800244a:	d1ed      	bne.n	8002428 <TaskSpiManager+0x4c>
			wr_en = spiFlash_wrtEnbl();
 800244c:	f000 fdae 	bl	8002fac <spiFlash_wrtEnbl>
 8002450:	7030      	strb	r0, [r6, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8002452:	2005      	movs	r0, #5
 8002454:	f000 fd8a 	bl	8002f6c <spiFlash_readStatus>
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <TaskSpiManager+0xe4>)
 800245a:	8018      	strh	r0, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 800245c:	2035      	movs	r0, #53	; 0x35
 800245e:	f000 fd85 	bl	8002f6c <spiFlash_readStatus>
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <TaskSpiManager+0xe8>)
 8002464:	8018      	strh	r0, [r3, #0]
			spiFlash_write(flashData.flash_addr, flashData.cnt_flashb, flashData.flash_buf, flashData.cmd_flash);
 8002466:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800246a:	9a02      	ldr	r2, [sp, #8]
 800246c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002470:	9800      	ldr	r0, [sp, #0]
 8002472:	f000 fd53 	bl	8002f1c <spiFlash_write>
				stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8002476:	f04f 0805 	mov.w	r8, #5
 800247a:	4f11      	ldr	r7, [pc, #68]	; (80024c0 <TaskSpiManager+0xe4>)
 800247c:	4640      	mov	r0, r8
 800247e:	f000 fd75 	bl	8002f6c <spiFlash_readStatus>
 8002482:	8038      	strh	r0, [r7, #0]
			} while (stat_reg1 & 0x01 );
 8002484:	f010 0f01 	tst.w	r0, #1
 8002488:	d1f8      	bne.n	800247c <TaskSpiManager+0xa0>
			spiFlash_read( flashData.flash_addr, flashData.cnt_flashb, rx_flashb, CMD_READ_DATA );
 800248a:	2303      	movs	r3, #3
 800248c:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <TaskSpiManager+0xf4>)
 800248e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002492:	9800      	ldr	r0, [sp, #0]
 8002494:	f000 fd1c 	bl	8002ed0 <spiFlash_read>
			break;
 8002498:	e7c6      	b.n	8002428 <TaskSpiManager+0x4c>
			memset(flashData.flash_buf, 0x00, sizeRx);
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	2100      	movs	r1, #0
 800249e:	9802      	ldr	r0, [sp, #8]
 80024a0:	f000 fea6 	bl	80031f0 <memset>
			spiFlash_read( flashData.flash_addr, flashData.cnt_flashb, flashData.flash_buf, flashData.cmd_flash );
 80024a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80024a8:	9a02      	ldr	r2, [sp, #8]
 80024aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80024ae:	9800      	ldr	r0, [sp, #0]
 80024b0:	f000 fd0e 	bl	8002ed0 <spiFlash_read>
			break;
 80024b4:	e7b8      	b.n	8002428 <TaskSpiManager+0x4c>
 80024b6:	bf00      	nop
 80024b8:	20004b28 	.word	0x20004b28
 80024bc:	20004bc8 	.word	0x20004bc8
 80024c0:	20004b84 	.word	0x20004b84
 80024c4:	20004b86 	.word	0x20004b86
 80024c8:	20004b40 	.word	0x20004b40
 80024cc:	200046bc 	.word	0x200046bc
 80024d0:	20004b44 	.word	0x20004b44

080024d4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80024d4:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80024d6:	6804      	ldr	r4, [r0, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	fa91 f3a1 	rbit	r3, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	f04f 0c03 	mov.w	ip, #3
 80024e6:	fa0c f303 	lsl.w	r3, ip, r3
 80024ea:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80024f2:	fab1 f181 	clz	r1, r1
 80024f6:	0049      	lsls	r1, r1, #1
 80024f8:	fa02 f101 	lsl.w	r1, r2, r1
 80024fc:	4319      	orrs	r1, r3
 80024fe:	6001      	str	r1, [r0, #0]
}
 8002500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002506:	b410      	push	{r4}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002508:	6884      	ldr	r4, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	f04f 0c03 	mov.w	ip, #3
 8002518:	fa0c f303 	lsl.w	r3, ip, r3
 800251c:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8002524:	fab1 f181 	clz	r1, r1
 8002528:	0049      	lsls	r1, r1, #1
 800252a:	fa02 f101 	lsl.w	r1, r2, r1
 800252e:	4319      	orrs	r1, r3
 8002530:	6081      	str	r1, [r0, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002538:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800253a:	68c4      	ldr	r4, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	f04f 0c03 	mov.w	ip, #3
 800254a:	fa0c f303 	lsl.w	r3, ip, r3
 800254e:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8002556:	fab1 f181 	clz	r1, r1
 800255a:	0049      	lsls	r1, r1, #1
 800255c:	fa02 f101 	lsl.w	r1, r2, r1
 8002560:	4319      	orrs	r1, r3
 8002562:	60c1      	str	r1, [r0, #12]
}
 8002564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002568:	4770      	bx	lr

0800256a <board_gpio_set_output>:
#define BOARD_BAT2_CONNECT_PIN          LL_GPIO_PIN_9
    #endif

static inline void board_gpio_set_output(GPIO_TypeDef *GPIOx, uint32_t Pin,
		uint32_t Pull, uint32_t Speed)
{
 800256a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
 8002570:	4617      	mov	r7, r2
 8002572:	461e      	mov	r6, r3
	LL_GPIO_SetPinMode(GPIOx, Pin, LL_GPIO_MODE_OUTPUT);
 8002574:	2201      	movs	r2, #1
 8002576:	f7ff ffad 	bl	80024d4 <LL_GPIO_SetPinMode>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800257a:	6863      	ldr	r3, [r4, #4]
 800257c:	ea23 0305 	bic.w	r3, r3, r5
 8002580:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOx, Pin, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOx, Pin, Pull);
 8002582:	463a      	mov	r2, r7
 8002584:	4629      	mov	r1, r5
 8002586:	4620      	mov	r0, r4
 8002588:	f7ff ffd6 	bl	8002538 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(GPIOx, Pin, Speed);
 800258c:	4632      	mov	r2, r6
 800258e:	4629      	mov	r1, r5
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff ffb8 	bl	8002506 <LL_GPIO_SetPinSpeed>
}
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002598 <vApplicationMallocFailedHook>:
     for( ;; );
 8002598:	e7fe      	b.n	8002598 <vApplicationMallocFailedHook>
	...

0800259c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &Idle_TCB;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <vApplicationGetIdleTaskMemory+0x10>)
 800259e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = Idle_Stack;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <vApplicationGetIdleTaskMemory+0x14>)
 80025a2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80025a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]
}
 80025aa:	4770      	bx	lr
 80025ac:	20004654 	.word	0x20004654
 80025b0:	20004254 	.word	0x20004254

080025b4 <vApplicationGetTimerTaskMemory>:
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <vApplicationGetTimerTaskMemory+0x10>)
 80025b6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = Timer_Stack;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <vApplicationGetTimerTaskMemory+0x14>)
 80025ba:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = configTIMER_TASK_STACK_DEPTH;
 80025bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c0:	6013      	str	r3, [r2, #0]
}
 80025c2:	4770      	bx	lr
 80025c4:	20004ac0 	.word	0x20004ac0
 80025c8:	200046c0 	.word	0x200046c0

080025cc <vApplicationStackOverflowHook>:
 80025cc:	f04f 0310 	mov.w	r3, #16
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
    configASSERT( NULL );
 80025dc:	e7fe      	b.n	80025dc <vApplicationStackOverflowHook+0x10>
	...

080025e0 <main>:


volatile uint32_t delay_shuntsNoSleep = 0;

int main(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
	clock_init();
 80025e4:	f000 f986 	bl	80028f4 <clock_init>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4986      	ldr	r1, [pc, #536]	; (8002804 <main+0x224>)
 80025ea:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025f0:	0412      	lsls	r2, r2, #16
 80025f2:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 80025f4:	4b84      	ldr	r3, [pc, #528]	; (8002808 <main+0x228>)
 80025f6:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80025f8:	60cb      	str	r3, [r1, #12]

static inline void board_gpio_init()
{
	/* DBG1 */
	board_gpio_set_output(BOARD_DEBUG1_GPIO, BOARD_DEBUG1_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80025fa:	2303      	movs	r3, #3
 80025fc:	2200      	movs	r2, #0
 80025fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002606:	f7ff ffb0 	bl	800256a <board_gpio_set_output>

	/* SPI FLASH Vdd on/off */
	board_gpio_set_output(BOARD_SPI_FLASH_GPIO, BOARD_SPI_FLASH_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800260a:	4c80      	ldr	r4, [pc, #512]	; (800280c <main+0x22c>)
 800260c:	2300      	movs	r3, #0
 800260e:	461a      	mov	r2, r3
 8002610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff ffa8 	bl	800256a <board_gpio_set_output>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800261a:	f44f 7900 	mov.w	r9, #512	; 0x200
 800261e:	f8c4 9018 	str.w	r9, [r4, #24]
    LL_GPIO_SetOutputPin(BOARD_SPI_FLASH_GPIO, BOARD_SPI_FLASH_PIN);    // off flash pwr

	/* SPI FLASH CS */
	board_gpio_set_output(BOARD_SPI_FLASH_CS_GPIO, BOARD_SPI_FLASH_CS_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002622:	2300      	movs	r3, #0
 8002624:	461a      	mov	r2, r3
 8002626:	2110      	movs	r1, #16
 8002628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262c:	f7ff ff9d 	bl	800256a <board_gpio_set_output>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002630:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8002634:	f04f 0810 	mov.w	r8, #16
 8002638:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
    LL_GPIO_ResetOutputPin(BOARD_SPI_FLASH_CS_GPIO, BOARD_SPI_FLASH_CS_PIN);    // CS = 0, while flash power is off

    //AXSEM Tx supply
	board_gpio_set_output(BOARD_RADIO_TX_GPIO, BOARD_RADIO_TX_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800263c:	4e74      	ldr	r6, [pc, #464]	; (8002810 <main+0x230>)
 800263e:	2300      	movs	r3, #0
 8002640:	461a      	mov	r2, r3
 8002642:	2108      	movs	r1, #8
 8002644:	4630      	mov	r0, r6
 8002646:	f7ff ff90 	bl	800256a <board_gpio_set_output>
 800264a:	2708      	movs	r7, #8
 800264c:	62b7      	str	r7, [r6, #40]	; 0x28
    LL_GPIO_ResetOutputPin(BOARD_RADIO_TX_GPIO, BOARD_RADIO_TX_PIN);    // off Tx power

	// AXSEM Rx supply
	board_gpio_set_output(BOARD_RADIO_RX_GPIO, BOARD_RADIO_RX_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800264e:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8002844 <main+0x264>
 8002652:	2300      	movs	r3, #0
 8002654:	461a      	mov	r2, r3
 8002656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800265a:	4650      	mov	r0, sl
 800265c:	f7ff ff85 	bl	800256a <board_gpio_set_output>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002660:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8002664:	f8ca 6018 	str.w	r6, [sl, #24]
    LL_GPIO_SetOutputPin(BOARD_RADIO_RX_GPIO, BOARD_RADIO_RX_PIN);      // off Rx power

	/* AMP1 */
	board_gpio_set_output(BOARD_AMP1_PWR_GPIO, BOARD_AMP1_PWR_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002668:	2300      	movs	r3, #0
 800266a:	461a      	mov	r2, r3
 800266c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002670:	4628      	mov	r0, r5
 8002672:	f7ff ff7a 	bl	800256a <board_gpio_set_output>

	/* TMP PWR */
	board_gpio_set_output(BOARD_TEMP_PWR_GPIO, BOARD_TEMP_PWR_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002676:	2300      	movs	r3, #0
 8002678:	461a      	mov	r2, r3
 800267a:	2102      	movs	r1, #2
 800267c:	4620      	mov	r0, r4
 800267e:	f7ff ff74 	bl	800256a <board_gpio_set_output>

	/* LED */
	board_gpio_set_output(BOARD_LED_GPIO, BOARD_LED_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002682:	2300      	movs	r3, #0
 8002684:	461a      	mov	r2, r3
 8002686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268a:	4620      	mov	r0, r4
 800268c:	f7ff ff6d 	bl	800256a <board_gpio_set_output>

	/* SELECT */
	board_gpio_set_output(BOARD_SELECT_GPIO, BOARD_SELECT_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8002690:	2300      	movs	r3, #0
 8002692:	461a      	mov	r2, r3
 8002694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002698:	4628      	mov	r0, r5
 800269a:	f7ff ff66 	bl	800256a <board_gpio_set_output>

	/* TX SENS ENABLE*/
	board_gpio_set_output(BOARD_SENS_TX_EN_GPIO, BOARD_SENS_TX_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 800269e:	2300      	movs	r3, #0
 80026a0:	461a      	mov	r2, r3
 80026a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a6:	4620      	mov	r0, r4
 80026a8:	f7ff ff5f 	bl	800256a <board_gpio_set_output>

	/* SHUNT SENS ENABLE*/
	board_gpio_set_output(BOARD_SENS_SH_EN_GPIO, BOARD_SENS_SH_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 80026ac:	2300      	movs	r3, #0
 80026ae:	461a      	mov	r2, r3
 80026b0:	4649      	mov	r1, r9
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7ff ff59 	bl	800256a <board_gpio_set_output>

    board_gpio_set_output(BOARD_SENS_SH_2_EN_GPIO, BOARD_SENS_SH_2_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 80026b8:	2300      	movs	r3, #0
 80026ba:	461a      	mov	r2, r3
 80026bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026c0:	4628      	mov	r0, r5
 80026c2:	f7ff ff52 	bl	800256a <board_gpio_set_output>

	/* S0L */
	//LL_GPIO_SetPinMode(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_MODE_ALTERNATE);
    LL_GPIO_SetPinMode(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_MODE_OUTPUT);
 80026c6:	2201      	movs	r2, #1
 80026c8:	4631      	mov	r1, r6
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff ff02 	bl	80024d4 <LL_GPIO_SetPinMode>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026d0:	6863      	ldr	r3, [r4, #4]
 80026d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026d6:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_OUTPUT_PUSHPULL);
	//LL_GPIO_SetAFPin_8_15(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_AF_14);
	LL_GPIO_SetPinPull(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_PULL_NO);
 80026d8:	2200      	movs	r2, #0
 80026da:	4631      	mov	r1, r6
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff ff2b 	bl	8002538 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_SPEED_FREQ_LOW);
 80026e2:	2200      	movs	r2, #0
 80026e4:	4631      	mov	r1, r6
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff ff0d 	bl	8002506 <LL_GPIO_SetPinSpeed>

	/* S0H */
	//LL_GPIO_SetPinMode(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_MODE_ALTERNATE);
    LL_GPIO_SetPinMode(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_MODE_OUTPUT);
 80026ec:	2201      	movs	r2, #1
 80026ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff feee 	bl	80024d4 <LL_GPIO_SetPinMode>
 80026f8:	6863      	ldr	r3, [r4, #4]
 80026fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026fe:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_OUTPUT_PUSHPULL);
	//LL_GPIO_SetAFPin_8_15(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_AF_14);
	LL_GPIO_SetPinPull(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_PULL_NO);
 8002700:	2200      	movs	r2, #0
 8002702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002706:	4620      	mov	r0, r4
 8002708:	f7ff ff16 	bl	8002538 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_SPEED_FREQ_LOW);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff fef7 	bl	8002506 <LL_GPIO_SetPinSpeed>

    LL_GPIO_SetPinMode(BOARD_ENCOUNT_GPIO, BOARD_ENCOUNT_PIN, LL_GPIO_MODE_INPUT);
 8002718:	2200      	movs	r2, #0
 800271a:	4639      	mov	r1, r7
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff fed9 	bl	80024d4 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(BOARD_ENCOUNT_GPIO, BOARD_ENCOUNT_PIN, LL_GPIO_PULL_NO);
 8002722:	2200      	movs	r2, #0
 8002724:	4639      	mov	r1, r7
 8002726:	4620      	mov	r0, r4
 8002728:	f7ff ff06 	bl	8002538 <LL_GPIO_SetPinPull>

    LL_GPIO_SetPinMode(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_MODE_OUTPUT);
 800272c:	2201      	movs	r2, #1
 800272e:	2140      	movs	r1, #64	; 0x40
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff fecf 	bl	80024d4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_PULL_NO);
 8002736:	2200      	movs	r2, #0
 8002738:	2140      	movs	r1, #64	; 0x40
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff fefc 	bl	8002538 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_SPEED_FREQ_LOW);
 8002740:	2200      	movs	r2, #0
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4620      	mov	r0, r4
 8002746:	f7ff fede 	bl	8002506 <LL_GPIO_SetPinSpeed>
  WRITE_REG(GPIOx->BRR, PinMask);
 800274a:	2340      	movs	r3, #64	; 0x40
 800274c:	62a3      	str	r3, [r4, #40]	; 0x28

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

	board_gpio_init();				/* Initialize board IO */

	SpiInit();
 800274e:	f000 f8f3 	bl	8002938 <SpiInit>
	spiFlash_init();
 8002752:	f000 fad5 	bl	8002d00 <spiFlash_init>
	spiFlash_powerOn();
 8002756:	f000 fb63 	bl	8002e20 <spiFlash_powerOn>


	xTaskCreate(TaskErase, "ERASE_task", 200, (void*) 0, tskIDLE_PRIORITY+1, &myTaskEraseHandle);	//создание задачи 1
 800275a:	4d2e      	ldr	r5, [pc, #184]	; (8002814 <main+0x234>)
 800275c:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <main+0x238>)
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2401      	movs	r4, #1
 8002762:	9400      	str	r4, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	22c8      	movs	r2, #200	; 0xc8
 8002768:	4629      	mov	r1, r5
 800276a:	482c      	ldr	r0, [pc, #176]	; (800281c <main+0x23c>)
 800276c:	f7fe fc3b 	bl	8000fe6 <xTaskCreate>
	xTaskCreate(TaskRead, "READ_task", 200, (void*) 0, tskIDLE_PRIORITY+1, &myTaskReadHandle);	//создание задачи 2
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <main+0x240>)
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9400      	str	r4, [sp, #0]
 8002776:	2300      	movs	r3, #0
 8002778:	22c8      	movs	r2, #200	; 0xc8
 800277a:	f105 010c 	add.w	r1, r5, #12
 800277e:	4829      	ldr	r0, [pc, #164]	; (8002824 <main+0x244>)
 8002780:	f7fe fc31 	bl	8000fe6 <xTaskCreate>
	xTaskCreate(TaskWrite, "WRITE_task", 200, (void*) 0, tskIDLE_PRIORITY+1, &myTaskWriteHandle);	//создание задачи 3
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <main+0x248>)
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	9400      	str	r4, [sp, #0]
 800278a:	2300      	movs	r3, #0
 800278c:	22c8      	movs	r2, #200	; 0xc8
 800278e:	f105 0118 	add.w	r1, r5, #24
 8002792:	4826      	ldr	r0, [pc, #152]	; (800282c <main+0x24c>)
 8002794:	f7fe fc27 	bl	8000fe6 <xTaskCreate>
	xTaskCreate(TaskSpiManager, "SPIMANAGER_task", 200, (void*) 0, tskIDLE_PRIORITY+1, &mySpiManagerHandle); //создание задачи 4
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <main+0x250>)
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	9400      	str	r4, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	22c8      	movs	r2, #200	; 0xc8
 80027a2:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80027a6:	4823      	ldr	r0, [pc, #140]	; (8002834 <main+0x254>)
 80027a8:	f7fe fc1d 	bl	8000fe6 <xTaskCreate>
	//xTaskCreate(TaskSpiRW, "task5", 200,(void*) 0, tskIDLE_PRIORITY+2, &mySpiSendRecieveHandle); //создание задачи 5

	flashQueue= xQueueCreate(10, sizeof(QUEUE_DATA));
 80027ac:	2200      	movs	r2, #0
 80027ae:	4641      	mov	r1, r8
 80027b0:	200a      	movs	r0, #10
 80027b2:	f7fd fec5 	bl	8000540 <xQueueGenericCreate>
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <main+0x258>)
 80027b8:	6018      	str	r0, [r3, #0]

	SemaphoreFlash=xSemaphoreCreateBinary();
 80027ba:	2203      	movs	r2, #3
 80027bc:	2100      	movs	r1, #0
 80027be:	4620      	mov	r0, r4
 80027c0:	f7fd febe 	bl	8000540 <xQueueGenericCreate>
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <main+0x25c>)
 80027c6:	6018      	str	r0, [r3, #0]

	vTaskStartScheduler();	//запуск диспетчера задач
 80027c8:	f7fe fc40 	bl	800104c <vTaskStartScheduler>
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 80027cc:	2300      	movs	r3, #0
 80027ce:	f383 8813 	msr	FAULTMASK, r3
	Note: IWDG _must_ be enabled in option bits for production.
	*/
static inline void iwdg_set_2s_reload()
{
	/* enable write access */
	IWDG->KR = 0xCCCC;
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <main+0x260>)
 80027d4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80027d8:	601a      	str	r2, [r3, #0]
	IWDG->KR = 0x5555;
 80027da:	f245 5255 	movw	r2, #21845	; 0x5555
 80027de:	601a      	str	r2, [r3, #0]

    IWDG->RLR = 0xFFF;
 80027e0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80027e4:	609a      	str	r2, [r3, #8]

	/* prescaler = 16, timeout = 2.048sec */
	IWDG->PR = IWDG_PR_PR_1;
 80027e6:	2202      	movs	r2, #2
 80027e8:	605a      	str	r2, [r3, #4]

	/* wait for registers to be updated */
	while (IWDG->SR != 0) ;
 80027ea:	461a      	mov	r2, r3
 80027ec:	68d3      	ldr	r3, [r2, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1fc      	bne.n	80027ec <main+0x20c>

	/* reload counter */
	IWDG->KR = 0xAAAA;
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <main+0x260>)
 80027f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80027f8:	601a      	str	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <main+0x22c>)
 80027fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002800:	619a      	str	r2, [r3, #24]
}

void main_loop()
{

	while (1) {
 8002802:	e7fe      	b.n	8002802 <main+0x222>
 8002804:	e000ed00 	.word	0xe000ed00
 8002808:	05fa0300 	.word	0x05fa0300
 800280c:	48000400 	.word	0x48000400
 8002810:	48001c00 	.word	0x48001c00
 8002814:	08003218 	.word	0x08003218
 8002818:	20004b34 	.word	0x20004b34
 800281c:	08002329 	.word	0x08002329
 8002820:	20004b38 	.word	0x20004b38
 8002824:	08002355 	.word	0x08002355
 8002828:	20004b3c 	.word	0x20004b3c
 800282c:	08002391 	.word	0x08002391
 8002830:	20004b30 	.word	0x20004b30
 8002834:	080023dd 	.word	0x080023dd
 8002838:	20004b28 	.word	0x20004b28
 800283c:	200046bc 	.word	0x200046bc
 8002840:	40003000 	.word	0x40003000
 8002844:	48000800 	.word	0x48000800

08002848 <hse_init>:
    NVIC_EnableIRQ(SysTick_IRQn);
}

//#define MSI48_to_HSE48
void hse_init()
{
 8002848:	b538      	push	{r3, r4, r5, lr}
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <hse_init+0x9c>)
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	f023 0307 	bic.w	r3, r3, #7
 8002852:	f043 0302 	orr.w	r3, r3, #2
 8002856:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
	if (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800285e:	2b02      	cmp	r3, #2
 8002860:	d000      	beq.n	8002864 <hse_init+0x1c>
		for (;;);
 8002862:	e7fe      	b.n	8002862 <hse_init+0x1a>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002864:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <hse_init+0xa0>)
 8002866:	6813      	ldr	r3, [r2, #0]
 8002868:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800286c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002870:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002872:	f502 32d0 	add.w	r2, r2, #106496	; 0x1a000
 8002876:	6813      	ldr	r3, [r2, #0]
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002888:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 800288a:	6813      	ldr	r3, [r2, #0]
 800288c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002890:	d0fb      	beq.n	800288a <hse_init+0x42>
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <hse_init+0xa4>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800289a:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	f022 0203 	bic.w	r2, r2, #3
 80028a2:	f042 0202 	orr.w	r2, r2, #2
 80028a6:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028ae:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028b6:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 80028be:	609a      	str	r2, [r3, #8]
	LL_Init1msTick(freq);
 80028c0:	4d0b      	ldr	r5, [pc, #44]	; (80028f0 <hse_init+0xa8>)
 80028c2:	4628      	mov	r0, r5
 80028c4:	f000 fc22 	bl	800310c <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80028c8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 80028cc:	6923      	ldr	r3, [r4, #16]
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6123      	str	r3, [r4, #16]
	LL_SetSystemCoreClock(freq);
 80028d4:	4628      	mov	r0, r5
 80028d6:	f000 fc29 	bl	800312c <LL_SetSystemCoreClock>
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80028da:	6923      	ldr	r3, [r4, #16]
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6123      	str	r3, [r4, #16]
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

    systick_init( 48000000 );
#endif
}
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40007000 	.word	0x40007000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	02dc6c00 	.word	0x02dc6c00

080028f4 <clock_init>:

void clock_init()
{
 80028f4:	b500      	push	{lr}
 80028f6:	b083      	sub	sp, #12
    //clock_4msi_to_48msi();
	hse_init();
 80028f8:	f7ff ffa6 	bl	8002848 <hse_init>
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <clock_init+0x40>)
 80028fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002908:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800290a:	9a01      	ldr	r2, [sp, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800290c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800290e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002912:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002914:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002916:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800291a:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 800291c:	9a00      	ldr	r2, [sp, #0]
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002924:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	f042 0208 	orr.w	r2, r2, #8
 800292c:	601a      	str	r2, [r3, #0]
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

	/* Ensure that MSI is wake-up system clock */
	LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);
    LL_RCC_MSI_EnableRangeSelection();
}
 800292e:	b003      	add	sp, #12
 8002930:	f85d fb04 	ldr.w	pc, [sp], #4
 8002934:	40021000 	.word	0x40021000

08002938 <SpiInit>:
	LL_GPIO_SetAFPin_0_7(SPI_MOSI_GPIO, 1 << SPI_MOSI_PIN, SPI_MOSI_AF_0_7);
	LL_GPIO_SetPinOutputType(SPI_MOSI_GPIO, 1 << SPI_MOSI_PIN, LL_GPIO_OUTPUT_PUSHPULL);
}

void SpiInit()
{
 8002938:	b510      	push	{r4, lr}
 800293a:	b082      	sub	sp, #8
	SpiActive = 0;
 800293c:	4bb1      	ldr	r3, [pc, #708]	; (8002c04 <SpiInit+0x2cc>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002946:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	2320      	movs	r3, #32
 800294a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	2320      	movs	r3, #32
 8002960:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2202      	movs	r2, #2
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	430b      	orrs	r3, r1
 8002972:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002976:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002978:	6891      	ldr	r1, [r2, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	2320      	movs	r3, #32
 800297c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	2320      	movs	r3, #32
 8002992:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2202      	movs	r2, #2
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	430b      	orrs	r3, r1
 80029a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029a8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029aa:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	2320      	movs	r3, #32
 80029ae:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2103      	movs	r1, #3
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	2320      	movs	r3, #32
 80029c4:	fa93 f1a3 	rbit	r1, r3
 80029c8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80029cc:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80029ce:	6a0a      	ldr	r2, [r1, #32]
 80029d0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	210f      	movs	r1, #15
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	2220      	movs	r2, #32
 80029e6:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80029ea:	fab2 f282 	clz	r2, r2
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	2105      	movs	r1, #5
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	431a      	orrs	r2, r3
 80029f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80029fc:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	f022 0220 	bic.w	r2, r2, #32
 8002a04:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002a06:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	2340      	movs	r3, #64	; 0x40
 8002a0a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	2340      	movs	r3, #64	; 0x40
 8002a20:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	430b      	orrs	r3, r1
 8002a32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002a36:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002a38:	6891      	ldr	r1, [r2, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	2340      	movs	r3, #64	; 0x40
 8002a3c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	2340      	movs	r3, #64	; 0x40
 8002a52:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	430b      	orrs	r3, r1
 8002a64:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002a68:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002a6a:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2103      	movs	r1, #3
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	2340      	movs	r3, #64	; 0x40
 8002a84:	fa93 f1a3 	rbit	r1, r3
 8002a88:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002a8c:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a8e:	6a0a      	ldr	r2, [r1, #32]
 8002a90:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002aaa:	fab2 f282 	clz	r2, r2
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	2105      	movs	r1, #5
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002abc:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ac6:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2202      	movs	r2, #2
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	430b      	orrs	r3, r1
 8002af2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002af6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002af8:	6891      	ldr	r1, [r2, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	430b      	orrs	r3, r1
 8002b24:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b28:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002b2a:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2103      	movs	r1, #3
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	fa93 f1a3 	rbit	r1, r3
 8002b48:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002b4c:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002b4e:	6a0a      	ldr	r2, [r1, #32]
 8002b50:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	2105      	movs	r1, #5
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	431a      	orrs	r2, r3
 8002b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b7c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b84:	605a      	str	r2, [r3, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b86:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002b8a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002b8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b94:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b9c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002b9e:	9a01      	ldr	r2, [sp, #4]
    spi_gpio_init();

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);

	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST;//reset RCC_SPI(запись единицы)
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
	RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI1RST);//don't reset RCC_SPI(запись нуля)
 8002ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40

	/* SPI1 parameter configuration*/
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002bb0:	4915      	ldr	r1, [pc, #84]	; (8002c08 <SpiInit+0x2d0>)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	600b      	str	r3, [r1, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002bb6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bba:	604a      	str	r2, [r1, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002bbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bc0:	608a      	str	r2, [r1, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002bc2:	60cb      	str	r3, [r1, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8002bc4:	610b      	str	r3, [r1, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bca:	614a      	str	r2, [r1, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8002bcc:	2220      	movs	r2, #32
 8002bce:	618a      	str	r2, [r1, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002bd0:	61cb      	str	r3, [r1, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002bd2:	620b      	str	r3, [r1, #32]
	SPI_InitStruct.CRCPoly = 7;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	624b      	str	r3, [r1, #36]	; 0x24
	LL_SPI_Init(_SPI, &SPI_InitStruct);
 8002bd8:	4c0c      	ldr	r4, [pc, #48]	; (8002c0c <SpiInit+0x2d4>)
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f000 fa62 	bl	80030a4 <LL_SPI_Init>

	_SPI->CR2 |= SPI_CR2_FRXTH;
 8002be0:	6863      	ldr	r3, [r4, #4]
 8002be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be6:	6063      	str	r3, [r4, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bee:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8002bf0:	6863      	ldr	r3, [r4, #4]
 8002bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf6:	6063      	str	r3, [r4, #4]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <SpiInit+0x2d8>)
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	605a      	str	r2, [r3, #4]

#ifdef SPI_DMA
    spi_rx_dma_init();
    spi_tx_dma_init();
#endif
}
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd10      	pop	{r4, pc}
 8002c02:	bf00      	nop
 8002c04:	20004bf4 	.word	0x20004bf4
 8002c08:	20004bcc 	.word	0x20004bcc
 8002c0c:	40013000 	.word	0x40013000
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <SpiSendRecv>:

	SpiActive = 0;
}

void SpiSendRecv(uint8_t *buf_tx, uint8_t *buf_rx, uint16_t len)
{
 8002c14:	b410      	push	{r4}
	SpiActive = 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	4c0e      	ldr	r4, [pc, #56]	; (8002c54 <SpiSendRecv+0x40>)
 8002c1a:	7023      	strb	r3, [r4, #0]
//	xSemaphoreTake(SemaphoreFlash,portMAX_DELAY);

	//xSemaphoreTakeFromISR(SemaphoreFlash,pdTRUE);

#ifndef SPI_DMA
	pBufTx = buf_tx;
 8002c1c:	4c0e      	ldr	r4, [pc, #56]	; (8002c58 <SpiSendRecv+0x44>)
 8002c1e:	6020      	str	r0, [r4, #0]
	pBufRx = buf_rx;
 8002c20:	4c0e      	ldr	r4, [pc, #56]	; (8002c5c <SpiSendRecv+0x48>)
 8002c22:	6021      	str	r1, [r4, #0]
	usBufPosRx = 0;
 8002c24:	490e      	ldr	r1, [pc, #56]	; (8002c60 <SpiSendRecv+0x4c>)
 8002c26:	f04f 0c00 	mov.w	ip, #0
 8002c2a:	f8a1 c000 	strh.w	ip, [r1]
	usBufPosTx = 1;
 8002c2e:	490d      	ldr	r1, [pc, #52]	; (8002c64 <SpiSendRecv+0x50>)
 8002c30:	800b      	strh	r3, [r1, #0]
	usBufCnt = len;
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <SpiSendRecv+0x54>)
 8002c34:	801a      	strh	r2, [r3, #0]

	while (!(_SPI->SR & SPI_SR_TXE)); //ожидание установки 1 в TXE(окончание передачи)
 8002c36:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <SpiSendRecv+0x58>)
 8002c38:	6893      	ldr	r3, [r2, #8]
 8002c3a:	f013 0f02 	tst.w	r3, #2
 8002c3e:	d0fb      	beq.n	8002c38 <SpiSendRecv+0x24>
	if (pBufTx)
 8002c40:	b128      	cbz	r0, 8002c4e <SpiSendRecv+0x3a>
		*(uint8_t*)&_SPI->DR = *pBufTx;
 8002c42:	7802      	ldrb	r2, [r0, #0]
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <SpiSendRecv+0x58>)
 8002c46:	731a      	strb	r2, [r3, #12]
    if ( buf_tx )
        spi_tx_dma_start(buf_tx, len);
    else
        spi_tx_null_dma_start(spi_txEmptyBuf, len);
#endif
}
 8002c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c4c:	4770      	bx	lr
		*(uint8_t*)&_SPI->DR = SPI_EMPTY_BYTE;
 8002c4e:	22ff      	movs	r2, #255	; 0xff
 8002c50:	e7f8      	b.n	8002c44 <SpiSendRecv+0x30>
 8002c52:	bf00      	nop
 8002c54:	20004bf4 	.word	0x20004bf4
 8002c58:	20004bfc 	.word	0x20004bfc
 8002c5c:	20004bf8 	.word	0x20004bf8
 8002c60:	20004c02 	.word	0x20004c02
 8002c64:	20004c04 	.word	0x20004c04
 8002c68:	20004c00 	.word	0x20004c00
 8002c6c:	40013000 	.word	0x40013000

08002c70 <SPI1_IRQHandler>:
	return !SpiActive;
}

#ifndef SPI_DMA
void SPI1_IRQHandler(void)
{
 8002c70:	b500      	push	{lr}
 8002c72:	b083      	sub	sp, #12
	{
		volatile uint8_t ucByte = *(uint8_t*)&_SPI->DR;
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <SPI1_IRQHandler+0x6c>)
 8002c76:	7b1b      	ldrb	r3, [r3, #12]
 8002c78:	f88d 3007 	strb.w	r3, [sp, #7]

		if (pBufRx)
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <SPI1_IRQHandler+0x70>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	b123      	cbz	r3, 8002c8c <SPI1_IRQHandler+0x1c>
			pBufRx[usBufPosRx] = ucByte;
 8002c82:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002c86:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <SPI1_IRQHandler+0x74>)
 8002c88:	8812      	ldrh	r2, [r2, #0]
 8002c8a:	5499      	strb	r1, [r3, r2]
	}

	{
		if (usBufPosTx < usBufCnt)
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <SPI1_IRQHandler+0x78>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	4a16      	ldr	r2, [pc, #88]	; (8002cec <SPI1_IRQHandler+0x7c>)
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d909      	bls.n	8002cac <SPI1_IRQHandler+0x3c>
		{
			if (pBufTx)
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <SPI1_IRQHandler+0x80>)
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	b192      	cbz	r2, 8002cc4 <SPI1_IRQHandler+0x54>
				*(uint8_t*)&_SPI->DR = pBufTx[usBufPosTx];
 8002c9e:	5cd2      	ldrb	r2, [r2, r3]
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <SPI1_IRQHandler+0x6c>)
 8002ca2:	731a      	strb	r2, [r3, #12]
			else
				*(uint8_t*)&_SPI->DR = SPI_EMPTY_BYTE;

			usBufPosTx++;
 8002ca4:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <SPI1_IRQHandler+0x78>)
 8002ca6:	8813      	ldrh	r3, [r2, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	8013      	strh	r3, [r2, #0]
		{
			SPI_FLASH_CS_HIGH();
		}*/
	}

	if (++usBufPosRx >= usBufCnt)
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <SPI1_IRQHandler+0x74>)
 8002cae:	8813      	ldrh	r3, [r2, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8013      	strh	r3, [r2, #0]
 8002cb6:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <SPI1_IRQHandler+0x7c>)
 8002cb8:	8812      	ldrh	r2, [r2, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d904      	bls.n	8002cc8 <SPI1_IRQHandler+0x58>
		SpiActive = 0;
		err=xSemaphoreGiveFromISR(SemaphoreFlash, NULL);
	//	SPI_FLASH_CS_HIGH();
		//SPI_ON_READY_ISR_CB(0);
	}
}
 8002cbe:	b003      	add	sp, #12
 8002cc0:	f85d fb04 	ldr.w	pc, [sp], #4
				*(uint8_t*)&_SPI->DR = SPI_EMPTY_BYTE;
 8002cc4:	22ff      	movs	r2, #255	; 0xff
 8002cc6:	e7eb      	b.n	8002ca0 <SPI1_IRQHandler+0x30>
		SpiActive = 0;
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <SPI1_IRQHandler+0x84>)
 8002ccc:	7019      	strb	r1, [r3, #0]
		err=xSemaphoreGiveFromISR(SemaphoreFlash, NULL);
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <SPI1_IRQHandler+0x88>)
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	f7fd fd55 	bl	8000780 <xQueueGiveFromISR>
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <SPI1_IRQHandler+0x8c>)
 8002cd8:	6018      	str	r0, [r3, #0]
}
 8002cda:	e7f0      	b.n	8002cbe <SPI1_IRQHandler+0x4e>
 8002cdc:	40013000 	.word	0x40013000
 8002ce0:	20004bf8 	.word	0x20004bf8
 8002ce4:	20004c02 	.word	0x20004c02
 8002ce8:	20004c04 	.word	0x20004c04
 8002cec:	20004c00 	.word	0x20004c00
 8002cf0:	20004bfc 	.word	0x20004bfc
 8002cf4:	20004bf4 	.word	0x20004bf4
 8002cf8:	200046bc 	.word	0x200046bc
 8002cfc:	20000008 	.word	0x20000008

08002d00 <spiFlash_init>:
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d00:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <spiFlash_init+0x118>)
 8002d02:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d08:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d20:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	430b      	orrs	r3, r1
 8002d32:	4a39      	ldr	r2, [pc, #228]	; (8002e18 <spiFlash_init+0x118>)
 8002d34:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002d36:	6853      	ldr	r3, [r2, #4]
 8002d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d3c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d3e:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d44:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2103      	movs	r1, #3
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5c:	fa93 f1a3 	rbit	r1, r3
 8002d60:	492d      	ldr	r1, [pc, #180]	; (8002e18 <spiFlash_init+0x118>)
 8002d62:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002d64:	688a      	ldr	r2, [r1, #8]
 8002d66:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2103      	movs	r1, #3
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d7e:	fa91 f2a1 	rbit	r2, r1
 8002d82:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <spiFlash_init+0x118>)
 8002d84:	6093      	str	r3, [r2, #8]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002d86:	6191      	str	r1, [r2, #24]
static inline void supply_flashOff()
{
  //  LL_GPIO_SetOutputPin(BOARD_SPI_FLASH_GPIO, BOARD_SPI_FLASH_PIN);
    LL_GPIO_SetOutputPin(BOARD_RADIO_RX_GPIO, BOARD_RADIO_RX_PIN);

    flash_supplyOn = 0;
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <spiFlash_init+0x11c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	2310      	movs	r3, #16
 8002d96:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	2310      	movs	r3, #16
 8002dac:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2201      	movs	r2, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002dc2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dc4:	6853      	ldr	r3, [r2, #4]
 8002dc6:	f023 0310 	bic.w	r3, r3, #16
 8002dca:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002dcc:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	2310      	movs	r3, #16
 8002dd0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2103      	movs	r1, #3
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	2310      	movs	r3, #16
 8002de6:	fa93 f1a3 	rbit	r1, r3
 8002dea:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002dee:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002df0:	688a      	ldr	r2, [r1, #8]
 8002df2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2103      	movs	r1, #3
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	2110      	movs	r1, #16
 8002e08:	fa91 f2a1 	rbit	r2, r1
 8002e0c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e10:	6093      	str	r3, [r2, #8]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002e12:	6291      	str	r1, [r2, #40]	; 0x28
	SPI_FLASH_PWR_OUT();//настройка на выход ножки PB9
	SPI_FLASH_PWR_OFF();//запись 1 в PB9(выключение)

	SPI_FLASH_CS_OUT();
    SPI_FLASH_CS_LOW();
}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	48000800 	.word	0x48000800
 8002e1c:	20004b2c 	.word	0x20004b2c

08002e20 <spiFlash_powerOn>:
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <spiFlash_powerOn+0xa4>)
 8002e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
    flash_supplyOn = 1;
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <spiFlash_powerOn+0xa8>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	2310      	movs	r3, #16
 8002e36:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	4093      	lsls	r3, r2
 8002e40:	2203      	movs	r2, #3
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002e50:	fab3 f383 	clz	r3, r3
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2201      	movs	r2, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e62:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e64:	6853      	ldr	r3, [r2, #4]
 8002e66:	f023 0310 	bic.w	r3, r3, #16
 8002e6a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e6c:	68d2      	ldr	r2, [r2, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	2310      	movs	r3, #16
 8002e70:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2103      	movs	r1, #3
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	2310      	movs	r3, #16
 8002e86:	fa93 f1a3 	rbit	r1, r3
 8002e8a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002e8e:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002e90:	688a      	ldr	r2, [r1, #8]
 8002e92:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	ea22 0303 	bic.w	r3, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	fa91 f2a1 	rbit	r2, r1
 8002eac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002eb0:	6093      	str	r3, [r2, #8]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002eb2:	6191      	str	r1, [r2, #24]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <spiFlash_powerOn+0xac>)
 8002eb6:	2230      	movs	r2, #48	; 0x30
 8002eb8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	605a      	str	r2, [r3, #4]
	SPI_FLASH_CS_OUT();
	SPI_FLASH_CS_HIGH();

	SPI_IRQ_ENABLE();
	//SpiManagerPowerOn(SPI_MANAGER_ID_MEM);
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	48000800 	.word	0x48000800
 8002ec8:	20004b2c 	.word	0x20004b2c
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <spiFlash_read>:

/********************************************************************/
//        spiFlash_read - ������ ������ �� ���������� ������
/********************************************************************/
void spiFlash_read( uint32_t dwAddrRead, uint16_t bCnt, uint8_t* pBuf, uint8_t cmd )
{
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	460d      	mov	r5, r1
 8002ed4:	4616      	mov	r6, r2

	buf_txrx[0] = cmd;
 8002ed6:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <spiFlash_read+0x3c>)
 8002ed8:	7023      	strb	r3, [r4, #0]
	buf_txrx[1] = (uint8_t)(dwAddrRead >> 16);
 8002eda:	0c03      	lsrs	r3, r0, #16
 8002edc:	7063      	strb	r3, [r4, #1]
	buf_txrx[2] = (uint8_t)(dwAddrRead >> 8);
 8002ede:	0a03      	lsrs	r3, r0, #8
 8002ee0:	70a3      	strb	r3, [r4, #2]
	buf_txrx[3] = (uint8_t)(dwAddrRead >> 0);
 8002ee2:	70e0      	strb	r0, [r4, #3]
	a_buf_tx[0] = buf_txrx;
 8002ee4:	480a      	ldr	r0, [pc, #40]	; (8002f10 <spiFlash_read+0x40>)
 8002ee6:	6004      	str	r4, [r0, #0]
	a_buf_rx[0] = NULL;
 8002ee8:	490a      	ldr	r1, [pc, #40]	; (8002f14 <spiFlash_read+0x44>)
 8002eea:	2300      	movs	r3, #0
 8002eec:	600b      	str	r3, [r1, #0]
	a_buf_len[0] = 4;
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <spiFlash_read+0x48>)
 8002ef0:	2404      	movs	r4, #4
 8002ef2:	8014      	strh	r4, [r2, #0]

	a_buf_tx[1] = NULL;
 8002ef4:	6043      	str	r3, [r0, #4]
	a_buf_rx[1] = pBuf;
 8002ef6:	604e      	str	r6, [r1, #4]
	a_buf_len[1] = bCnt;
 8002ef8:	8055      	strh	r5, [r2, #2]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002efa:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8002efe:	2510      	movs	r5, #16
 8002f00:	62a5      	str	r5, [r4, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SPI_RWFX(a_buf_tx, a_buf_rx, a_buf_len, 2);
 8002f02:	2302      	movs	r3, #2
 8002f04:	f000 f88c 	bl	8003020 <SpiManagerSendRecvFlashX>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f08:	61a5      	str	r5, [r4, #24]

	SPI_FLASH_CS_HIGH();


}
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	20004c1c 	.word	0x20004c1c
 8002f10:	20004c14 	.word	0x20004c14
 8002f14:	20004c0c 	.word	0x20004c0c
 8002f18:	20004c08 	.word	0x20004c08

08002f1c <spiFlash_write>:
/********************************************************************/
//        spiFlash_write - ������ ������ �� ���������� ������
/********************************************************************/
static volatile uint32_t ulAgain = 0;
uint8_t spiFlash_write( uint32_t dwAddrWrite, uint16_t bCnt, uint8_t* pBuf, uint8_t cmd )
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	460d      	mov	r5, r1
 8002f20:	4616      	mov	r6, r2
	uint8_t res = FLASH_RES_ERROR_AGAIN;
	uint16_t i;

	buf_txrx[0] = cmd;
 8002f22:	4c0e      	ldr	r4, [pc, #56]	; (8002f5c <spiFlash_write+0x40>)
 8002f24:	7023      	strb	r3, [r4, #0]
	buf_txrx[1] = (uint8_t)(dwAddrWrite >> 16);
 8002f26:	0c03      	lsrs	r3, r0, #16
 8002f28:	7063      	strb	r3, [r4, #1]
	buf_txrx[2] = (uint8_t)(dwAddrWrite >> 8);
 8002f2a:	0a03      	lsrs	r3, r0, #8
 8002f2c:	70a3      	strb	r3, [r4, #2]
	buf_txrx[3] = (uint8_t)(dwAddrWrite >> 0);
 8002f2e:	70e0      	strb	r0, [r4, #3]
	a_buf_tx[0] = buf_txrx;
 8002f30:	480b      	ldr	r0, [pc, #44]	; (8002f60 <spiFlash_write+0x44>)
 8002f32:	6004      	str	r4, [r0, #0]
	a_buf_rx[0] = NULL;
 8002f34:	490b      	ldr	r1, [pc, #44]	; (8002f64 <spiFlash_write+0x48>)
 8002f36:	2400      	movs	r4, #0
 8002f38:	600c      	str	r4, [r1, #0]
	a_buf_len[0] = 4;
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <spiFlash_write+0x4c>)
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	8013      	strh	r3, [r2, #0]

	a_buf_tx[1] = pBuf;
 8002f40:	6046      	str	r6, [r0, #4]
	a_buf_rx[1] = NULL;
 8002f42:	604c      	str	r4, [r1, #4]
	a_buf_len[1] = bCnt;
 8002f44:	8055      	strh	r5, [r2, #2]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002f46:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8002f4a:	2610      	movs	r6, #16
 8002f4c:	62ae      	str	r6, [r5, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SPI_RWFX(a_buf_tx, a_buf_rx, a_buf_len, 2);
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f000 f866 	bl	8003020 <SpiManagerSendRecvFlashX>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f54:	61ae      	str	r6, [r5, #24]

	SPI_FLASH_CS_HIGH();
	res = FLASH_RES_OK;

	return res;
}
 8002f56:	4620      	mov	r0, r4
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20004c1c 	.word	0x20004c1c
 8002f60:	20004c14 	.word	0x20004c14
 8002f64:	20004c0c 	.word	0x20004c0c
 8002f68:	20004c08 	.word	0x20004c08

08002f6c <spiFlash_readStatus>:

/********************************************************************/
//        s25fl_readStatus - ������ �������� �������
/********************************************************************/
uint16_t spiFlash_readStatus( uint8_t cmd )
{
 8002f6c:	b508      	push	{r3, lr}
	uint16_t bRegStatus;

	spi_buf_tx[0] = cmd;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <spiFlash_readStatus+0x34>)
 8002f70:	7018      	strb	r0, [r3, #0]
	spi_buf_tx[1] = 0xff;
 8002f72:	22ff      	movs	r2, #255	; 0xff
 8002f74:	705a      	strb	r2, [r3, #1]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002f76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002f7a:	2110      	movs	r1, #16
 8002f7c:	6291      	str	r1, [r2, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SpiSendRecv(spi_buf_tx, spi_buf_rx, 2);
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <spiFlash_readStatus+0x38>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fe46 	bl	8002c14 <SpiSendRecv>
	while(SpiActive);
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <spiFlash_readStatus+0x3c>)
 8002f8a:	7813      	ldrb	r3, [r2, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1fc      	bne.n	8002f8a <spiFlash_readStatus+0x1e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f94:	2210      	movs	r2, #16
 8002f96:	619a      	str	r2, [r3, #24]
	SPI_FLASH_CS_HIGH();
	bRegStatus = spi_buf_rx[1];

	return bRegStatus;
}
 8002f98:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <spiFlash_readStatus+0x38>)
 8002f9a:	7858      	ldrb	r0, [r3, #1]
 8002f9c:	bd08      	pop	{r3, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20004c44 	.word	0x20004c44
 8002fa4:	20004c24 	.word	0x20004c24
 8002fa8:	20004bf4 	.word	0x20004bf4

08002fac <spiFlash_wrtEnbl>:

uint8_t spiFlash_wrtEnbl()
{
 8002fac:	b508      	push	{r3, lr}
	uint8_t res = FLASH_RES_ERROR_AGAIN;

	buf_txrx[0] = CMD_WRITE_ENABLE;
 8002fae:	480a      	ldr	r0, [pc, #40]	; (8002fd8 <spiFlash_wrtEnbl+0x2c>)
 8002fb0:	2306      	movs	r3, #6
 8002fb2:	7003      	strb	r3, [r0, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fb8:	2210      	movs	r2, #16
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SpiSendRecv(buf_txrx, NULL, 1);
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	f7ff fe28 	bl	8002c14 <SpiSendRecv>
	while(SpiActive);
 8002fc4:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <spiFlash_wrtEnbl+0x30>)
 8002fc6:	7813      	ldrb	r3, [r2, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1fc      	bne.n	8002fc6 <spiFlash_wrtEnbl+0x1a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002fcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	619a      	str	r2, [r3, #24]
	SPI_FLASH_CS_HIGH();

	res = FLASH_RES_OK;

	return res;
}
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	bd08      	pop	{r3, pc}
 8002fd8:	20004c1c 	.word	0x20004c1c
 8002fdc:	20004bf4 	.word	0x20004bf4

08002fe0 <spiFlash_eraseSector>:

/********************************************************************/
//        spiFlash_eraseSector - �������� ������� �� ���������� ������
/********************************************************************/
uint8_t spiFlash_eraseSector( uint32_t dwSectAddr, uint8_t cmd )
{
 8002fe0:	b508      	push	{r3, lr}
 8002fe2:	4603      	mov	r3, r0
	uint8_t res = FLASH_RES_ERROR_AGAIN;

	buf_txrx[0] = cmd;		// ������� �������� �������
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <spiFlash_eraseSector+0x38>)
 8002fe6:	7001      	strb	r1, [r0, #0]
	buf_txrx[1] = (uint8_t)(dwSectAddr >> 16);
 8002fe8:	0c1a      	lsrs	r2, r3, #16
 8002fea:	7042      	strb	r2, [r0, #1]
	buf_txrx[2] = (uint8_t)(dwSectAddr >> 8);
 8002fec:	0a1a      	lsrs	r2, r3, #8
 8002fee:	7082      	strb	r2, [r0, #2]
	buf_txrx[3] = (uint8_t)(dwSectAddr >> 0);
 8002ff0:	70c3      	strb	r3, [r0, #3]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002ff2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28

	SPI_FLASH_CS_LOW();
	SpiSendRecv(buf_txrx, NULL, 4);
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f7ff fe09 	bl	8002c14 <SpiSendRecv>
	while(SpiActive){};
 8003002:	4a06      	ldr	r2, [pc, #24]	; (800301c <spiFlash_eraseSector+0x3c>)
 8003004:	7813      	ldrb	r3, [r2, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1fc      	bne.n	8003004 <spiFlash_eraseSector+0x24>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800300a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800300e:	2210      	movs	r2, #16
 8003010:	619a      	str	r2, [r3, #24]
	SPI_FLASH_CS_HIGH();

	res = FLASH_RES_OK;

	return res;
}
 8003012:	2000      	movs	r0, #0
 8003014:	bd08      	pop	{r3, pc}
 8003016:	bf00      	nop
 8003018:	20004c1c 	.word	0x20004c1c
 800301c:	20004bf4 	.word	0x20004bf4

08003020 <SpiManagerSendRecvFlashX>:


void SpiManagerSendRecvFlashX(uint8_t **a_buf_tx, uint8_t **a_buf_rx, uint16_t *a_buf_len, uint8_t cnt)
{

			for (uint8_t i = 0; i < cnt; i++)
 8003020:	b1d3      	cbz	r3, 8003058 <SpiManagerSendRecvFlashX+0x38>
{
 8003022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003026:	1f05      	subs	r5, r0, #4
 8003028:	1f0f      	subs	r7, r1, #4
 800302a:	1e96      	subs	r6, r2, #2
 800302c:	f103 38ff 	add.w	r8, r3, #4294967295
 8003030:	fa5f f888 	uxtb.w	r8, r8
 8003034:	eb00 0888 	add.w	r8, r0, r8, lsl #2
			{

				SpiSendRecv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);

				while(SpiActive);
 8003038:	4c08      	ldr	r4, [pc, #32]	; (800305c <SpiManagerSendRecvFlashX+0x3c>)
				SpiSendRecv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);
 800303a:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800303e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8003042:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8003046:	f7ff fde5 	bl	8002c14 <SpiSendRecv>
				while(SpiActive);
 800304a:	7823      	ldrb	r3, [r4, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1fc      	bne.n	800304a <SpiManagerSendRecvFlashX+0x2a>
			for (uint8_t i = 0; i < cnt; i++)
 8003050:	4545      	cmp	r5, r8
 8003052:	d1f2      	bne.n	800303a <SpiManagerSendRecvFlashX+0x1a>
			}



}
 8003054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20004bf4 	.word	0x20004bf4

08003060 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <SystemInit+0x3c>)
 8003062:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003066:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800306a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <SystemInit+0x40>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003078:	2100      	movs	r1, #0
 800307a:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003082:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003086:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800308c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003094:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003096:	6199      	str	r1, [r3, #24]
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000ed00 	.word	0xe000ed00
 80030a0:	40021000 	.word	0x40021000

080030a4 <LL_SPI_Init>:
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80030a4:	6803      	ldr	r3, [r0, #0]
 80030a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030aa:	d12c      	bne.n	8003106 <LL_SPI_Init+0x62>
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80030ac:	b410      	push	{r4}
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80030ae:	6802      	ldr	r2, [r0, #0]
 80030b0:	680b      	ldr	r3, [r1, #0]
 80030b2:	684c      	ldr	r4, [r1, #4]
 80030b4:	4323      	orrs	r3, r4
 80030b6:	68cc      	ldr	r4, [r1, #12]
 80030b8:	4323      	orrs	r3, r4
 80030ba:	690c      	ldr	r4, [r1, #16]
 80030bc:	4323      	orrs	r3, r4
 80030be:	694c      	ldr	r4, [r1, #20]
 80030c0:	4323      	orrs	r3, r4
 80030c2:	698c      	ldr	r4, [r1, #24]
 80030c4:	4323      	orrs	r3, r4
 80030c6:	69cc      	ldr	r4, [r1, #28]
 80030c8:	4323      	orrs	r3, r4
 80030ca:	6a0c      	ldr	r4, [r1, #32]
 80030cc:	4323      	orrs	r3, r4
 80030ce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80030d2:	f022 02bf 	bic.w	r2, r2, #191	; 0xbf
 80030d6:	4313      	orrs	r3, r2
 80030d8:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80030da:	6842      	ldr	r2, [r0, #4]
 80030dc:	8acb      	ldrh	r3, [r1, #22]
 80030de:	688c      	ldr	r4, [r1, #8]
 80030e0:	4323      	orrs	r3, r4
 80030e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	4313      	orrs	r3, r2
 80030ec:	6043      	str	r3, [r0, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80030ee:	6a0b      	ldr	r3, [r1, #32]
 80030f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f4:	d003      	beq.n	80030fe <LL_SPI_Init+0x5a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 80030f6:	2001      	movs	r0, #1
  }

  return status;
}
 80030f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030fc:	4770      	bx	lr
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80030fe:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8003100:	6103      	str	r3, [r0, #16]
    status = SUCCESS;
 8003102:	2001      	movs	r0, #1
}
 8003104:	e7f8      	b.n	80030f8 <LL_SPI_Init+0x54>
  ErrorStatus status = ERROR;
 8003106:	2000      	movs	r0, #0
}
 8003108:	4770      	bx	lr
	...

0800310c <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <LL_Init1msTick+0x1c>)
 800310e:	fba3 2300 	umull	r2, r3, r3, r0
 8003112:	099b      	lsrs	r3, r3, #6
 8003114:	3b01      	subs	r3, #1
 8003116:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800311a:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800311c:	2300      	movs	r3, #0
 800311e:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003120:	2305      	movs	r3, #5
 8003122:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	10624dd3 	.word	0x10624dd3

0800312c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800312c:	4b01      	ldr	r3, [pc, #4]	; (8003134 <LL_SetSystemCoreClock+0x8>)
 800312e:	6018      	str	r0, [r3, #0]
}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	2000000c 	.word	0x2000000c

08003138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800313c:	f7ff ff90 	bl	8003060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003140:	480c      	ldr	r0, [pc, #48]	; (8003174 <LoopForever+0x6>)
  ldr r1, =_edata
 8003142:	490d      	ldr	r1, [pc, #52]	; (8003178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <LoopForever+0xe>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003148:	e002      	b.n	8003150 <LoopCopyDataInit>

0800314a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800314c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314e:	3304      	adds	r3, #4

08003150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003154:	d3f9      	bcc.n	800314a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003158:	4c0a      	ldr	r4, [pc, #40]	; (8003184 <LoopForever+0x16>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800315c:	e001      	b.n	8003162 <LoopFillZerobss>

0800315e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003160:	3204      	adds	r2, #4

08003162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003164:	d3fb      	bcc.n	800315e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003166:	f000 f811 	bl	800318c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800316a:	f7ff fa39 	bl	80025e0 <main>

0800316e <LoopForever>:

LoopForever:
    b LoopForever
 800316e:	e7fe      	b.n	800316e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003170:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003178:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800317c:	0800326c 	.word	0x0800326c
  ldr r2, =_sbss
 8003180:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003184:	20004c64 	.word	0x20004c64

08003188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003188:	e7fe      	b.n	8003188 <ADC1_2_IRQHandler>
	...

0800318c <__libc_init_array>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	4d0d      	ldr	r5, [pc, #52]	; (80031c4 <__libc_init_array+0x38>)
 8003190:	4c0d      	ldr	r4, [pc, #52]	; (80031c8 <__libc_init_array+0x3c>)
 8003192:	1b64      	subs	r4, r4, r5
 8003194:	10a4      	asrs	r4, r4, #2
 8003196:	2600      	movs	r6, #0
 8003198:	42a6      	cmp	r6, r4
 800319a:	d109      	bne.n	80031b0 <__libc_init_array+0x24>
 800319c:	4d0b      	ldr	r5, [pc, #44]	; (80031cc <__libc_init_array+0x40>)
 800319e:	4c0c      	ldr	r4, [pc, #48]	; (80031d0 <__libc_init_array+0x44>)
 80031a0:	f000 f82e 	bl	8003200 <_init>
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	2600      	movs	r6, #0
 80031aa:	42a6      	cmp	r6, r4
 80031ac:	d105      	bne.n	80031ba <__libc_init_array+0x2e>
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b4:	4798      	blx	r3
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7ee      	b.n	8003198 <__libc_init_array+0xc>
 80031ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80031be:	4798      	blx	r3
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7f2      	b.n	80031aa <__libc_init_array+0x1e>
 80031c4:	08003264 	.word	0x08003264
 80031c8:	08003264 	.word	0x08003264
 80031cc:	08003264 	.word	0x08003264
 80031d0:	08003268 	.word	0x08003268

080031d4 <memcpy>:
 80031d4:	440a      	add	r2, r1
 80031d6:	4291      	cmp	r1, r2
 80031d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80031dc:	d100      	bne.n	80031e0 <memcpy+0xc>
 80031de:	4770      	bx	lr
 80031e0:	b510      	push	{r4, lr}
 80031e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031ea:	4291      	cmp	r1, r2
 80031ec:	d1f9      	bne.n	80031e2 <memcpy+0xe>
 80031ee:	bd10      	pop	{r4, pc}

080031f0 <memset>:
 80031f0:	4402      	add	r2, r0
 80031f2:	4603      	mov	r3, r0
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d100      	bne.n	80031fa <memset+0xa>
 80031f8:	4770      	bx	lr
 80031fa:	f803 1b01 	strb.w	r1, [r3], #1
 80031fe:	e7f9      	b.n	80031f4 <memset+0x4>

08003200 <_init>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	bf00      	nop
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr

0800320c <_fini>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr
