
mm215_gccMy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000000  08000000  08000000  00020070  2**0
                  CONTENTS
  1 .text         00003270  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003374  08003374  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003374  08003374  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003374  08003374  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800337c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b38  20000070  080033ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba8  080033ec  00024ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d15c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6b  00000000  00000000  0002d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007575  00000000  00000000  0002f067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  000365e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a0  00000000  00000000  00036ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001495a  00000000  00000000  00037680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bac2  00000000  00000000  0004bfda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f9ec  00000000  00000000  00057a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d7488  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ca0  00000000  00000000  000d74d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  000d9178  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  000d9214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__do_global_dtors_aux>:
 8000000:	b510      	push	{r4, lr}
 8000002:	4c05      	ldr	r4, [pc, #20]	; (8000018 <__do_global_dtors_aux+0x18>)
 8000004:	7823      	ldrb	r3, [r4, #0]
 8000006:	b933      	cbnz	r3, 8000016 <__do_global_dtors_aux+0x16>
 8000008:	4b04      	ldr	r3, [pc, #16]	; (800001c <__do_global_dtors_aux+0x1c>)
 800000a:	b113      	cbz	r3, 8000012 <__do_global_dtors_aux+0x12>
 800000c:	4804      	ldr	r0, [pc, #16]	; (8000020 <__do_global_dtors_aux+0x20>)
 800000e:	f3af 8000 	nop.w
 8000012:	2301      	movs	r3, #1
 8000014:	7023      	strb	r3, [r4, #0]
 8000016:	bd10      	pop	{r4, pc}
 8000018:	20000070 	.word	0x20000070
 800001c:	00000000 	.word	0x00000000
 8000020:	08003258 	.word	0x08003258

08000024 <frame_dummy>:
 8000024:	b508      	push	{r3, lr}
 8000026:	4b03      	ldr	r3, [pc, #12]	; (8000034 <frame_dummy+0x10>)
 8000028:	b11b      	cbz	r3, 8000032 <frame_dummy+0xe>
 800002a:	4903      	ldr	r1, [pc, #12]	; (8000038 <frame_dummy+0x14>)
 800002c:	4803      	ldr	r0, [pc, #12]	; (800003c <frame_dummy+0x18>)
 800002e:	f3af 8000 	nop.w
 8000032:	bd08      	pop	{r3, pc}
 8000034:	00000000 	.word	0x00000000
 8000038:	20000074 	.word	0x20000074
 800003c:	08003258 	.word	0x08003258

08000040 <memchr>:
 8000040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000044:	2a10      	cmp	r2, #16
 8000046:	db2b      	blt.n	80000a0 <memchr+0x60>
 8000048:	f010 0f07 	tst.w	r0, #7
 800004c:	d008      	beq.n	8000060 <memchr+0x20>
 800004e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000052:	3a01      	subs	r2, #1
 8000054:	428b      	cmp	r3, r1
 8000056:	d02d      	beq.n	80000b4 <memchr+0x74>
 8000058:	f010 0f07 	tst.w	r0, #7
 800005c:	b342      	cbz	r2, 80000b0 <memchr+0x70>
 800005e:	d1f6      	bne.n	800004e <memchr+0xe>
 8000060:	b4f0      	push	{r4, r5, r6, r7}
 8000062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800006a:	f022 0407 	bic.w	r4, r2, #7
 800006e:	f07f 0700 	mvns.w	r7, #0
 8000072:	2300      	movs	r3, #0
 8000074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000078:	3c08      	subs	r4, #8
 800007a:	ea85 0501 	eor.w	r5, r5, r1
 800007e:	ea86 0601 	eor.w	r6, r6, r1
 8000082:	fa85 f547 	uadd8	r5, r5, r7
 8000086:	faa3 f587 	sel	r5, r3, r7
 800008a:	fa86 f647 	uadd8	r6, r6, r7
 800008e:	faa5 f687 	sel	r6, r5, r7
 8000092:	b98e      	cbnz	r6, 80000b8 <memchr+0x78>
 8000094:	d1ee      	bne.n	8000074 <memchr+0x34>
 8000096:	bcf0      	pop	{r4, r5, r6, r7}
 8000098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800009c:	f002 0207 	and.w	r2, r2, #7
 80000a0:	b132      	cbz	r2, 80000b0 <memchr+0x70>
 80000a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80000a6:	3a01      	subs	r2, #1
 80000a8:	ea83 0301 	eor.w	r3, r3, r1
 80000ac:	b113      	cbz	r3, 80000b4 <memchr+0x74>
 80000ae:	d1f8      	bne.n	80000a2 <memchr+0x62>
 80000b0:	2000      	movs	r0, #0
 80000b2:	4770      	bx	lr
 80000b4:	3801      	subs	r0, #1
 80000b6:	4770      	bx	lr
 80000b8:	2d00      	cmp	r5, #0
 80000ba:	bf06      	itte	eq
 80000bc:	4635      	moveq	r5, r6
 80000be:	3803      	subeq	r0, #3
 80000c0:	3807      	subne	r0, #7
 80000c2:	f015 0f01 	tst.w	r5, #1
 80000c6:	d107      	bne.n	80000d8 <memchr+0x98>
 80000c8:	3001      	adds	r0, #1
 80000ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80000ce:	bf02      	ittt	eq
 80000d0:	3001      	addeq	r0, #1
 80000d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80000d6:	3001      	addeq	r0, #1
 80000d8:	bcf0      	pop	{r4, r5, r6, r7}
 80000da:	3801      	subs	r0, #1
 80000dc:	4770      	bx	lr
 80000de:	bf00      	nop

080000e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80000e0:	f100 0308 	add.w	r3, r0, #8
 80000e4:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80000e6:	f04f 32ff 	mov.w	r2, #4294967295
 80000ea:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80000ec:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80000ee:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80000f0:	2300      	movs	r3, #0
 80000f2:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80000f4:	4770      	bx	lr

080000f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80000f6:	2300      	movs	r3, #0
 80000f8:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80000fa:	4770      	bx	lr

080000fc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80000fc:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80000fe:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000100:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000104:	d011      	beq.n	800012a <vListInsert+0x2e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000106:	f100 0308 	add.w	r3, r0, #8
 800010a:	461c      	mov	r4, r3
 800010c:	685b      	ldr	r3, [r3, #4]
 800010e:	681a      	ldr	r2, [r3, #0]
 8000110:	42aa      	cmp	r2, r5
 8000112:	d9fa      	bls.n	800010a <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000114:	6863      	ldr	r3, [r4, #4]
 8000116:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000118:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800011a:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 800011c:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800011e:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 8000120:	6803      	ldr	r3, [r0, #0]
 8000122:	3301      	adds	r3, #1
 8000124:	6003      	str	r3, [r0, #0]
}
 8000126:	bc30      	pop	{r4, r5}
 8000128:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 800012a:	6904      	ldr	r4, [r0, #16]
 800012c:	e7f2      	b.n	8000114 <vListInsert+0x18>

0800012e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800012e:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000130:	6841      	ldr	r1, [r0, #4]
 8000132:	6882      	ldr	r2, [r0, #8]
 8000134:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000136:	6841      	ldr	r1, [r0, #4]
 8000138:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800013a:	685a      	ldr	r2, [r3, #4]
 800013c:	4282      	cmp	r2, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800013e:	bf04      	itt	eq
 8000140:	6882      	ldreq	r2, [r0, #8]
 8000142:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000144:	2200      	movs	r2, #0
 8000146:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8000148:	681a      	ldr	r2, [r3, #0]
 800014a:	3a01      	subs	r2, #1
 800014c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800014e:	6818      	ldr	r0, [r3, #0]
}
 8000150:	4770      	bx	lr

08000152 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000152:	b510      	push	{r4, lr}
 8000154:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000156:	f001 fbd3 	bl	8001900 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800015a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 800015c:	f001 fbf2 	bl	8001944 <vPortExitCritical>

    return xReturn;
}
 8000160:	fab4 f084 	clz	r0, r4
 8000164:	0940      	lsrs	r0, r0, #5
 8000166:	bd10      	pop	{r4, pc}

08000168 <prvCopyDataToQueue>:
{
 8000168:	b570      	push	{r4, r5, r6, lr}
 800016a:	4604      	mov	r4, r0
 800016c:	4615      	mov	r5, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800016e:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000170:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000172:	b95a      	cbnz	r2, 800018c <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000174:	6803      	ldr	r3, [r0, #0]
 8000176:	b11b      	cbz	r3, 8000180 <prvCopyDataToQueue+0x18>
    BaseType_t xReturn = pdFALSE;
 8000178:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800017a:	3601      	adds	r6, #1
 800017c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800017e:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000180:	6880      	ldr	r0, [r0, #8]
 8000182:	f001 f965 	bl	8001450 <xTaskPriorityDisinherit>
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000186:	2300      	movs	r3, #0
 8000188:	60a3      	str	r3, [r4, #8]
 800018a:	e7f6      	b.n	800017a <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
 800018c:	b96d      	cbnz	r5, 80001aa <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800018e:	6840      	ldr	r0, [r0, #4]
 8000190:	f002 f88e 	bl	80022b0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000194:	6863      	ldr	r3, [r4, #4]
 8000196:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000198:	4413      	add	r3, r2
 800019a:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800019c:	68a2      	ldr	r2, [r4, #8]
 800019e:	4293      	cmp	r3, r2
 80001a0:	d319      	bcc.n	80001d6 <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80001a2:	6823      	ldr	r3, [r4, #0]
 80001a4:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 80001a6:	4628      	mov	r0, r5
 80001a8:	e7e7      	b.n	800017a <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80001aa:	68c0      	ldr	r0, [r0, #12]
 80001ac:	f002 f880 	bl	80022b0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80001b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80001b2:	4251      	negs	r1, r2
 80001b4:	68e3      	ldr	r3, [r4, #12]
 80001b6:	1a9b      	subs	r3, r3, r2
 80001b8:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80001ba:	6822      	ldr	r2, [r4, #0]
 80001bc:	4293      	cmp	r3, r2
 80001be:	d202      	bcs.n	80001c6 <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80001c0:	68a3      	ldr	r3, [r4, #8]
 80001c2:	440b      	add	r3, r1
 80001c4:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 80001c6:	2d02      	cmp	r5, #2
 80001c8:	d001      	beq.n	80001ce <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
 80001ca:	2000      	movs	r0, #0
 80001cc:	e7d5      	b.n	800017a <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80001ce:	b126      	cbz	r6, 80001da <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
 80001d0:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 80001d2:	2000      	movs	r0, #0
 80001d4:	e7d1      	b.n	800017a <prvCopyDataToQueue+0x12>
 80001d6:	4628      	mov	r0, r5
 80001d8:	e7cf      	b.n	800017a <prvCopyDataToQueue+0x12>
 80001da:	2000      	movs	r0, #0
 80001dc:	e7cd      	b.n	800017a <prvCopyDataToQueue+0x12>

080001de <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80001de:	b570      	push	{r4, r5, r6, lr}
 80001e0:	b082      	sub	sp, #8
 80001e2:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80001e4:	6c84      	ldr	r4, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 80001e6:	b164      	cbz	r4, 8000202 <prvNotifyQueueSetContainer+0x24>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80001e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80001ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d311      	bcc.n	8000214 <prvNotifyQueueSetContainer+0x36>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80001f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001f4:	f383 8811 	msr	BASEPRI, r3
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f3bf 8f4f 	dsb	sy
 8000200:	e7fe      	b.n	8000200 <prvNotifyQueueSetContainer+0x22>
 8000202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000206:	f383 8811 	msr	BASEPRI, r3
 800020a:	f3bf 8f6f 	isb	sy
 800020e:	f3bf 8f4f 	dsb	sy
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8000212:	e7fe      	b.n	8000212 <prvNotifyQueueSetContainer+0x34>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8000214:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000216:	4293      	cmp	r3, r2
 8000218:	d803      	bhi.n	8000222 <prvNotifyQueueSetContainer+0x44>
        BaseType_t xReturn = pdFALSE;
 800021a:	2500      	movs	r5, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
 800021c:	4628      	mov	r0, r5
 800021e:	b002      	add	sp, #8
 8000220:	bd70      	pop	{r4, r5, r6, pc}
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8000222:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8000226:	b276      	sxtb	r6, r6
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8000228:	2200      	movs	r2, #0
 800022a:	a901      	add	r1, sp, #4
 800022c:	4620      	mov	r0, r4
 800022e:	f7ff ff9b 	bl	8000168 <prvCopyDataToQueue>
 8000232:	4605      	mov	r5, r0
            if( cTxLock == queueUNLOCKED )
 8000234:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000238:	d006      	beq.n	8000248 <prvNotifyQueueSetContainer+0x6a>
                configASSERT( cTxLock != queueINT8_MAX );
 800023a:	2e7f      	cmp	r6, #127	; 0x7f
 800023c:	d00f      	beq.n	800025e <prvNotifyQueueSetContainer+0x80>
                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800023e:	1c73      	adds	r3, r6, #1
 8000240:	b25b      	sxtb	r3, r3
 8000242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000246:	e7e9      	b.n	800021c <prvNotifyQueueSetContainer+0x3e>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8000248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0e6      	beq.n	800021c <prvNotifyQueueSetContainer+0x3e>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800024e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000252:	f001 f813 	bl	800127c <xTaskRemoveFromEventList>
                        xReturn = pdTRUE;
 8000256:	2800      	cmp	r0, #0
 8000258:	bf18      	it	ne
 800025a:	2501      	movne	r5, #1
 800025c:	e7de      	b.n	800021c <prvNotifyQueueSetContainer+0x3e>
 800025e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000262:	f383 8811 	msr	BASEPRI, r3
 8000266:	f3bf 8f6f 	isb	sy
 800026a:	f3bf 8f4f 	dsb	sy
                configASSERT( cTxLock != queueINT8_MAX );
 800026e:	e7fe      	b.n	800026e <prvNotifyQueueSetContainer+0x90>

08000270 <prvCopyDataFromQueue>:
{
 8000270:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000272:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000274:	b16a      	cbz	r2, 8000292 <prvCopyDataFromQueue+0x22>
{
 8000276:	b510      	push	{r4, lr}
 8000278:	4608      	mov	r0, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800027a:	68d9      	ldr	r1, [r3, #12]
 800027c:	4411      	add	r1, r2
 800027e:	60d9      	str	r1, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000280:	689c      	ldr	r4, [r3, #8]
 8000282:	42a1      	cmp	r1, r4
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000284:	bf24      	itt	cs
 8000286:	6819      	ldrcs	r1, [r3, #0]
 8000288:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800028a:	68d9      	ldr	r1, [r3, #12]
 800028c:	f002 f810 	bl	80022b0 <memcpy>
}
 8000290:	bd10      	pop	{r4, pc}
 8000292:	4770      	bx	lr

08000294 <prvUnlockQueue>:
{
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
 8000298:	f001 fb32 	bl	8001900 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800029c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80002a0:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80002a2:	2c00      	cmp	r4, #0
 80002a4:	dd19      	ble.n	80002da <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80002a6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80002aa:	e008      	b.n	80002be <prvUnlockQueue+0x2a>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80002ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80002ae:	b1a3      	cbz	r3, 80002da <prvUnlockQueue+0x46>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80002b0:	4630      	mov	r0, r6
 80002b2:	f000 ffe3 	bl	800127c <xTaskRemoveFromEventList>
 80002b6:	b968      	cbnz	r0, 80002d4 <prvUnlockQueue+0x40>
            --cTxLock;
 80002b8:	3c01      	subs	r4, #1
 80002ba:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80002bc:	b16c      	cbz	r4, 80002da <prvUnlockQueue+0x46>
                    if( pxQueue->pxQueueSetContainer != NULL )
 80002be:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d0f3      	beq.n	80002ac <prvUnlockQueue+0x18>
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80002c4:	4628      	mov	r0, r5
 80002c6:	f7ff ff8a 	bl	80001de <prvNotifyQueueSetContainer>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	d0f4      	beq.n	80002b8 <prvUnlockQueue+0x24>
                            vTaskMissedYield();
 80002ce:	f001 f8a9 	bl	8001424 <vTaskMissedYield>
 80002d2:	e7f1      	b.n	80002b8 <prvUnlockQueue+0x24>
                                vTaskMissedYield();
 80002d4:	f001 f8a6 	bl	8001424 <vTaskMissedYield>
 80002d8:	e7ee      	b.n	80002b8 <prvUnlockQueue+0x24>
        pxQueue->cTxLock = queueUNLOCKED;
 80002da:	23ff      	movs	r3, #255	; 0xff
 80002dc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
 80002e0:	f001 fb30 	bl	8001944 <vPortExitCritical>
    taskENTER_CRITICAL();
 80002e4:	f001 fb0c 	bl	8001900 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80002e8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80002ec:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80002ee:	2c00      	cmp	r4, #0
 80002f0:	dd0f      	ble.n	8000312 <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80002f2:	f105 0610 	add.w	r6, r5, #16
 80002f6:	e002      	b.n	80002fe <prvUnlockQueue+0x6a>
                --cRxLock;
 80002f8:	3c01      	subs	r4, #1
 80002fa:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80002fc:	b14c      	cbz	r4, 8000312 <prvUnlockQueue+0x7e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80002fe:	692b      	ldr	r3, [r5, #16]
 8000300:	b13b      	cbz	r3, 8000312 <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000302:	4630      	mov	r0, r6
 8000304:	f000 ffba 	bl	800127c <xTaskRemoveFromEventList>
 8000308:	2800      	cmp	r0, #0
 800030a:	d0f5      	beq.n	80002f8 <prvUnlockQueue+0x64>
                    vTaskMissedYield();
 800030c:	f001 f88a 	bl	8001424 <vTaskMissedYield>
 8000310:	e7f2      	b.n	80002f8 <prvUnlockQueue+0x64>
        pxQueue->cRxLock = queueUNLOCKED;
 8000312:	23ff      	movs	r3, #255	; 0xff
 8000314:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
 8000318:	f001 fb14 	bl	8001944 <vPortExitCritical>
}
 800031c:	bd70      	pop	{r4, r5, r6, pc}

0800031e <xQueueGenericReset>:
{
 800031e:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
 8000320:	b180      	cbz	r0, 8000344 <xQueueGenericReset+0x26>
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
 8000326:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000328:	b11b      	cbz	r3, 8000332 <xQueueGenericReset+0x14>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800032a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800032c:	fba2 2303 	umull	r2, r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
 8000330:	b18b      	cbz	r3, 8000356 <xQueueGenericReset+0x38>
 8000332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000336:	f383 8811 	msr	BASEPRI, r3
 800033a:	f3bf 8f6f 	isb	sy
 800033e:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 8000342:	e7fe      	b.n	8000342 <xQueueGenericReset+0x24>
 8000344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000348:	f383 8811 	msr	BASEPRI, r3
 800034c:	f3bf 8f6f 	isb	sy
 8000350:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000354:	e7fe      	b.n	8000354 <xQueueGenericReset+0x36>
        taskENTER_CRITICAL();
 8000356:	f001 fad3 	bl	8001900 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800035a:	6822      	ldr	r2, [r4, #0]
 800035c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800035e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000360:	fb01 f303 	mul.w	r3, r1, r3
 8000364:	18d0      	adds	r0, r2, r3
 8000366:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000368:	2000      	movs	r0, #0
 800036a:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800036c:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800036e:	1a5b      	subs	r3, r3, r1
 8000370:	4413      	add	r3, r2
 8000372:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000374:	23ff      	movs	r3, #255	; 0xff
 8000376:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800037a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 800037e:	b9b5      	cbnz	r5, 80003ae <xQueueGenericReset+0x90>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000380:	6923      	ldr	r3, [r4, #16]
 8000382:	b91b      	cbnz	r3, 800038c <xQueueGenericReset+0x6e>
        taskEXIT_CRITICAL();
 8000384:	f001 fade 	bl	8001944 <vPortExitCritical>
}
 8000388:	2001      	movs	r0, #1
 800038a:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800038c:	f104 0010 	add.w	r0, r4, #16
 8000390:	f000 ff74 	bl	800127c <xTaskRemoveFromEventList>
 8000394:	2800      	cmp	r0, #0
 8000396:	d0f5      	beq.n	8000384 <xQueueGenericReset+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
 8000398:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800039c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80003a4:	f3bf 8f4f 	dsb	sy
 80003a8:	f3bf 8f6f 	isb	sy
 80003ac:	e7ea      	b.n	8000384 <xQueueGenericReset+0x66>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003ae:	f104 0010 	add.w	r0, r4, #16
 80003b2:	f7ff fe95 	bl	80000e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80003ba:	f7ff fe91 	bl	80000e0 <vListInitialise>
 80003be:	e7e1      	b.n	8000384 <xQueueGenericReset+0x66>

080003c0 <xQueueGenericCreateStatic>:
        configASSERT( pxStaticQueue );
 80003c0:	b173      	cbz	r3, 80003e0 <xQueueGenericCreateStatic+0x20>
    {
 80003c2:	b510      	push	{r4, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	461c      	mov	r4, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003c8:	b108      	cbz	r0, 80003ce <xQueueGenericCreateStatic+0xe>
            ( pxStaticQueue != NULL ) &&
 80003ca:	b192      	cbz	r2, 80003f2 <xQueueGenericCreateStatic+0x32>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80003cc:	b9f1      	cbnz	r1, 800040c <xQueueGenericCreateStatic+0x4c>
 80003ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003d2:	f383 8811 	msr	BASEPRI, r3
 80003d6:	f3bf 8f6f 	isb	sy
 80003da:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 80003de:	e7fe      	b.n	80003de <xQueueGenericCreateStatic+0x1e>
 80003e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003e4:	f383 8811 	msr	BASEPRI, r3
 80003e8:	f3bf 8f6f 	isb	sy
 80003ec:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticQueue );
 80003f0:	e7fe      	b.n	80003f0 <xQueueGenericCreateStatic+0x30>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d1eb      	bne.n	80003ce <xQueueGenericCreateStatic+0xe>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 80003f6:	2354      	movs	r3, #84	; 0x54
 80003f8:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80003fa:	9b01      	ldr	r3, [sp, #4]
 80003fc:	2b54      	cmp	r3, #84	; 0x54
 80003fe:	d10a      	bne.n	8000416 <xQueueGenericCreateStatic+0x56>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8000400:	9b01      	ldr	r3, [sp, #4]
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000402:	2301      	movs	r3, #1
 8000404:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000408:	4622      	mov	r2, r4
 800040a:	e011      	b.n	8000430 <xQueueGenericCreateStatic+0x70>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 800040c:	2354      	movs	r3, #84	; 0x54
 800040e:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8000410:	9b01      	ldr	r3, [sp, #4]
 8000412:	2b54      	cmp	r3, #84	; 0x54
 8000414:	d008      	beq.n	8000428 <xQueueGenericCreateStatic+0x68>
 8000416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800041a:	f383 8811 	msr	BASEPRI, r3
 800041e:	f3bf 8f6f 	isb	sy
 8000422:	f3bf 8f4f 	dsb	sy
 8000426:	e7fe      	b.n	8000426 <xQueueGenericCreateStatic+0x66>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8000428:	9b01      	ldr	r3, [sp, #4]
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800042a:	2301      	movs	r3, #1
 800042c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 8000430:	6022      	str	r2, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8000432:	63e0      	str	r0, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000434:	6421      	str	r1, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000436:	2101      	movs	r1, #1
 8000438:	4620      	mov	r0, r4
 800043a:	f7ff ff70 	bl	800031e <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 800043e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000442:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            pxNewQueue->pxQueueSetContainer = NULL;
 8000446:	2300      	movs	r3, #0
 8000448:	64a3      	str	r3, [r4, #72]	; 0x48
    }
 800044a:	4620      	mov	r0, r4
 800044c:	b002      	add	sp, #8
 800044e:	bd10      	pop	{r4, pc}

08000450 <xQueueGenericCreate>:
    {
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000452:	b150      	cbz	r0, 800046a <xQueueGenericCreate+0x1a>
 8000454:	460d      	mov	r5, r1
 8000456:	4614      	mov	r4, r2
 8000458:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800045a:	fba0 2301 	umull	r2, r3, r0, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800045e:	b923      	cbnz	r3, 800046a <xQueueGenericCreate+0x1a>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000460:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000464:	f110 0f55 	cmn.w	r0, #85	; 0x55
 8000468:	d908      	bls.n	800047c <xQueueGenericCreate+0x2c>
 800046a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800046e:	f383 8811 	msr	BASEPRI, r3
 8000472:	f3bf 8f6f 	isb	sy
 8000476:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 800047a:	e7fe      	b.n	800047a <xQueueGenericCreate+0x2a>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800047c:	3054      	adds	r0, #84	; 0x54
 800047e:	f001 fb41 	bl	8001b04 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8000482:	4607      	mov	r7, r0
 8000484:	b180      	cbz	r0, 80004a8 <xQueueGenericCreate+0x58>
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000486:	2300      	movs	r3, #0
 8000488:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 800048c:	b175      	cbz	r5, 80004ac <xQueueGenericCreate+0x5c>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800048e:	f100 0354 	add.w	r3, r0, #84	; 0x54
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000492:	603b      	str	r3, [r7, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8000494:	63fe      	str	r6, [r7, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000496:	643d      	str	r5, [r7, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000498:	2101      	movs	r1, #1
 800049a:	4638      	mov	r0, r7
 800049c:	f7ff ff3f 	bl	800031e <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 80004a0:	f887 4050 	strb.w	r4, [r7, #80]	; 0x50
            pxNewQueue->pxQueueSetContainer = NULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	64bb      	str	r3, [r7, #72]	; 0x48
    }
 80004a8:	4638      	mov	r0, r7
 80004aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004ac:	4603      	mov	r3, r0
 80004ae:	e7f0      	b.n	8000492 <xQueueGenericCreate+0x42>

080004b0 <xQueueGenericSend>:
{
 80004b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004b4:	b085      	sub	sp, #20
 80004b6:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 80004b8:	b188      	cbz	r0, 80004de <xQueueGenericSend+0x2e>
 80004ba:	460e      	mov	r6, r1
 80004bc:	461d      	mov	r5, r3
 80004be:	4604      	mov	r4, r0
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80004c0:	b1b1      	cbz	r1, 80004f0 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80004c2:	2d02      	cmp	r5, #2
 80004c4:	d120      	bne.n	8000508 <xQueueGenericSend+0x58>
 80004c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d01d      	beq.n	8000508 <xQueueGenericSend+0x58>
 80004cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004d0:	f383 8811 	msr	BASEPRI, r3
 80004d4:	f3bf 8f6f 	isb	sy
 80004d8:	f3bf 8f4f 	dsb	sy
 80004dc:	e7fe      	b.n	80004dc <xQueueGenericSend+0x2c>
 80004de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004e2:	f383 8811 	msr	BASEPRI, r3
 80004e6:	f3bf 8f6f 	isb	sy
 80004ea:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 80004ee:	e7fe      	b.n	80004ee <xQueueGenericSend+0x3e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80004f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0e5      	beq.n	80004c2 <xQueueGenericSend+0x12>
 80004f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fa:	f383 8811 	msr	BASEPRI, r3
 80004fe:	f3bf 8f6f 	isb	sy
 8000502:	f3bf 8f4f 	dsb	sy
 8000506:	e7fe      	b.n	8000506 <xQueueGenericSend+0x56>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000508:	f000 ff92 	bl	8001430 <xTaskGetSchedulerState>
 800050c:	b950      	cbnz	r0, 8000524 <xQueueGenericSend+0x74>
 800050e:	9b01      	ldr	r3, [sp, #4]
 8000510:	b163      	cbz	r3, 800052c <xQueueGenericSend+0x7c>
 8000512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000516:	f383 8811 	msr	BASEPRI, r3
 800051a:	f3bf 8f6f 	isb	sy
 800051e:	f3bf 8f4f 	dsb	sy
 8000522:	e7fe      	b.n	8000522 <xQueueGenericSend+0x72>
 8000524:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
 8000528:	2700      	movs	r7, #0
 800052a:	e050      	b.n	80005ce <xQueueGenericSend+0x11e>
 800052c:	f04f 0800 	mov.w	r8, #0
 8000530:	e7fa      	b.n	8000528 <xQueueGenericSend+0x78>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000532:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000534:	462a      	mov	r2, r5
 8000536:	4631      	mov	r1, r6
 8000538:	4620      	mov	r0, r4
 800053a:	f7ff fe15 	bl	8000168 <prvCopyDataToQueue>
                        if( pxQueue->pxQueueSetContainer != NULL )
 800053e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000540:	b1b3      	cbz	r3, 8000570 <xQueueGenericSend+0xc0>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8000542:	2d02      	cmp	r5, #2
 8000544:	f000 80a0 	beq.w	8000688 <xQueueGenericSend+0x1d8>
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8000548:	4620      	mov	r0, r4
 800054a:	f7ff fe48 	bl	80001de <prvNotifyQueueSetContainer>
 800054e:	b148      	cbz	r0, 8000564 <xQueueGenericSend+0xb4>
                                queueYIELD_IF_USING_PREEMPTION();
 8000550:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000558:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800055c:	f3bf 8f4f 	dsb	sy
 8000560:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8000564:	f001 f9ee 	bl	8001944 <vPortExitCritical>
                return pdPASS;
 8000568:	2001      	movs	r0, #1
}
 800056a:	b005      	add	sp, #20
 800056c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000572:	b963      	cbnz	r3, 800058e <xQueueGenericSend+0xde>
                            else if( xYieldRequired != pdFALSE )
 8000574:	2800      	cmp	r0, #0
 8000576:	d0f5      	beq.n	8000564 <xQueueGenericSend+0xb4>
                                queueYIELD_IF_USING_PREEMPTION();
 8000578:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800057c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000580:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000584:	f3bf 8f4f 	dsb	sy
 8000588:	f3bf 8f6f 	isb	sy
 800058c:	e7ea      	b.n	8000564 <xQueueGenericSend+0xb4>
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800058e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000592:	f000 fe73 	bl	800127c <xTaskRemoveFromEventList>
 8000596:	2800      	cmp	r0, #0
 8000598:	d0e4      	beq.n	8000564 <xQueueGenericSend+0xb4>
                                    queueYIELD_IF_USING_PREEMPTION();
 800059a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800059e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80005a6:	f3bf 8f4f 	dsb	sy
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	e7d9      	b.n	8000564 <xQueueGenericSend+0xb4>
                    taskEXIT_CRITICAL();
 80005b0:	f001 f9c8 	bl	8001944 <vPortExitCritical>
                    return errQUEUE_FULL;
 80005b4:	2000      	movs	r0, #0
 80005b6:	e7d8      	b.n	800056a <xQueueGenericSend+0xba>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005b8:	a802      	add	r0, sp, #8
 80005ba:	f000 fed5 	bl	8001368 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80005be:	e014      	b.n	80005ea <xQueueGenericSend+0x13a>
                prvUnlockQueue( pxQueue );
 80005c0:	4620      	mov	r0, r4
 80005c2:	f7ff fe67 	bl	8000294 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80005c6:	f000 fcb9 	bl	8000f3c <xTaskResumeAll>
 80005ca:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
 80005ce:	f001 f997 	bl	8001900 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80005d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80005d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3ab      	bcc.n	8000532 <xQueueGenericSend+0x82>
 80005da:	2d02      	cmp	r5, #2
 80005dc:	d04a      	beq.n	8000674 <xQueueGenericSend+0x1c4>
                if( xTicksToWait == ( TickType_t ) 0 )
 80005de:	9b01      	ldr	r3, [sp, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0e5      	beq.n	80005b0 <xQueueGenericSend+0x100>
                else if( xEntryTimeSet == pdFALSE )
 80005e4:	f1b8 0f00 	cmp.w	r8, #0
 80005e8:	d0e6      	beq.n	80005b8 <xQueueGenericSend+0x108>
        taskEXIT_CRITICAL();
 80005ea:	f001 f9ab 	bl	8001944 <vPortExitCritical>
        vTaskSuspendAll();
 80005ee:	f000 fbbd 	bl	8000d6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80005f2:	f001 f985 	bl	8001900 <vPortEnterCritical>
 80005f6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80005fa:	b252      	sxtb	r2, r2
 80005fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000600:	bf08      	it	eq
 8000602:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8000606:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800060a:	b252      	sxtb	r2, r2
 800060c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000610:	bf08      	it	eq
 8000612:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8000616:	f001 f995 	bl	8001944 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800061a:	a901      	add	r1, sp, #4
 800061c:	a802      	add	r0, sp, #8
 800061e:	f000 feaf 	bl	8001380 <xTaskCheckForTimeOut>
 8000622:	bb00      	cbnz	r0, 8000666 <xQueueGenericSend+0x1b6>
    taskENTER_CRITICAL();
 8000624:	f001 f96c 	bl	8001900 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000628:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 800062c:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
    taskEXIT_CRITICAL();
 8000630:	f001 f988 	bl	8001944 <vPortExitCritical>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000634:	45c1      	cmp	r9, r8
 8000636:	d1c3      	bne.n	80005c0 <xQueueGenericSend+0x110>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000638:	9901      	ldr	r1, [sp, #4]
 800063a:	f104 0010 	add.w	r0, r4, #16
 800063e:	f000 fddb 	bl	80011f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000642:	4620      	mov	r0, r4
 8000644:	f7ff fe26 	bl	8000294 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8000648:	f000 fc78 	bl	8000f3c <xTaskResumeAll>
 800064c:	2800      	cmp	r0, #0
 800064e:	d1bc      	bne.n	80005ca <xQueueGenericSend+0x11a>
                    portYIELD_WITHIN_API();
 8000650:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000658:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	e7b1      	b.n	80005ca <xQueueGenericSend+0x11a>
            prvUnlockQueue( pxQueue );
 8000666:	4620      	mov	r0, r4
 8000668:	f7ff fe14 	bl	8000294 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800066c:	f000 fc66 	bl	8000f3c <xTaskResumeAll>
            return errQUEUE_FULL;
 8000670:	2000      	movs	r0, #0
 8000672:	e77a      	b.n	800056a <xQueueGenericSend+0xba>
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000674:	6ba7      	ldr	r7, [r4, #56]	; 0x38
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000676:	2202      	movs	r2, #2
 8000678:	4631      	mov	r1, r6
 800067a:	4620      	mov	r0, r4
 800067c:	f7ff fd74 	bl	8000168 <prvCopyDataToQueue>
                        if( pxQueue->pxQueueSetContainer != NULL )
 8000680:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000682:	2b00      	cmp	r3, #0
 8000684:	f43f af74 	beq.w	8000570 <xQueueGenericSend+0xc0>
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8000688:	2f00      	cmp	r7, #0
 800068a:	f47f af6b 	bne.w	8000564 <xQueueGenericSend+0xb4>
 800068e:	e75b      	b.n	8000548 <xQueueGenericSend+0x98>

08000690 <xQueueReceive>:
{
 8000690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8000698:	b180      	cbz	r0, 80006bc <xQueueReceive+0x2c>
 800069a:	460e      	mov	r6, r1
 800069c:	4604      	mov	r4, r0
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800069e:	b1b1      	cbz	r1, 80006ce <xQueueReceive+0x3e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006a0:	f000 fec6 	bl	8001430 <xTaskGetSchedulerState>
 80006a4:	b9f8      	cbnz	r0, 80006e6 <xQueueReceive+0x56>
 80006a6:	9b01      	ldr	r3, [sp, #4]
 80006a8:	b30b      	cbz	r3, 80006ee <xQueueReceive+0x5e>
 80006aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ae:	f383 8811 	msr	BASEPRI, r3
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	e7fe      	b.n	80006ba <xQueueReceive+0x2a>
 80006bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c0:	f383 8811 	msr	BASEPRI, r3
 80006c4:	f3bf 8f6f 	isb	sy
 80006c8:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 80006cc:	e7fe      	b.n	80006cc <xQueueReceive+0x3c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0e5      	beq.n	80006a0 <xQueueReceive+0x10>
 80006d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d8:	f383 8811 	msr	BASEPRI, r3
 80006dc:	f3bf 8f6f 	isb	sy
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	e7fe      	b.n	80006e4 <xQueueReceive+0x54>
 80006e6:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
 80006ea:	2700      	movs	r7, #0
 80006ec:	e03b      	b.n	8000766 <xQueueReceive+0xd6>
 80006ee:	f04f 0800 	mov.w	r8, #0
 80006f2:	e7fa      	b.n	80006ea <xQueueReceive+0x5a>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80006f4:	4631      	mov	r1, r6
 80006f6:	4620      	mov	r0, r4
 80006f8:	f7ff fdba 	bl	8000270 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80006fc:	3d01      	subs	r5, #1
 80006fe:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000700:	6923      	ldr	r3, [r4, #16]
 8000702:	b92b      	cbnz	r3, 8000710 <xQueueReceive+0x80>
                taskEXIT_CRITICAL();
 8000704:	f001 f91e 	bl	8001944 <vPortExitCritical>
                return pdPASS;
 8000708:	2001      	movs	r0, #1
}
 800070a:	b004      	add	sp, #16
 800070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000710:	f104 0010 	add.w	r0, r4, #16
 8000714:	f000 fdb2 	bl	800127c <xTaskRemoveFromEventList>
 8000718:	2800      	cmp	r0, #0
 800071a:	d0f3      	beq.n	8000704 <xQueueReceive+0x74>
                        queueYIELD_IF_USING_PREEMPTION();
 800071c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000724:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000728:	f3bf 8f4f 	dsb	sy
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	e7e8      	b.n	8000704 <xQueueReceive+0x74>
                    taskEXIT_CRITICAL();
 8000732:	f001 f907 	bl	8001944 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8000736:	2000      	movs	r0, #0
 8000738:	e7e7      	b.n	800070a <xQueueReceive+0x7a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800073a:	a802      	add	r0, sp, #8
 800073c:	f000 fe14 	bl	8001368 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000740:	e01c      	b.n	800077c <xQueueReceive+0xec>
                prvUnlockQueue( pxQueue );
 8000742:	4620      	mov	r0, r4
 8000744:	f7ff fda6 	bl	8000294 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000748:	f000 fbf8 	bl	8000f3c <xTaskResumeAll>
 800074c:	e009      	b.n	8000762 <xQueueReceive+0xd2>
            prvUnlockQueue( pxQueue );
 800074e:	4620      	mov	r0, r4
 8000750:	f7ff fda0 	bl	8000294 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000754:	f000 fbf2 	bl	8000f3c <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000758:	4620      	mov	r0, r4
 800075a:	f7ff fcfa 	bl	8000152 <prvIsQueueEmpty>
 800075e:	2800      	cmp	r0, #0
 8000760:	d146      	bne.n	80007f0 <xQueueReceive+0x160>
 8000762:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
 8000766:	f001 f8cb 	bl	8001900 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800076a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800076c:	2d00      	cmp	r5, #0
 800076e:	d1c1      	bne.n	80006f4 <xQueueReceive+0x64>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000770:	9b01      	ldr	r3, [sp, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0dd      	beq.n	8000732 <xQueueReceive+0xa2>
                else if( xEntryTimeSet == pdFALSE )
 8000776:	f1b8 0f00 	cmp.w	r8, #0
 800077a:	d0de      	beq.n	800073a <xQueueReceive+0xaa>
        taskEXIT_CRITICAL();
 800077c:	f001 f8e2 	bl	8001944 <vPortExitCritical>
        vTaskSuspendAll();
 8000780:	f000 faf4 	bl	8000d6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000784:	f001 f8bc 	bl	8001900 <vPortEnterCritical>
 8000788:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800078c:	b25b      	sxtb	r3, r3
 800078e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000792:	bf08      	it	eq
 8000794:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8000798:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800079c:	b25b      	sxtb	r3, r3
 800079e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a2:	bf08      	it	eq
 80007a4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80007a8:	f001 f8cc 	bl	8001944 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007ac:	a901      	add	r1, sp, #4
 80007ae:	a802      	add	r0, sp, #8
 80007b0:	f000 fde6 	bl	8001380 <xTaskCheckForTimeOut>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d1ca      	bne.n	800074e <xQueueReceive+0xbe>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007b8:	4620      	mov	r0, r4
 80007ba:	f7ff fcca 	bl	8000152 <prvIsQueueEmpty>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d0bf      	beq.n	8000742 <xQueueReceive+0xb2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80007c2:	9901      	ldr	r1, [sp, #4]
 80007c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80007c8:	f000 fd16 	bl	80011f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80007cc:	4620      	mov	r0, r4
 80007ce:	f7ff fd61 	bl	8000294 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80007d2:	f000 fbb3 	bl	8000f3c <xTaskResumeAll>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1c3      	bne.n	8000762 <xQueueReceive+0xd2>
                    portYIELD_WITHIN_API();
 80007da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80007de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80007e6:	f3bf 8f4f 	dsb	sy
 80007ea:	f3bf 8f6f 	isb	sy
 80007ee:	e7b8      	b.n	8000762 <xQueueReceive+0xd2>
                return errQUEUE_EMPTY;
 80007f0:	2000      	movs	r0, #0
 80007f2:	e78a      	b.n	800070a <xQueueReceive+0x7a>

080007f4 <vQueueAddToRegistry>:
        configASSERT( xQueue );
 80007f4:	b130      	cbz	r0, 8000804 <vQueueAddToRegistry+0x10>
    {
 80007f6:	b430      	push	{r4, r5}
 80007f8:	4604      	mov	r4, r0
        if( pcQueueName != NULL )
 80007fa:	b309      	cbz	r1, 8000840 <vQueueAddToRegistry+0x4c>
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <vQueueAddToRegistry+0x50>)
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80007fe:	2000      	movs	r0, #0
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000800:	4602      	mov	r2, r0
 8000802:	e010      	b.n	8000826 <vQueueAddToRegistry+0x32>
 8000804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	f3bf 8f6f 	isb	sy
 8000810:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 8000814:	e7fe      	b.n	8000814 <vQueueAddToRegistry+0x20>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <vQueueAddToRegistry+0x50>)
 8000818:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
        if( pxEntryToWrite != NULL )
 800081c:	e00e      	b.n	800083c <vQueueAddToRegistry+0x48>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800081e:	3201      	adds	r2, #1
 8000820:	3308      	adds	r3, #8
 8000822:	2a05      	cmp	r2, #5
 8000824:	d009      	beq.n	800083a <vQueueAddToRegistry+0x46>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000826:	685d      	ldr	r5, [r3, #4]
 8000828:	42a5      	cmp	r5, r4
 800082a:	d0f4      	beq.n	8000816 <vQueueAddToRegistry+0x22>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800082c:	2800      	cmp	r0, #0
 800082e:	d1f6      	bne.n	800081e <vQueueAddToRegistry+0x2a>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000830:	681d      	ldr	r5, [r3, #0]
 8000832:	2d00      	cmp	r5, #0
 8000834:	bf08      	it	eq
 8000836:	4618      	moveq	r0, r3
 8000838:	e7f1      	b.n	800081e <vQueueAddToRegistry+0x2a>
        if( pxEntryToWrite != NULL )
 800083a:	b108      	cbz	r0, 8000840 <vQueueAddToRegistry+0x4c>
            pxEntryToWrite->pcQueueName = pcQueueName;
 800083c:	6001      	str	r1, [r0, #0]
            pxEntryToWrite->xHandle = xQueue;
 800083e:	6044      	str	r4, [r0, #4]
    }
 8000840:	bc30      	pop	{r4, r5}
 8000842:	4770      	bx	lr
 8000844:	2000008c 	.word	0x2000008c

08000848 <vQueueWaitForMessageRestricted>:
    {
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4604      	mov	r4, r0
 800084c:	460d      	mov	r5, r1
 800084e:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
 8000850:	f001 f856 	bl	8001900 <vPortEnterCritical>
 8000854:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000858:	b25b      	sxtb	r3, r3
 800085a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085e:	bf04      	itt	eq
 8000860:	2300      	moveq	r3, #0
 8000862:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8000866:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800086a:	b25b      	sxtb	r3, r3
 800086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000870:	bf04      	itt	eq
 8000872:	2300      	moveq	r3, #0
 8000874:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8000878:	f001 f864 	bl	8001944 <vPortExitCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800087c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800087e:	b11b      	cbz	r3, 8000888 <vQueueWaitForMessageRestricted+0x40>
        prvUnlockQueue( pxQueue );
 8000880:	4620      	mov	r0, r4
 8000882:	f7ff fd07 	bl	8000294 <prvUnlockQueue>
    }
 8000886:	bd70      	pop	{r4, r5, r6, pc}
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000888:	4632      	mov	r2, r6
 800088a:	4629      	mov	r1, r5
 800088c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000890:	f000 fcca 	bl	8001228 <vTaskPlaceOnEventListRestricted>
 8000894:	e7f4      	b.n	8000880 <vQueueWaitForMessageRestricted+0x38>
	...

08000898 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <prvResetNextTaskUnblockTime+0x20>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	b923      	cbnz	r3, 80008aa <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <prvResetNextTaskUnblockTime+0x24>)
 80008a2:	f04f 32ff 	mov.w	r2, #4294967295
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	4770      	bx	lr
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80008aa:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <prvResetNextTaskUnblockTime+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b02      	ldr	r3, [pc, #8]	; (80008bc <prvResetNextTaskUnblockTime+0x24>)
 80008b4:	601a      	str	r2, [r3, #0]
    }
}
 80008b6:	4770      	bx	lr
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	2000016c 	.word	0x2000016c

080008c0 <prvInitialiseNewTask>:
{
 80008c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c4:	4607      	mov	r7, r0
 80008c6:	468a      	mov	sl, r1
 80008c8:	4698      	mov	r8, r3
 80008ca:	9e08      	ldr	r6, [sp, #32]
 80008cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80008ce:	0095      	lsls	r5, r2, #2
 80008d0:	462a      	mov	r2, r5
 80008d2:	21a5      	movs	r1, #165	; 0xa5
 80008d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80008d6:	f001 fcf9 	bl	80022cc <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80008da:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
    if( pcName != NULL )
 80008de:	f1ba 0f00 	cmp.w	sl, #0
 80008e2:	d01a      	beq.n	800091a <prvInitialiseNewTask+0x5a>
 80008e4:	f10a 32ff 	add.w	r2, sl, #4294967295
 80008e8:	f104 0333 	add.w	r3, r4, #51	; 0x33
 80008ec:	f10a 0a09 	add.w	sl, sl, #9
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80008f0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80008f4:	f803 1f01 	strb.w	r1, [r3, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 80008f8:	b109      	cbz	r1, 80008fe <prvInitialiseNewTask+0x3e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80008fa:	4552      	cmp	r2, sl
 80008fc:	d1f8      	bne.n	80008f0 <prvInitialiseNewTask+0x30>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80008fe:	2300      	movs	r3, #0
 8000900:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000904:	2e04      	cmp	r6, #4
 8000906:	d90c      	bls.n	8000922 <prvInitialiseNewTask+0x62>
 8000908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090c:	f383 8811 	msr	BASEPRI, r3
 8000910:	f3bf 8f6f 	isb	sy
 8000914:	f3bf 8f4f 	dsb	sy
 8000918:	e7fe      	b.n	8000918 <prvInitialiseNewTask+0x58>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800091a:	2300      	movs	r3, #0
 800091c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8000920:	e7f0      	b.n	8000904 <prvInitialiseNewTask+0x44>
    pxNewTCB->uxPriority = uxPriority;
 8000922:	62e6      	str	r6, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8000924:	64a6      	str	r6, [r4, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000926:	f04f 0a00 	mov.w	sl, #0
 800092a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800092e:	1d20      	adds	r0, r4, #4
 8000930:	f7ff fbe1 	bl	80000f6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000934:	f104 0018 	add.w	r0, r4, #24
 8000938:	f7ff fbdd 	bl	80000f6 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800093c:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800093e:	f1c6 0605 	rsb	r6, r6, #5
 8000942:	61a6      	str	r6, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000944:	6264      	str	r4, [r4, #36]	; 0x24
            pxNewTCB->pxTaskTag = NULL;
 8000946:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
            pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 800094a:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 800094e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 8000952:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000956:	f8c4 a060 	str.w	sl, [r4, #96]	; 0x60
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800095a:	f884 a064 	strb.w	sl, [r4, #100]	; 0x64
            pxNewTCB->ucDelayAborted = pdFALSE;
 800095e:	f884 a066 	strb.w	sl, [r4, #102]	; 0x66
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000962:	3d04      	subs	r5, #4
 8000964:	444d      	add	r5, r9
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000966:	4642      	mov	r2, r8
 8000968:	4639      	mov	r1, r7
 800096a:	f025 0007 	bic.w	r0, r5, #7
 800096e:	f000 ffb1 	bl	80018d4 <pxPortInitialiseStack>
 8000972:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8000974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000976:	b103      	cbz	r3, 800097a <prvInitialiseNewTask+0xba>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000978:	601c      	str	r4, [r3, #0]
}
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08000980 <prvAddNewTaskToReadyList>:
{
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000984:	f000 ffbc 	bl	8001900 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8000988:	4a37      	ldr	r2, [pc, #220]	; (8000a68 <prvAddNewTaskToReadyList+0xe8>)
 800098a:	6813      	ldr	r3, [r2, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 8000990:	4b36      	ldr	r3, [pc, #216]	; (8000a6c <prvAddNewTaskToReadyList+0xec>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d042      	beq.n	8000a1e <prvAddNewTaskToReadyList+0x9e>
            if( xSchedulerRunning == pdFALSE )
 8000998:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <prvAddNewTaskToReadyList+0xf0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	b93b      	cbnz	r3, 80009ae <prvAddNewTaskToReadyList+0x2e>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800099e:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <prvAddNewTaskToReadyList+0xec>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009a6:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 80009a8:	bf9c      	itt	ls
 80009aa:	4b30      	ldrls	r3, [pc, #192]	; (8000a6c <prvAddNewTaskToReadyList+0xec>)
 80009ac:	601c      	strls	r4, [r3, #0]
        uxTaskNumber++;
 80009ae:	4a31      	ldr	r2, [pc, #196]	; (8000a74 <prvAddNewTaskToReadyList+0xf4>)
 80009b0:	6813      	ldr	r3, [r2, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80009b6:	6423      	str	r3, [r4, #64]	; 0x40
        prvAddTaskToReadyList( pxNewTCB );
 80009b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009ba:	492f      	ldr	r1, [pc, #188]	; (8000a78 <prvAddNewTaskToReadyList+0xf8>)
 80009bc:	6808      	ldr	r0, [r1, #0]
 80009be:	2201      	movs	r2, #1
 80009c0:	409a      	lsls	r2, r3
 80009c2:	4302      	orrs	r2, r0
 80009c4:	600a      	str	r2, [r1, #0]
 80009c6:	4a2d      	ldr	r2, [pc, #180]	; (8000a7c <prvAddNewTaskToReadyList+0xfc>)
 80009c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	60a3      	str	r3, [r4, #8]
 80009d4:	6898      	ldr	r0, [r3, #8]
 80009d6:	60e0      	str	r0, [r4, #12]
 80009d8:	1d21      	adds	r1, r4, #4
 80009da:	6041      	str	r1, [r0, #4]
 80009dc:	6099      	str	r1, [r3, #8]
 80009de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80009e4:	0088      	lsls	r0, r1, #2
 80009e6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80009ea:	6161      	str	r1, [r4, #20]
 80009ec:	5811      	ldr	r1, [r2, r0]
 80009ee:	3101      	adds	r1, #1
 80009f0:	5011      	str	r1, [r2, r0]
    taskEXIT_CRITICAL();
 80009f2:	f000 ffa7 	bl	8001944 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <prvAddNewTaskToReadyList+0xf0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	b17b      	cbz	r3, 8000a1c <prvAddNewTaskToReadyList+0x9c>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <prvAddNewTaskToReadyList+0xec>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d209      	bcs.n	8000a1c <prvAddNewTaskToReadyList+0x9c>
            taskYIELD_IF_USING_PREEMPTION();
 8000a08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a10:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	f3bf 8f6f 	isb	sy
}
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
            pxCurrentTCB = pxNewTCB;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <prvAddNewTaskToReadyList+0xec>)
 8000a20:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a22:	6813      	ldr	r3, [r2, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d1c2      	bne.n	80009ae <prvAddNewTaskToReadyList+0x2e>
 8000a28:	4d14      	ldr	r5, [pc, #80]	; (8000a7c <prvAddNewTaskToReadyList+0xfc>)
 8000a2a:	f105 0664 	add.w	r6, r5, #100	; 0x64
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000a2e:	4628      	mov	r0, r5
 8000a30:	f7ff fb56 	bl	80000e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000a34:	3514      	adds	r5, #20
 8000a36:	42b5      	cmp	r5, r6
 8000a38:	d1f9      	bne.n	8000a2e <prvAddNewTaskToReadyList+0xae>
    vListInitialise( &xDelayedTaskList1 );
 8000a3a:	4e11      	ldr	r6, [pc, #68]	; (8000a80 <prvAddNewTaskToReadyList+0x100>)
 8000a3c:	4630      	mov	r0, r6
 8000a3e:	f7ff fb4f 	bl	80000e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000a42:	4d10      	ldr	r5, [pc, #64]	; (8000a84 <prvAddNewTaskToReadyList+0x104>)
 8000a44:	4628      	mov	r0, r5
 8000a46:	f7ff fb4b 	bl	80000e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <prvAddNewTaskToReadyList+0x108>)
 8000a4c:	f7ff fb48 	bl	80000e0 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <prvAddNewTaskToReadyList+0x10c>)
 8000a52:	f7ff fb45 	bl	80000e0 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <prvAddNewTaskToReadyList+0x110>)
 8000a58:	f7ff fb42 	bl	80000e0 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <prvAddNewTaskToReadyList+0x114>)
 8000a5e:	601e      	str	r6, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <prvAddNewTaskToReadyList+0x118>)
 8000a62:	601d      	str	r5, [r3, #0]
}
 8000a64:	e7a3      	b.n	80009ae <prvAddNewTaskToReadyList+0x2e>
 8000a66:	bf00      	nop
 8000a68:	2000012c 	.word	0x2000012c
 8000a6c:	200000b4 	.word	0x200000b4
 8000a70:	2000018c 	.word	0x2000018c
 8000a74:	20000138 	.word	0x20000138
 8000a78:	2000013c 	.word	0x2000013c
 8000a7c:	200000c0 	.word	0x200000c0
 8000a80:	20000140 	.word	0x20000140
 8000a84:	20000154 	.word	0x20000154
 8000a88:	20000178 	.word	0x20000178
 8000a8c:	200001a4 	.word	0x200001a4
 8000a90:	20000190 	.word	0x20000190
 8000a94:	200000b8 	.word	0x200000b8
 8000a98:	200000bc 	.word	0x200000bc

08000a9c <prvDeleteTCB>:
    {
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4604      	mov	r4, r0
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8000aa0:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8000aa4:	b163      	cbz	r3, 8000ac0 <prvDeleteTCB+0x24>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d011      	beq.n	8000ace <prvDeleteTCB+0x32>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d00e      	beq.n	8000acc <prvDeleteTCB+0x30>
 8000aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ab2:	f383 8811 	msr	BASEPRI, r3
 8000ab6:	f3bf 8f6f 	isb	sy
 8000aba:	f3bf 8f4f 	dsb	sy
 8000abe:	e7fe      	b.n	8000abe <prvDeleteTCB+0x22>
                    vPortFreeStack( pxTCB->pxStack );
 8000ac0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8000ac2:	f001 f8cd 	bl	8001c60 <vPortFree>
                    vPortFree( pxTCB );
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f001 f8ca 	bl	8001c60 <vPortFree>
    }
 8000acc:	bd10      	pop	{r4, pc}
                    vPortFree( pxTCB );
 8000ace:	f001 f8c7 	bl	8001c60 <vPortFree>
 8000ad2:	e7fb      	b.n	8000acc <prvDeleteTCB+0x30>

08000ad4 <prvIdleTask>:
{
 8000ad4:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ad6:	4c15      	ldr	r4, [pc, #84]	; (8000b2c <prvIdleTask+0x58>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ad8:	4f15      	ldr	r7, [pc, #84]	; (8000b30 <prvIdleTask+0x5c>)
                    --uxCurrentNumberOfTasks;
 8000ada:	4e16      	ldr	r6, [pc, #88]	; (8000b34 <prvIdleTask+0x60>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000adc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000b38 <prvIdleTask+0x64>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ae0:	6823      	ldr	r3, [r4, #0]
 8000ae2:	b1a3      	cbz	r3, 8000b0e <prvIdleTask+0x3a>
                taskENTER_CRITICAL();
 8000ae4:	f000 ff0c 	bl	8001900 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000aec:	1d28      	adds	r0, r5, #4
 8000aee:	f7ff fb1e 	bl	800012e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000af2:	6833      	ldr	r3, [r6, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	6033      	str	r3, [r6, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 8000afe:	f000 ff21 	bl	8001944 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 8000b02:	4628      	mov	r0, r5
 8000b04:	f7ff ffca 	bl	8000a9c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1ea      	bne.n	8000ae4 <prvIdleTask+0x10>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d9e4      	bls.n	8000ae0 <prvIdleTask+0xc>
                    taskYIELD();
 8000b16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	f3bf 8f6f 	isb	sy
 8000b2a:	e7d9      	b.n	8000ae0 <prvIdleTask+0xc>
 8000b2c:	20000130 	.word	0x20000130
 8000b30:	200001a4 	.word	0x200001a4
 8000b34:	2000012c 	.word	0x2000012c
 8000b38:	200000c0 	.word	0x200000c0

08000b3c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4604      	mov	r4, r0
 8000b40:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8000b44:	681e      	ldr	r6, [r3, #0]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	3004      	adds	r0, #4
 8000b54:	f7ff faeb 	bl	800012e <uxListRemove>
 8000b58:	b948      	cbnz	r0, 8000b6e <prvAddCurrentTaskToDelayedList+0x32>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4920      	ldr	r1, [pc, #128]	; (8000be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8000b60:	680b      	ldr	r3, [r1, #0]
 8000b62:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8000b64:	2201      	movs	r2, #1
 8000b66:	4082      	lsls	r2, r0
 8000b68:	ea23 0302 	bic.w	r3, r3, r2
 8000b6c:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000b6e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b72:	d00d      	beq.n	8000b90 <prvAddCurrentTaskToDelayedList+0x54>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000b74:	4434      	add	r4, r6

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
 8000b7c:	42a6      	cmp	r6, r4
 8000b7e:	d91d      	bls.n	8000bbc <prvAddCurrentTaskToDelayedList+0x80>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <prvAddCurrentTaskToDelayedList+0xa8>)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	3104      	adds	r1, #4
 8000b8a:	f7ff fab7 	bl	80000fc <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0ef      	beq.n	8000b74 <prvAddCurrentTaskToDelayedList+0x38>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <prvAddCurrentTaskToDelayedList+0xac>)
 8000b96:	6851      	ldr	r1, [r2, #4]
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	6081      	str	r1, [r0, #8]
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	688c      	ldr	r4, [r1, #8]
 8000ba2:	60c4      	str	r4, [r0, #12]
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	3004      	adds	r0, #4
 8000ba8:	6060      	str	r0, [r4, #4]
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	3004      	adds	r0, #4
 8000bae:	6088      	str	r0, [r1, #8]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	615a      	str	r2, [r3, #20]
 8000bb4:	6813      	ldr	r3, [r2, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e7e8      	b.n	8000b8e <prvAddCurrentTaskToDelayedList+0x52>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <prvAddCurrentTaskToDelayedList+0xb0>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8000bc2:	6819      	ldr	r1, [r3, #0]
 8000bc4:	3104      	adds	r1, #4
 8000bc6:	f7ff fa99 	bl	80000fc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	42a3      	cmp	r3, r4
                        xNextTaskUnblockTime = xTimeToWake;
 8000bd0:	bf84      	itt	hi
 8000bd2:	4b07      	ldrhi	r3, [pc, #28]	; (8000bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000bd4:	601c      	strhi	r4, [r3, #0]
}
 8000bd6:	e7da      	b.n	8000b8e <prvAddCurrentTaskToDelayedList+0x52>
 8000bd8:	200001b8 	.word	0x200001b8
 8000bdc:	200000b4 	.word	0x200000b4
 8000be0:	2000013c 	.word	0x2000013c
 8000be4:	200000bc 	.word	0x200000bc
 8000be8:	20000190 	.word	0x20000190
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	2000016c 	.word	0x2000016c

08000bf4 <xTaskCreateStatic>:
    {
 8000bf4:	b530      	push	{r4, r5, lr}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
        configASSERT( puxStackBuffer != NULL );
 8000bfa:	b17c      	cbz	r4, 8000c1c <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8000bfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000bfe:	b1b5      	cbz	r5, 8000c2e <xTaskCreateStatic+0x3a>
                volatile size_t xSize = sizeof( StaticTask_t );
 8000c00:	2568      	movs	r5, #104	; 0x68
 8000c02:	9504      	str	r5, [sp, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 8000c04:	9d04      	ldr	r5, [sp, #16]
 8000c06:	2d68      	cmp	r5, #104	; 0x68
 8000c08:	d01a      	beq.n	8000c40 <xTaskCreateStatic+0x4c>
 8000c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c0e:	f383 8811 	msr	BASEPRI, r3
 8000c12:	f3bf 8f6f 	isb	sy
 8000c16:	f3bf 8f4f 	dsb	sy
 8000c1a:	e7fe      	b.n	8000c1a <xTaskCreateStatic+0x26>
 8000c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	f3bf 8f6f 	isb	sy
 8000c28:	f3bf 8f4f 	dsb	sy
        configASSERT( puxStackBuffer != NULL );
 8000c2c:	e7fe      	b.n	8000c2c <xTaskCreateStatic+0x38>
 8000c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c32:	f383 8811 	msr	BASEPRI, r3
 8000c36:	f3bf 8f6f 	isb	sy
 8000c3a:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskBuffer != NULL );
 8000c3e:	e7fe      	b.n	8000c3e <xTaskCreateStatic+0x4a>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8000c40:	9d04      	ldr	r5, [sp, #16]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000c42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c44:	632c      	str	r4, [r5, #48]	; 0x30
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000c46:	2402      	movs	r4, #2
 8000c48:	f885 4065 	strb.w	r4, [r5, #101]	; 0x65
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	9403      	str	r4, [sp, #12]
 8000c50:	9502      	str	r5, [sp, #8]
 8000c52:	ac05      	add	r4, sp, #20
 8000c54:	9401      	str	r4, [sp, #4]
 8000c56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8000c58:	9400      	str	r4, [sp, #0]
 8000c5a:	f7ff fe31 	bl	80008c0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000c5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000c60:	f7ff fe8e 	bl	8000980 <prvAddNewTaskToReadyList>
    }
 8000c64:	9805      	ldr	r0, [sp, #20]
 8000c66:	b007      	add	sp, #28
 8000c68:	bd30      	pop	{r4, r5, pc}

08000c6a <xTaskCreate>:
    {
 8000c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	4607      	mov	r7, r0
 8000c72:	4688      	mov	r8, r1
 8000c74:	4614      	mov	r4, r2
 8000c76:	461e      	mov	r6, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000c78:	0090      	lsls	r0, r2, #2
 8000c7a:	f000 ff43 	bl	8001b04 <pvPortMalloc>
                if( pxStack != NULL )
 8000c7e:	b308      	cbz	r0, 8000cc4 <xTaskCreate+0x5a>
 8000c80:	4681      	mov	r9, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000c82:	2068      	movs	r0, #104	; 0x68
 8000c84:	f000 ff3e 	bl	8001b04 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8000c88:	4605      	mov	r5, r0
 8000c8a:	b1a8      	cbz	r0, 8000cb8 <xTaskCreate+0x4e>
                        pxNewTCB->pxStack = pxStack;
 8000c8c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c96:	9303      	str	r3, [sp, #12]
 8000c98:	9002      	str	r0, [sp, #8]
 8000c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4633      	mov	r3, r6
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	4638      	mov	r0, r7
 8000caa:	f7ff fe09 	bl	80008c0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000cae:	4628      	mov	r0, r5
 8000cb0:	f7ff fe66 	bl	8000980 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	e007      	b.n	8000cc8 <xTaskCreate+0x5e>
                        vPortFreeStack( pxStack );
 8000cb8:	4648      	mov	r0, r9
 8000cba:	f000 ffd1 	bl	8001c60 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc2:	e001      	b.n	8000cc8 <xTaskCreate+0x5e>
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8000cc8:	b005      	add	sp, #20
 8000cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000cd0 <vTaskStartScheduler>:
{
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	b088      	sub	sp, #32
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8000cd4:	2400      	movs	r4, #0
 8000cd6:	9405      	str	r4, [sp, #20]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8000cd8:	9406      	str	r4, [sp, #24]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8000cda:	aa07      	add	r2, sp, #28
 8000cdc:	a906      	add	r1, sp, #24
 8000cde:	a805      	add	r0, sp, #20
 8000ce0:	f001 f8ba 	bl	8001e58 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8000ce4:	9b05      	ldr	r3, [sp, #20]
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	9b06      	ldr	r3, [sp, #24]
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	9400      	str	r4, [sp, #0]
 8000cee:	4623      	mov	r3, r4
 8000cf0:	9a07      	ldr	r2, [sp, #28]
 8000cf2:	4917      	ldr	r1, [pc, #92]	; (8000d50 <vTaskStartScheduler+0x80>)
 8000cf4:	4817      	ldr	r0, [pc, #92]	; (8000d54 <vTaskStartScheduler+0x84>)
 8000cf6:	f7ff ff7d 	bl	8000bf4 <xTaskCreateStatic>
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <vTaskStartScheduler+0x88>)
 8000cfc:	6018      	str	r0, [r3, #0]
            if( xIdleTaskHandle != NULL )
 8000cfe:	b310      	cbz	r0, 8000d46 <vTaskStartScheduler+0x76>
                xReturn = xTimerCreateTimerTask();
 8000d00:	f000 fd78 	bl	80017f4 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8000d04:	2801      	cmp	r0, #1
 8000d06:	d00b      	beq.n	8000d20 <vTaskStartScheduler+0x50>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000d08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000d0c:	d11b      	bne.n	8000d46 <vTaskStartScheduler+0x76>
 8000d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d12:	f383 8811 	msr	BASEPRI, r3
 8000d16:	f3bf 8f6f 	isb	sy
 8000d1a:	f3bf 8f4f 	dsb	sy
 8000d1e:	e7fe      	b.n	8000d1e <vTaskStartScheduler+0x4e>
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <vTaskStartScheduler+0x8c>)
 8000d32:	f04f 32ff 	mov.w	r2, #4294967295
 8000d36:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <vTaskStartScheduler+0x90>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <vTaskStartScheduler+0x94>)
 8000d40:	601c      	str	r4, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 8000d42:	f000 fe21 	bl	8001988 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <vTaskStartScheduler+0x98>)
 8000d48:	681b      	ldr	r3, [r3, #0]
}
 8000d4a:	b008      	add	sp, #32
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	bf00      	nop
 8000d50:	08003270 	.word	0x08003270
 8000d54:	08000ad5 	.word	0x08000ad5
 8000d58:	20000168 	.word	0x20000168
 8000d5c:	2000016c 	.word	0x2000016c
 8000d60:	2000018c 	.word	0x2000018c
 8000d64:	200001b8 	.word	0x200001b8
 8000d68:	20000000 	.word	0x20000000

08000d6c <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8000d6c:	4a02      	ldr	r2, [pc, #8]	; (8000d78 <vTaskSuspendAll+0xc>)
 8000d6e:	6813      	ldr	r3, [r2, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000134 	.word	0x20000134

08000d7c <xTaskGetTickCount>:
        xTicks = xTickCount;
 8000d7c:	4b01      	ldr	r3, [pc, #4]	; (8000d84 <xTaskGetTickCount+0x8>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200001b8 	.word	0x200001b8

08000d88 <xTaskIncrementTick>:
{
 8000d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d8c:	4b60      	ldr	r3, [pc, #384]	; (8000f10 <xTaskIncrementTick+0x188>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f040 80b6 	bne.w	8000f02 <xTaskIncrementTick+0x17a>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d96:	4b5f      	ldr	r3, [pc, #380]	; (8000f14 <xTaskIncrementTick+0x18c>)
 8000d98:	681c      	ldr	r4, [r3, #0]
 8000d9a:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8000d9c:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000d9e:	b9c4      	cbnz	r4, 8000dd2 <xTaskIncrementTick+0x4a>
            taskSWITCH_DELAYED_LISTS();
 8000da0:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <xTaskIncrementTick+0x190>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	b143      	cbz	r3, 8000dba <xTaskIncrementTick+0x32>
 8000da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dac:	f383 8811 	msr	BASEPRI, r3
 8000db0:	f3bf 8f6f 	isb	sy
 8000db4:	f3bf 8f4f 	dsb	sy
 8000db8:	e7fe      	b.n	8000db8 <xTaskIncrementTick+0x30>
 8000dba:	4a57      	ldr	r2, [pc, #348]	; (8000f18 <xTaskIncrementTick+0x190>)
 8000dbc:	6811      	ldr	r1, [r2, #0]
 8000dbe:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <xTaskIncrementTick+0x194>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	6010      	str	r0, [r2, #0]
 8000dc4:	6019      	str	r1, [r3, #0]
 8000dc6:	4a56      	ldr	r2, [pc, #344]	; (8000f20 <xTaskIncrementTick+0x198>)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	f7ff fd63 	bl	8000898 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000dd2:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <xTaskIncrementTick+0x19c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	f200 8081 	bhi.w	8000ede <xTaskIncrementTick+0x156>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ddc:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <xTaskIncrementTick+0x190>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	b153      	cbz	r3, 8000dfa <xTaskIncrementTick+0x72>
    BaseType_t xSwitchRequired = pdFALSE;
 8000de4:	2000      	movs	r0, #0
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000de6:	494c      	ldr	r1, [pc, #304]	; (8000f18 <xTaskIncrementTick+0x190>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000de8:	4605      	mov	r5, r0
                    prvAddTaskToReadyList( pxTCB );
 8000dea:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8000f38 <xTaskIncrementTick+0x1b0>
 8000dee:	f04f 0b01 	mov.w	fp, #1
 8000df2:	4a4d      	ldr	r2, [pc, #308]	; (8000f28 <xTaskIncrementTick+0x1a0>)
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000df4:	f8df e134 	ldr.w	lr, [pc, #308]	; 8000f2c <xTaskIncrementTick+0x1a4>
 8000df8:	e03a      	b.n	8000e70 <xTaskIncrementTick+0xe8>
    BaseType_t xSwitchRequired = pdFALSE;
 8000dfa:	2000      	movs	r0, #0
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000dfc:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <xTaskIncrementTick+0x19c>)
 8000dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000e02:	601a      	str	r2, [r3, #0]
                    break;
 8000e04:	e06c      	b.n	8000ee0 <xTaskIncrementTick+0x158>
                        xNextTaskUnblockTime = xItemValue;
 8000e06:	4b47      	ldr	r3, [pc, #284]	; (8000f24 <xTaskIncrementTick+0x19c>)
 8000e08:	601f      	str	r7, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000e0a:	e069      	b.n	8000ee0 <xTaskIncrementTick+0x158>
                    prvAddTaskToReadyList( pxTCB );
 8000e0c:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8000e0e:	f8dc a000 	ldr.w	sl, [ip]
 8000e12:	fa0b f907 	lsl.w	r9, fp, r7
 8000e16:	ea49 090a 	orr.w	r9, r9, sl
 8000e1a:	f8cc 9000 	str.w	r9, [ip]
 8000e1e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8000e22:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8000e26:	687f      	ldr	r7, [r7, #4]
 8000e28:	609f      	str	r7, [r3, #8]
 8000e2a:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8000e2e:	f8c3 900c 	str.w	r9, [r3, #12]
 8000e32:	f8c9 8004 	str.w	r8, [r9, #4]
 8000e36:	f8c7 8008 	str.w	r8, [r7, #8]
 8000e3a:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8000e3c:	eb07 0887 	add.w	r8, r7, r7, lsl #2
 8000e40:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8000e44:	f8c3 9014 	str.w	r9, [r3, #20]
 8000e48:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 8000e4c:	f108 0801 	add.w	r8, r8, #1
 8000e50:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8000e54:	f842 8027 	str.w	r8, [r2, r7, lsl #2]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e58:	f8de 8000 	ldr.w	r8, [lr]
 8000e5c:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8000e5e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 8000e62:	429f      	cmp	r7, r3
 8000e64:	bf28      	it	cs
 8000e66:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e68:	680b      	ldr	r3, [r1, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0c5      	beq.n	8000dfc <xTaskIncrementTick+0x74>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e70:	680b      	ldr	r3, [r1, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e76:	685f      	ldr	r7, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8000e78:	42bc      	cmp	r4, r7
 8000e7a:	d3c4      	bcc.n	8000e06 <xTaskIncrementTick+0x7e>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e7c:	695f      	ldr	r7, [r3, #20]
 8000e7e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8000e82:	689e      	ldr	r6, [r3, #8]
 8000e84:	f8c6 8008 	str.w	r8, [r6, #8]
 8000e88:	689e      	ldr	r6, [r3, #8]
 8000e8a:	f8c8 6004 	str.w	r6, [r8, #4]
 8000e8e:	f103 0804 	add.w	r8, r3, #4
 8000e92:	687e      	ldr	r6, [r7, #4]
 8000e94:	4546      	cmp	r6, r8
 8000e96:	bf04      	itt	eq
 8000e98:	68de      	ldreq	r6, [r3, #12]
 8000e9a:	607e      	streq	r6, [r7, #4]
 8000e9c:	615d      	str	r5, [r3, #20]
 8000e9e:	f8d7 9000 	ldr.w	r9, [r7]
 8000ea2:	f109 39ff 	add.w	r9, r9, #4294967295
 8000ea6:	f8c7 9000 	str.w	r9, [r7]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000eaa:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8000eae:	f1b9 0f00 	cmp.w	r9, #0
 8000eb2:	d0ab      	beq.n	8000e0c <xTaskIncrementTick+0x84>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000eb4:	6a1f      	ldr	r7, [r3, #32]
 8000eb6:	69de      	ldr	r6, [r3, #28]
 8000eb8:	60b7      	str	r7, [r6, #8]
 8000eba:	69de      	ldr	r6, [r3, #28]
 8000ebc:	607e      	str	r6, [r7, #4]
 8000ebe:	f103 0718 	add.w	r7, r3, #24
 8000ec2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ec6:	42be      	cmp	r6, r7
 8000ec8:	bf04      	itt	eq
 8000eca:	6a1f      	ldreq	r7, [r3, #32]
 8000ecc:	f8c9 7004 	streq.w	r7, [r9, #4]
 8000ed0:	629d      	str	r5, [r3, #40]	; 0x28
 8000ed2:	f8d9 7000 	ldr.w	r7, [r9]
 8000ed6:	3f01      	subs	r7, #1
 8000ed8:	f8c9 7000 	str.w	r7, [r9]
 8000edc:	e796      	b.n	8000e0c <xTaskIncrementTick+0x84>
    BaseType_t xSwitchRequired = pdFALSE;
 8000ede:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <xTaskIncrementTick+0x1a4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <xTaskIncrementTick+0x1a0>)
 8000eee:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	bf28      	it	cs
 8000ef4:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <xTaskIncrementTick+0x1a8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf18      	it	ne
 8000efe:	2001      	movne	r0, #1
 8000f00:	e004      	b.n	8000f0c <xTaskIncrementTick+0x184>
        ++xPendedTicks;
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <xTaskIncrementTick+0x1ac>)
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	6013      	str	r3, [r2, #0]
    BaseType_t xSwitchRequired = pdFALSE;
 8000f0a:	2000      	movs	r0, #0
}
 8000f0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f10:	20000134 	.word	0x20000134
 8000f14:	200001b8 	.word	0x200001b8
 8000f18:	200000b8 	.word	0x200000b8
 8000f1c:	200000bc 	.word	0x200000bc
 8000f20:	20000170 	.word	0x20000170
 8000f24:	2000016c 	.word	0x2000016c
 8000f28:	200000c0 	.word	0x200000c0
 8000f2c:	200000b4 	.word	0x200000b4
 8000f30:	200001bc 	.word	0x200001bc
 8000f34:	20000174 	.word	0x20000174
 8000f38:	2000013c 	.word	0x2000013c

08000f3c <xTaskResumeAll>:
    configASSERT( uxSchedulerSuspended );
 8000f3c:	4b55      	ldr	r3, [pc, #340]	; (8001094 <xTaskResumeAll+0x158>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b943      	cbnz	r3, 8000f54 <xTaskResumeAll+0x18>
 8000f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f46:	f383 8811 	msr	BASEPRI, r3
 8000f4a:	f3bf 8f6f 	isb	sy
 8000f4e:	f3bf 8f4f 	dsb	sy
 8000f52:	e7fe      	b.n	8000f52 <xTaskResumeAll+0x16>
{
 8000f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    taskENTER_CRITICAL();
 8000f58:	f000 fcd2 	bl	8001900 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <xTaskResumeAll+0x158>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	3a01      	subs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 808b 	bne.w	8001082 <xTaskResumeAll+0x146>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f6c:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <xTaskResumeAll+0x15c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 808c 	beq.w	800108e <xTaskResumeAll+0x152>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <xTaskResumeAll+0x160>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d061      	beq.n	8001042 <xTaskResumeAll+0x106>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f7e:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800109c <xTaskResumeAll+0x160>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f82:	2000      	movs	r0, #0
                    prvAddTaskToReadyList( pxTCB );
 8000f84:	4946      	ldr	r1, [pc, #280]	; (80010a0 <xTaskResumeAll+0x164>)
 8000f86:	f04f 0e01 	mov.w	lr, #1
 8000f8a:	4a46      	ldr	r2, [pc, #280]	; (80010a4 <xTaskResumeAll+0x168>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f8c:	4c46      	ldr	r4, [pc, #280]	; (80010a8 <xTaskResumeAll+0x16c>)
                        xYieldPending = pdTRUE;
 8000f8e:	f8df a120 	ldr.w	sl, [pc, #288]	; 80010b0 <xTaskResumeAll+0x174>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f92:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8000f96:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f98:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8000f9a:	6a1f      	ldr	r7, [r3, #32]
 8000f9c:	69dd      	ldr	r5, [r3, #28]
 8000f9e:	60af      	str	r7, [r5, #8]
 8000fa0:	69dd      	ldr	r5, [r3, #28]
 8000fa2:	607d      	str	r5, [r7, #4]
 8000fa4:	f103 0718 	add.w	r7, r3, #24
 8000fa8:	6875      	ldr	r5, [r6, #4]
 8000faa:	42bd      	cmp	r5, r7
 8000fac:	bf04      	itt	eq
 8000fae:	6a1d      	ldreq	r5, [r3, #32]
 8000fb0:	6075      	streq	r5, [r6, #4]
 8000fb2:	6298      	str	r0, [r3, #40]	; 0x28
 8000fb4:	6837      	ldr	r7, [r6, #0]
 8000fb6:	3f01      	subs	r7, #1
 8000fb8:	6037      	str	r7, [r6, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000fba:	695e      	ldr	r6, [r3, #20]
 8000fbc:	68df      	ldr	r7, [r3, #12]
 8000fbe:	689d      	ldr	r5, [r3, #8]
 8000fc0:	60af      	str	r7, [r5, #8]
 8000fc2:	689d      	ldr	r5, [r3, #8]
 8000fc4:	607d      	str	r5, [r7, #4]
 8000fc6:	1d1f      	adds	r7, r3, #4
 8000fc8:	6875      	ldr	r5, [r6, #4]
 8000fca:	42bd      	cmp	r5, r7
 8000fcc:	bf04      	itt	eq
 8000fce:	68dd      	ldreq	r5, [r3, #12]
 8000fd0:	6075      	streq	r5, [r6, #4]
 8000fd2:	6158      	str	r0, [r3, #20]
 8000fd4:	f8d6 8000 	ldr.w	r8, [r6]
 8000fd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8000fdc:	f8c6 8000 	str.w	r8, [r6]
                    prvAddTaskToReadyList( pxTCB );
 8000fe0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8000fe2:	f8d1 9000 	ldr.w	r9, [r1]
 8000fe6:	fa0e f806 	lsl.w	r8, lr, r6
 8000fea:	ea48 0809 	orr.w	r8, r8, r9
 8000fee:	f8c1 8000 	str.w	r8, [r1]
 8000ff2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000ff6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8000ffa:	6876      	ldr	r6, [r6, #4]
 8000ffc:	609e      	str	r6, [r3, #8]
 8000ffe:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8001002:	f8c3 800c 	str.w	r8, [r3, #12]
 8001006:	f8c8 7004 	str.w	r7, [r8, #4]
 800100a:	60b7      	str	r7, [r6, #8]
 800100c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800100e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8001012:	eb02 0887 	add.w	r8, r2, r7, lsl #2
 8001016:	f8c3 8014 	str.w	r8, [r3, #20]
 800101a:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 800101e:	3701      	adds	r7, #1
 8001020:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001024:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001028:	6827      	ldr	r7, [r4, #0]
 800102a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	429e      	cmp	r6, r3
                        xYieldPending = pdTRUE;
 8001030:	bf28      	it	cs
 8001032:	f8ca e000 	strcs.w	lr, [sl]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001036:	f8dc 3000 	ldr.w	r3, [ip]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1a9      	bne.n	8000f92 <xTaskResumeAll+0x56>
                    prvResetNextTaskUnblockTime();
 800103e:	f7ff fc2b 	bl	8000898 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <xTaskResumeAll+0x170>)
 8001044:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8001046:	b16c      	cbz	r4, 8001064 <xTaskResumeAll+0x128>
                                xYieldPending = pdTRUE;
 8001048:	4e19      	ldr	r6, [pc, #100]	; (80010b0 <xTaskResumeAll+0x174>)
 800104a:	2501      	movs	r5, #1
 800104c:	e001      	b.n	8001052 <xTaskResumeAll+0x116>
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800104e:	3c01      	subs	r4, #1
 8001050:	d005      	beq.n	800105e <xTaskResumeAll+0x122>
                            if( xTaskIncrementTick() != pdFALSE )
 8001052:	f7ff fe99 	bl	8000d88 <xTaskIncrementTick>
 8001056:	2800      	cmp	r0, #0
 8001058:	d0f9      	beq.n	800104e <xTaskResumeAll+0x112>
                                xYieldPending = pdTRUE;
 800105a:	6035      	str	r5, [r6, #0]
 800105c:	e7f7      	b.n	800104e <xTaskResumeAll+0x112>
                        xPendedTicks = 0;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <xTaskResumeAll+0x170>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <xTaskResumeAll+0x174>)
 8001066:	681c      	ldr	r4, [r3, #0]
 8001068:	b164      	cbz	r4, 8001084 <xTaskResumeAll+0x148>
                    taskYIELD_IF_USING_PREEMPTION();
 800106a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001072:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 800107e:	2401      	movs	r4, #1
 8001080:	e000      	b.n	8001084 <xTaskResumeAll+0x148>
    BaseType_t xAlreadyYielded = pdFALSE;
 8001082:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8001084:	f000 fc5e 	bl	8001944 <vPortExitCritical>
}
 8001088:	4620      	mov	r0, r4
 800108a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
 800108e:	2400      	movs	r4, #0
 8001090:	e7f8      	b.n	8001084 <xTaskResumeAll+0x148>
 8001092:	bf00      	nop
 8001094:	20000134 	.word	0x20000134
 8001098:	2000012c 	.word	0x2000012c
 800109c:	20000178 	.word	0x20000178
 80010a0:	2000013c 	.word	0x2000013c
 80010a4:	200000c0 	.word	0x200000c0
 80010a8:	200000b4 	.word	0x200000b4
 80010ac:	20000174 	.word	0x20000174
 80010b0:	200001bc 	.word	0x200001bc

080010b4 <vTaskDelay>:
    {
 80010b4:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 80010b6:	b1a8      	cbz	r0, 80010e4 <vTaskDelay+0x30>
 80010b8:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <vTaskDelay+0x48>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b143      	cbz	r3, 80010d2 <vTaskDelay+0x1e>
 80010c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010c4:	f383 8811 	msr	BASEPRI, r3
 80010c8:	f3bf 8f6f 	isb	sy
 80010cc:	f3bf 8f4f 	dsb	sy
 80010d0:	e7fe      	b.n	80010d0 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 80010d2:	f7ff fe4b 	bl	8000d6c <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80010d6:	2100      	movs	r1, #0
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff fd2f 	bl	8000b3c <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80010de:	f7ff ff2d 	bl	8000f3c <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 80010e2:	b948      	cbnz	r0, 80010f8 <vTaskDelay+0x44>
            portYIELD_WITHIN_API();
 80010e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80010e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80010f0:	f3bf 8f4f 	dsb	sy
 80010f4:	f3bf 8f6f 	isb	sy
    }
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	bf00      	nop
 80010fc:	20000134 	.word	0x20000134

08001100 <vTaskSwitchContext>:
{
 8001100:	b508      	push	{r3, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <vTaskSwitchContext+0xdc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b11b      	cbz	r3, 8001110 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <vTaskSwitchContext+0xe0>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
}
 800110e:	bd08      	pop	{r3, pc}
        xYieldPending = pdFALSE;
 8001110:	2200      	movs	r2, #0
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <vTaskSwitchContext+0xe0>)
 8001114:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <vTaskSwitchContext+0xe4>)
 8001118:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <vTaskSwitchContext+0xe8>)
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	4293      	cmp	r3, r2
 8001122:	d907      	bls.n	8001134 <vTaskSwitchContext+0x34>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8001124:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <vTaskSwitchContext+0xe4>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <vTaskSwitchContext+0xec>)
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800112e:	1a9b      	subs	r3, r3, r2
 8001130:	4403      	add	r3, r0
 8001132:	65cb      	str	r3, [r1, #92]	; 0x5c
                ulTaskSwitchedInTime = ulTotalRunTime;
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <vTaskSwitchContext+0xe4>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <vTaskSwitchContext+0xe8>)
 800113a:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <vTaskSwitchContext+0xec>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8001148:	d103      	bne.n	8001152 <vTaskSwitchContext+0x52>
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8001150:	d01b      	beq.n	800118a <vTaskSwitchContext+0x8a>
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <vTaskSwitchContext+0xec>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	3134      	adds	r1, #52	; 0x34
 800115a:	f000 fe95 	bl	8001e88 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <vTaskSwitchContext+0xf0>)
 8001160:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f1c3 031f 	rsb	r3, r3, #31
 800116c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4920      	ldr	r1, [pc, #128]	; (80011f4 <vTaskSwitchContext+0xf4>)
 8001174:	588a      	ldr	r2, [r1, r2]
 8001176:	b98a      	cbnz	r2, 800119c <vTaskSwitchContext+0x9c>
        __asm volatile
 8001178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800117c:	f383 8811 	msr	BASEPRI, r3
 8001180:	f3bf 8f6f 	isb	sy
 8001184:	f3bf 8f4f 	dsb	sy
 8001188:	e7fe      	b.n	8001188 <vTaskSwitchContext+0x88>
        taskCHECK_FOR_STACK_OVERFLOW();
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8001190:	d1df      	bne.n	8001152 <vTaskSwitchContext+0x52>
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8001198:	d1db      	bne.n	8001152 <vTaskSwitchContext+0x52>
 800119a:	e7e0      	b.n	800115e <vTaskSwitchContext+0x5e>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800119c:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <vTaskSwitchContext+0xf4>)
 800119e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80011a2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80011a6:	6848      	ldr	r0, [r1, #4]
 80011a8:	6840      	ldr	r0, [r0, #4]
 80011aa:	6048      	str	r0, [r1, #4]
 80011ac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80011b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80011b4:	3208      	adds	r2, #8
 80011b6:	4290      	cmp	r0, r2
 80011b8:	d009      	beq.n	80011ce <vTaskSwitchContext+0xce>
 80011ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011be:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <vTaskSwitchContext+0xf4>)
 80011c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <vTaskSwitchContext+0xec>)
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	e79f      	b.n	800110e <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011ce:	6840      	ldr	r0, [r0, #4]
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <vTaskSwitchContext+0xf4>)
 80011d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80011d6:	6050      	str	r0, [r2, #4]
 80011d8:	e7ef      	b.n	80011ba <vTaskSwitchContext+0xba>
 80011da:	bf00      	nop
 80011dc:	20000134 	.word	0x20000134
 80011e0:	200001bc 	.word	0x200001bc
 80011e4:	20000128 	.word	0x20000128
 80011e8:	20000124 	.word	0x20000124
 80011ec:	200000b4 	.word	0x200000b4
 80011f0:	2000013c 	.word	0x2000013c
 80011f4:	200000c0 	.word	0x200000c0

080011f8 <vTaskPlaceOnEventList>:
    configASSERT( pxEventList );
 80011f8:	b158      	cbz	r0, 8001212 <vTaskPlaceOnEventList+0x1a>
{
 80011fa:	b510      	push	{r4, lr}
 80011fc:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <vTaskPlaceOnEventList+0x2c>)
 8001200:	6811      	ldr	r1, [r2, #0]
 8001202:	3118      	adds	r1, #24
 8001204:	f7fe ff7a 	bl	80000fc <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001208:	2101      	movs	r1, #1
 800120a:	4620      	mov	r0, r4
 800120c:	f7ff fc96 	bl	8000b3c <prvAddCurrentTaskToDelayedList>
}
 8001210:	bd10      	pop	{r4, pc}
 8001212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001216:	f383 8811 	msr	BASEPRI, r3
 800121a:	f3bf 8f6f 	isb	sy
 800121e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
 8001222:	e7fe      	b.n	8001222 <vTaskPlaceOnEventList+0x2a>
 8001224:	200000b4 	.word	0x200000b4

08001228 <vTaskPlaceOnEventListRestricted>:
    {
 8001228:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxEventList );
 800122a:	b1e0      	cbz	r0, 8001266 <vTaskPlaceOnEventListRestricted+0x3e>
 800122c:	468c      	mov	ip, r1
 800122e:	4611      	mov	r1, r2
 8001230:	4605      	mov	r5, r0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001232:	6842      	ldr	r2, [r0, #4]
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <vTaskPlaceOnEventListRestricted+0x50>)
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	61c2      	str	r2, [r0, #28]
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	6894      	ldr	r4, [r2, #8]
 800123e:	6204      	str	r4, [r0, #32]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	3018      	adds	r0, #24
 8001244:	6060      	str	r0, [r4, #4]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	3018      	adds	r0, #24
 800124a:	6090      	str	r0, [r2, #8]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	629d      	str	r5, [r3, #40]	; 0x28
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	602b      	str	r3, [r5, #0]
            xTicksToWait = portMAX_DELAY;
 8001256:	2900      	cmp	r1, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001258:	bf0c      	ite	eq
 800125a:	4660      	moveq	r0, ip
 800125c:	f04f 30ff 	movne.w	r0, #4294967295
 8001260:	f7ff fc6c 	bl	8000b3c <prvAddCurrentTaskToDelayedList>
    }
 8001264:	bd38      	pop	{r3, r4, r5, pc}
 8001266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126a:	f383 8811 	msr	BASEPRI, r3
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventList );
 8001276:	e7fe      	b.n	8001276 <vTaskPlaceOnEventListRestricted+0x4e>
 8001278:	200000b4 	.word	0x200000b4

0800127c <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800127c:	68c3      	ldr	r3, [r0, #12]
 800127e:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8001280:	2b00      	cmp	r3, #0
 8001282:	d04f      	beq.n	8001324 <xTaskRemoveFromEventList+0xa8>
{
 8001284:	b430      	push	{r4, r5}
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001288:	69d8      	ldr	r0, [r3, #28]
 800128a:	6a19      	ldr	r1, [r3, #32]
 800128c:	6081      	str	r1, [r0, #8]
 800128e:	69d8      	ldr	r0, [r3, #28]
 8001290:	6048      	str	r0, [r1, #4]
 8001292:	f103 0018 	add.w	r0, r3, #24
 8001296:	6851      	ldr	r1, [r2, #4]
 8001298:	4281      	cmp	r1, r0
 800129a:	bf04      	itt	eq
 800129c:	6a19      	ldreq	r1, [r3, #32]
 800129e:	6051      	streq	r1, [r2, #4]
 80012a0:	2100      	movs	r1, #0
 80012a2:	6299      	str	r1, [r3, #40]	; 0x28
 80012a4:	6811      	ldr	r1, [r2, #0]
 80012a6:	3901      	subs	r1, #1
 80012a8:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012aa:	4a29      	ldr	r2, [pc, #164]	; (8001350 <xTaskRemoveFromEventList+0xd4>)
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d141      	bne.n	8001336 <xTaskRemoveFromEventList+0xba>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	6898      	ldr	r0, [r3, #8]
 80012b6:	68d9      	ldr	r1, [r3, #12]
 80012b8:	6081      	str	r1, [r0, #8]
 80012ba:	6898      	ldr	r0, [r3, #8]
 80012bc:	6048      	str	r0, [r1, #4]
 80012be:	1d18      	adds	r0, r3, #4
 80012c0:	6851      	ldr	r1, [r2, #4]
 80012c2:	4281      	cmp	r1, r0
 80012c4:	bf04      	itt	eq
 80012c6:	68d9      	ldreq	r1, [r3, #12]
 80012c8:	6051      	streq	r1, [r2, #4]
 80012ca:	2100      	movs	r1, #0
 80012cc:	6159      	str	r1, [r3, #20]
 80012ce:	6811      	ldr	r1, [r2, #0]
 80012d0:	3901      	subs	r1, #1
 80012d2:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80012d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d6:	4c1f      	ldr	r4, [pc, #124]	; (8001354 <xTaskRemoveFromEventList+0xd8>)
 80012d8:	6825      	ldr	r5, [r4, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	4091      	lsls	r1, r2
 80012de:	4329      	orrs	r1, r5
 80012e0:	6021      	str	r1, [r4, #0]
 80012e2:	491d      	ldr	r1, [pc, #116]	; (8001358 <xTaskRemoveFromEventList+0xdc>)
 80012e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80012e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80012ec:	6852      	ldr	r2, [r2, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	6894      	ldr	r4, [r2, #8]
 80012f2:	60dc      	str	r4, [r3, #12]
 80012f4:	6060      	str	r0, [r4, #4]
 80012f6:	6090      	str	r0, [r2, #8]
 80012f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fa:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80012fe:	0084      	lsls	r4, r0, #2
 8001300:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8001304:	6158      	str	r0, [r3, #20]
 8001306:	5908      	ldr	r0, [r1, r4]
 8001308:	3001      	adds	r0, #1
 800130a:	5108      	str	r0, [r1, r4]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <xTaskRemoveFromEventList+0xe0>)
 800130e:	6811      	ldr	r1, [r2, #0]
 8001310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001312:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001314:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
 8001316:	bf83      	ittte	hi
 8001318:	2001      	movhi	r0, #1
 800131a:	4b11      	ldrhi	r3, [pc, #68]	; (8001360 <xTaskRemoveFromEventList+0xe4>)
 800131c:	6018      	strhi	r0, [r3, #0]
        xReturn = pdFALSE;
 800131e:	2000      	movls	r0, #0
}
 8001320:	bc30      	pop	{r4, r5}
 8001322:	4770      	bx	lr
 8001324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001328:	f383 8811 	msr	BASEPRI, r3
 800132c:	f3bf 8f6f 	isb	sy
 8001330:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
 8001334:	e7fe      	b.n	8001334 <xTaskRemoveFromEventList+0xb8>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <xTaskRemoveFromEventList+0xe8>)
 8001338:	6851      	ldr	r1, [r2, #4]
 800133a:	61d9      	str	r1, [r3, #28]
 800133c:	688c      	ldr	r4, [r1, #8]
 800133e:	621c      	str	r4, [r3, #32]
 8001340:	6060      	str	r0, [r4, #4]
 8001342:	6088      	str	r0, [r1, #8]
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
 8001346:	6811      	ldr	r1, [r2, #0]
 8001348:	3101      	adds	r1, #1
 800134a:	6011      	str	r1, [r2, #0]
 800134c:	e7de      	b.n	800130c <xTaskRemoveFromEventList+0x90>
 800134e:	bf00      	nop
 8001350:	20000134 	.word	0x20000134
 8001354:	2000013c 	.word	0x2000013c
 8001358:	200000c0 	.word	0x200000c0
 800135c:	200000b4 	.word	0x200000b4
 8001360:	200001bc 	.word	0x200001bc
 8001364:	20000178 	.word	0x20000178

08001368 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <vTaskInternalSetTimeOutState+0x10>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800136e:	4b03      	ldr	r3, [pc, #12]	; (800137c <vTaskInternalSetTimeOutState+0x14>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6043      	str	r3, [r0, #4]
}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000170 	.word	0x20000170
 800137c:	200001b8 	.word	0x200001b8

08001380 <xTaskCheckForTimeOut>:
    configASSERT( pxTimeOut );
 8001380:	b1b0      	cbz	r0, 80013b0 <xTaskCheckForTimeOut+0x30>
{
 8001382:	b570      	push	{r4, r5, r6, lr}
 8001384:	460c      	mov	r4, r1
 8001386:	4605      	mov	r5, r0
    configASSERT( pxTicksToWait );
 8001388:	b1d9      	cbz	r1, 80013c2 <xTaskCheckForTimeOut+0x42>
    taskENTER_CRITICAL();
 800138a:	f000 fab9 	bl	8001900 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <xTaskCheckForTimeOut+0x98>)
 8001390:	681a      	ldr	r2, [r3, #0]
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <xTaskCheckForTimeOut+0x9c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800139a:	b1db      	cbz	r3, 80013d4 <xTaskCheckForTimeOut+0x54>
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <xTaskCheckForTimeOut+0x9c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
                xReturn = pdTRUE;
 80013a6:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
 80013a8:	f000 facc 	bl	8001944 <vPortExitCritical>
}
 80013ac:	4620      	mov	r0, r4
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b4:	f383 8811 	msr	BASEPRI, r3
 80013b8:	f3bf 8f6f 	isb	sy
 80013bc:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
 80013c0:	e7fe      	b.n	80013c0 <xTaskCheckForTimeOut+0x40>
 80013c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c6:	f383 8811 	msr	BASEPRI, r3
 80013ca:	f3bf 8f6f 	isb	sy
 80013ce:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTicksToWait );
 80013d2:	e7fe      	b.n	80013d2 <xTaskCheckForTimeOut+0x52>
            if( *pxTicksToWait == portMAX_DELAY )
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013da:	d01a      	beq.n	8001412 <xTaskCheckForTimeOut+0x92>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80013dc:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80013de:	4810      	ldr	r0, [pc, #64]	; (8001420 <xTaskCheckForTimeOut+0xa0>)
 80013e0:	6800      	ldr	r0, [r0, #0]
 80013e2:	682e      	ldr	r6, [r5, #0]
 80013e4:	4286      	cmp	r6, r0
 80013e6:	d005      	beq.n	80013f4 <xTaskCheckForTimeOut+0x74>
 80013e8:	4291      	cmp	r1, r2
 80013ea:	d803      	bhi.n	80013f4 <xTaskCheckForTimeOut+0x74>
            *pxTicksToWait = ( TickType_t ) 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 80013f0:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80013f2:	e7d9      	b.n	80013a8 <xTaskCheckForTimeOut+0x28>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80013f4:	1a50      	subs	r0, r2, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80013f6:	4283      	cmp	r3, r0
 80013f8:	d803      	bhi.n	8001402 <xTaskCheckForTimeOut+0x82>
            *pxTicksToWait = ( TickType_t ) 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 80013fe:	2401      	movs	r4, #1
 8001400:	e7d2      	b.n	80013a8 <xTaskCheckForTimeOut+0x28>
            *pxTicksToWait -= xElapsedTime;
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	440b      	add	r3, r1
 8001406:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001408:	4628      	mov	r0, r5
 800140a:	f7ff ffad 	bl	8001368 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800140e:	2400      	movs	r4, #0
 8001410:	e7ca      	b.n	80013a8 <xTaskCheckForTimeOut+0x28>
                xReturn = pdFALSE;
 8001412:	2400      	movs	r4, #0
 8001414:	e7c8      	b.n	80013a8 <xTaskCheckForTimeOut+0x28>
 8001416:	bf00      	nop
 8001418:	200001b8 	.word	0x200001b8
 800141c:	200000b4 	.word	0x200000b4
 8001420:	20000170 	.word	0x20000170

08001424 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8001424:	4b01      	ldr	r3, [pc, #4]	; (800142c <vTaskMissedYield+0x8>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
}
 800142a:	4770      	bx	lr
 800142c:	200001bc 	.word	0x200001bc

08001430 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <xTaskGetSchedulerState+0x18>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b133      	cbz	r3, 8001444 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <xTaskGetSchedulerState+0x1c>)
 8001438:	681b      	ldr	r3, [r3, #0]
                xReturn = taskSCHEDULER_SUSPENDED;
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf0c      	ite	eq
 800143e:	2002      	moveq	r0, #2
 8001440:	2000      	movne	r0, #0
 8001442:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001444:	2001      	movs	r0, #1
    }
 8001446:	4770      	bx	lr
 8001448:	2000018c 	.word	0x2000018c
 800144c:	20000134 	.word	0x20000134

08001450 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 8001450:	2800      	cmp	r0, #0
 8001452:	d051      	beq.n	80014f8 <xTaskPriorityDisinherit+0xa8>
    {
 8001454:	b570      	push	{r4, r5, r6, lr}
 8001456:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <xTaskPriorityDisinherit+0xb0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4283      	cmp	r3, r0
 800145e:	d008      	beq.n	8001472 <xTaskPriorityDisinherit+0x22>
 8001460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	e7fe      	b.n	8001470 <xTaskPriorityDisinherit+0x20>
            configASSERT( pxTCB->uxMutexesHeld );
 8001472:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001474:	b943      	cbnz	r3, 8001488 <xTaskPriorityDisinherit+0x38>
 8001476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
 8001486:	e7fe      	b.n	8001486 <xTaskPriorityDisinherit+0x36>
            ( pxTCB->uxMutexesHeld )--;
 8001488:	3b01      	subs	r3, #1
 800148a:	64c3      	str	r3, [r0, #76]	; 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800148c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800148e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001490:	4291      	cmp	r1, r2
 8001492:	d033      	beq.n	80014fc <xTaskPriorityDisinherit+0xac>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001494:	b10b      	cbz	r3, 800149a <xTaskPriorityDisinherit+0x4a>
        BaseType_t xReturn = pdFALSE;
 8001496:	2000      	movs	r0, #0
    }
 8001498:	bd70      	pop	{r4, r5, r6, pc}
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800149a:	1d05      	adds	r5, r0, #4
 800149c:	4628      	mov	r0, r5
 800149e:	f7fe fe46 	bl	800012e <uxListRemove>
 80014a2:	b938      	cbnz	r0, 80014b4 <xTaskPriorityDisinherit+0x64>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80014a4:	4917      	ldr	r1, [pc, #92]	; (8001504 <xTaskPriorityDisinherit+0xb4>)
 80014a6:	680b      	ldr	r3, [r1, #0]
 80014a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80014aa:	2201      	movs	r2, #1
 80014ac:	4082      	lsls	r2, r0
 80014ae:	ea23 0302 	bic.w	r3, r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80014b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014b6:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014b8:	f1c3 0205 	rsb	r2, r3, #5
 80014bc:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 80014be:	4911      	ldr	r1, [pc, #68]	; (8001504 <xTaskPriorityDisinherit+0xb4>)
 80014c0:	680e      	ldr	r6, [r1, #0]
 80014c2:	2001      	movs	r0, #1
 80014c4:	fa00 f203 	lsl.w	r2, r0, r3
 80014c8:	4332      	orrs	r2, r6
 80014ca:	600a      	str	r2, [r1, #0]
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <xTaskPriorityDisinherit+0xb8>)
 80014ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	60a3      	str	r3, [r4, #8]
 80014da:	6899      	ldr	r1, [r3, #8]
 80014dc:	60e1      	str	r1, [r4, #12]
 80014de:	604d      	str	r5, [r1, #4]
 80014e0:	609d      	str	r5, [r3, #8]
 80014e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014e4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80014e8:	008d      	lsls	r5, r1, #2
 80014ea:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80014ee:	6161      	str	r1, [r4, #20]
 80014f0:	5951      	ldr	r1, [r2, r5]
 80014f2:	4401      	add	r1, r0
 80014f4:	5151      	str	r1, [r2, r5]
                    xReturn = pdTRUE;
 80014f6:	e7cf      	b.n	8001498 <xTaskPriorityDisinherit+0x48>
        BaseType_t xReturn = pdFALSE;
 80014f8:	2000      	movs	r0, #0
    }
 80014fa:	4770      	bx	lr
        BaseType_t xReturn = pdFALSE;
 80014fc:	2000      	movs	r0, #0
 80014fe:	e7cb      	b.n	8001498 <xTaskPriorityDisinherit+0x48>
 8001500:	200000b4 	.word	0x200000b4
 8001504:	2000013c 	.word	0x2000013c
 8001508:	200000c0 	.word	0x200000c0

0800150c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800150c:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800150e:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001510:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001512:	4291      	cmp	r1, r2
 8001514:	d80c      	bhi.n	8001530 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001516:	1ad2      	subs	r2, r2, r3
 8001518:	6983      	ldr	r3, [r0, #24]
 800151a:	429a      	cmp	r2, r3
 800151c:	d301      	bcc.n	8001522 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800151e:	2001      	movs	r0, #1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
 8001520:	bd08      	pop	{r3, pc}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001522:	1d01      	adds	r1, r0, #4
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <prvInsertTimerInActiveList+0x40>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	f7fe fde8 	bl	80000fc <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 800152c:	2000      	movs	r0, #0
 800152e:	e7f7      	b.n	8001520 <prvInsertTimerInActiveList+0x14>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001530:	429a      	cmp	r2, r3
 8001532:	d201      	bcs.n	8001538 <prvInsertTimerInActiveList+0x2c>
 8001534:	4299      	cmp	r1, r3
 8001536:	d206      	bcs.n	8001546 <prvInsertTimerInActiveList+0x3a>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001538:	1d01      	adds	r1, r0, #4
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <prvInsertTimerInActiveList+0x44>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	f7fe fddd 	bl	80000fc <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8001542:	2000      	movs	r0, #0
 8001544:	e7ec      	b.n	8001520 <prvInsertTimerInActiveList+0x14>
                xProcessTimerNow = pdTRUE;
 8001546:	2001      	movs	r0, #1
        return xProcessTimerNow;
 8001548:	e7ea      	b.n	8001520 <prvInsertTimerInActiveList+0x14>
 800154a:	bf00      	nop
 800154c:	200001c4 	.word	0x200001c4
 8001550:	200001c0 	.word	0x200001c0

08001554 <prvReloadTimer>:
    {
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	4604      	mov	r4, r0
 8001558:	460d      	mov	r5, r1
 800155a:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800155c:	e004      	b.n	8001568 <prvReloadTimer+0x14>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800155e:	69a3      	ldr	r3, [r4, #24]
 8001560:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001562:	6a23      	ldr	r3, [r4, #32]
 8001564:	4620      	mov	r0, r4
 8001566:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001568:	69a1      	ldr	r1, [r4, #24]
 800156a:	462b      	mov	r3, r5
 800156c:	4632      	mov	r2, r6
 800156e:	4429      	add	r1, r5
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff ffcb 	bl	800150c <prvInsertTimerInActiveList>
 8001576:	2800      	cmp	r0, #0
 8001578:	d1f1      	bne.n	800155e <prvReloadTimer+0xa>
    }
 800157a:	bd70      	pop	{r4, r5, r6, pc}

0800157c <prvProcessExpiredTimer>:
    {
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	4605      	mov	r5, r0
 8001580:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <prvProcessExpiredTimer+0x3c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800158a:	1d20      	adds	r0, r4, #4
 800158c:	f7fe fdcf 	bl	800012e <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001590:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001594:	f013 0f04 	tst.w	r3, #4
 8001598:	d107      	bne.n	80015aa <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80015a2:	6a23      	ldr	r3, [r4, #32]
 80015a4:	4620      	mov	r0, r4
 80015a6:	4798      	blx	r3
    }
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80015aa:	4632      	mov	r2, r6
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff ffd0 	bl	8001554 <prvReloadTimer>
 80015b4:	e7f5      	b.n	80015a2 <prvProcessExpiredTimer+0x26>
 80015b6:	bf00      	nop
 80015b8:	200001c0 	.word	0x200001c0

080015bc <prvSampleTimeNow>:
    {
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 80015c0:	f7ff fbdc 	bl	8000d7c <xTaskGetTickCount>
 80015c4:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <prvSampleTimeNow+0x50>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4283      	cmp	r3, r0
 80015cc:	d805      	bhi.n	80015da <prvSampleTimeNow+0x1e>
            *pxTimerListsWereSwitched = pdFALSE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <prvSampleTimeNow+0x50>)
 80015d4:	601c      	str	r4, [r3, #0]
    }
 80015d6:	4620      	mov	r0, r4
 80015d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <prvSampleTimeNow+0x54>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	b15a      	cbz	r2, 80015fa <prvSampleTimeNow+0x3e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80015e2:	f04f 37ff 	mov.w	r7, #4294967295
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80015e6:	4e0a      	ldr	r6, [pc, #40]	; (8001610 <prvSampleTimeNow+0x54>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80015e8:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80015ea:	4639      	mov	r1, r7
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	f7ff ffc5 	bl	800157c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80015f2:	6833      	ldr	r3, [r6, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d1f6      	bne.n	80015e8 <prvSampleTimeNow+0x2c>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 80015fa:	4a06      	ldr	r2, [pc, #24]	; (8001614 <prvSampleTimeNow+0x58>)
 80015fc:	6810      	ldr	r0, [r2, #0]
 80015fe:	4904      	ldr	r1, [pc, #16]	; (8001610 <prvSampleTimeNow+0x54>)
 8001600:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
 8001602:	6013      	str	r3, [r2, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 8001604:	2301      	movs	r3, #1
 8001606:	602b      	str	r3, [r5, #0]
 8001608:	e7e3      	b.n	80015d2 <prvSampleTimeNow+0x16>
 800160a:	bf00      	nop
 800160c:	2000022c 	.word	0x2000022c
 8001610:	200001c0 	.word	0x200001c0
 8001614:	200001c4 	.word	0x200001c4

08001618 <prvTimerTask>:
    {
 8001618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800161c:	b084      	sub	sp, #16
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800161e:	4f56      	ldr	r7, [pc, #344]	; (8001778 <prvTimerTask+0x160>)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001620:	4d56      	ldr	r5, [pc, #344]	; (800177c <prvTimerTask+0x164>)
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681e      	ldr	r6, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 8001626:	b196      	cbz	r6, 800164e <prvTimerTask+0x36>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	681e      	ldr	r6, [r3, #0]
        vTaskSuspendAll();
 800162c:	f7ff fb9e 	bl	8000d6c <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001630:	a801      	add	r0, sp, #4
 8001632:	f7ff ffc3 	bl	80015bc <prvSampleTimeNow>
 8001636:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
 8001638:	9a01      	ldr	r2, [sp, #4]
 800163a:	bb42      	cbnz	r2, 800168e <prvTimerTask+0x76>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800163c:	42b0      	cmp	r0, r6
 800163e:	d314      	bcc.n	800166a <prvTimerTask+0x52>
                    ( void ) xTaskResumeAll();
 8001640:	f7ff fc7c 	bl	8000f3c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001644:	4621      	mov	r1, r4
 8001646:	4630      	mov	r0, r6
 8001648:	f7ff ff98 	bl	800157c <prvProcessExpiredTimer>
 800164c:	e021      	b.n	8001692 <prvTimerTask+0x7a>
        vTaskSuspendAll();
 800164e:	f7ff fb8d 	bl	8000d6c <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001652:	a801      	add	r0, sp, #4
 8001654:	f7ff ffb2 	bl	80015bc <prvSampleTimeNow>
 8001658:	4604      	mov	r4, r0
            if( xTimerListsWereSwitched == pdFALSE )
 800165a:	9b01      	ldr	r3, [sp, #4]
 800165c:	b9bb      	cbnz	r3, 800168e <prvTimerTask+0x76>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800165e:	4b48      	ldr	r3, [pc, #288]	; (8001780 <prvTimerTask+0x168>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	fab2 f282 	clz	r2, r2
 8001668:	0952      	lsrs	r2, r2, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800166a:	1b31      	subs	r1, r6, r4
 800166c:	6828      	ldr	r0, [r5, #0]
 800166e:	f7ff f8eb 	bl	8000848 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001672:	f7ff fc63 	bl	8000f3c <xTaskResumeAll>
 8001676:	b960      	cbnz	r0, 8001692 <prvTimerTask+0x7a>
                        portYIELD_WITHIN_API();
 8001678:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800167c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001680:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001684:	f3bf 8f4f 	dsb	sy
 8001688:	f3bf 8f6f 	isb	sy
 800168c:	e001      	b.n	8001692 <prvTimerTask+0x7a>
                ( void ) xTaskResumeAll();
 800168e:	f7ff fc55 	bl	8000f3c <xTaskResumeAll>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001692:	2400      	movs	r4, #0
 8001694:	4622      	mov	r2, r4
 8001696:	a901      	add	r1, sp, #4
 8001698:	6828      	ldr	r0, [r5, #0]
 800169a:	f7fe fff9 	bl	8000690 <xQueueReceive>
 800169e:	2800      	cmp	r0, #0
 80016a0:	d0bf      	beq.n	8001622 <prvTimerTask+0xa>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80016a2:	9b01      	ldr	r3, [sp, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dbf5      	blt.n	8001694 <prvTimerTask+0x7c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80016a8:	9e03      	ldr	r6, [sp, #12]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80016aa:	6973      	ldr	r3, [r6, #20]
 80016ac:	b113      	cbz	r3, 80016b4 <prvTimerTask+0x9c>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80016ae:	1d30      	adds	r0, r6, #4
 80016b0:	f7fe fd3d 	bl	800012e <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80016b4:	4668      	mov	r0, sp
 80016b6:	f7ff ff81 	bl	80015bc <prvSampleTimeNow>
 80016ba:	4680      	mov	r8, r0
                switch( xMessage.xMessageID )
 80016bc:	9b01      	ldr	r3, [sp, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d8e7      	bhi.n	8001694 <prvTimerTask+0x7c>
 80016c4:	e8df f003 	tbb	[pc, r3]
 80016c8:	30290505 	.word	0x30290505
 80016cc:	29050549 	.word	0x29050549
 80016d0:	30          	.byte	0x30
 80016d1:	00          	.byte	0x00
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80016d2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80016de:	9b02      	ldr	r3, [sp, #8]
 80016e0:	69b1      	ldr	r1, [r6, #24]
 80016e2:	4602      	mov	r2, r0
 80016e4:	4419      	add	r1, r3
 80016e6:	4630      	mov	r0, r6
 80016e8:	f7ff ff10 	bl	800150c <prvInsertTimerInActiveList>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d0d1      	beq.n	8001694 <prvTimerTask+0x7c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80016f0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80016f4:	f013 0f04 	tst.w	r3, #4
 80016f8:	d107      	bne.n	800170a <prvTimerTask+0xf2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001702:	6a33      	ldr	r3, [r6, #32]
 8001704:	4630      	mov	r0, r6
 8001706:	4798      	blx	r3
 8001708:	e7c4      	b.n	8001694 <prvTimerTask+0x7c>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800170a:	69b3      	ldr	r3, [r6, #24]
 800170c:	4642      	mov	r2, r8
 800170e:	9902      	ldr	r1, [sp, #8]
 8001710:	4419      	add	r1, r3
 8001712:	4630      	mov	r0, r6
 8001714:	f7ff ff1e 	bl	8001554 <prvReloadTimer>
 8001718:	e7f3      	b.n	8001702 <prvTimerTask+0xea>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800171a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        break;
 8001726:	e7b5      	b.n	8001694 <prvTimerTask+0x7c>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001728:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001734:	9902      	ldr	r1, [sp, #8]
 8001736:	61b1      	str	r1, [r6, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001738:	b131      	cbz	r1, 8001748 <prvTimerTask+0x130>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800173a:	4603      	mov	r3, r0
 800173c:	4602      	mov	r2, r0
 800173e:	4401      	add	r1, r0
 8001740:	4630      	mov	r0, r6
 8001742:	f7ff fee3 	bl	800150c <prvInsertTimerInActiveList>
                        break;
 8001746:	e7a5      	b.n	8001694 <prvTimerTask+0x7c>
 8001748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800174c:	f383 8811 	msr	BASEPRI, r3
 8001750:	f3bf 8f6f 	isb	sy
 8001754:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001758:	e7fe      	b.n	8001758 <prvTimerTask+0x140>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800175a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800175e:	f013 0f02 	tst.w	r3, #2
 8001762:	d004      	beq.n	800176e <prvTimerTask+0x156>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800176c:	e792      	b.n	8001694 <prvTimerTask+0x7c>
                                    vPortFree( pxTimer );
 800176e:	4630      	mov	r0, r6
 8001770:	f000 fa76 	bl	8001c60 <vPortFree>
 8001774:	e78e      	b.n	8001694 <prvTimerTask+0x7c>
 8001776:	bf00      	nop
 8001778:	200001c0 	.word	0x200001c0
 800177c:	20000284 	.word	0x20000284
 8001780:	200001c4 	.word	0x200001c4

08001784 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001784:	b530      	push	{r4, r5, lr}
 8001786:	b083      	sub	sp, #12
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001788:	f000 f8ba 	bl	8001900 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <prvCheckForValidListAndQueue+0x50>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b11b      	cbz	r3, 800179a <prvCheckForValidListAndQueue+0x16>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001792:	f000 f8d7 	bl	8001944 <vPortExitCritical>
    }
 8001796:	b003      	add	sp, #12
 8001798:	bd30      	pop	{r4, r5, pc}
                vListInitialise( &xActiveTimerList1 );
 800179a:	4d0f      	ldr	r5, [pc, #60]	; (80017d8 <prvCheckForValidListAndQueue+0x54>)
 800179c:	4628      	mov	r0, r5
 800179e:	f7fe fc9f 	bl	80000e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80017a2:	4c0e      	ldr	r4, [pc, #56]	; (80017dc <prvCheckForValidListAndQueue+0x58>)
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7fe fc9b 	bl	80000e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <prvCheckForValidListAndQueue+0x5c>)
 80017ac:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <prvCheckForValidListAndQueue+0x60>)
 80017b0:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <prvCheckForValidListAndQueue+0x64>)
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <prvCheckForValidListAndQueue+0x68>)
 80017ba:	210c      	movs	r1, #12
 80017bc:	2005      	movs	r0, #5
 80017be:	f7fe fdff 	bl	80003c0 <xQueueGenericCreateStatic>
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <prvCheckForValidListAndQueue+0x50>)
 80017c4:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
 80017c6:	2800      	cmp	r0, #0
 80017c8:	d0e3      	beq.n	8001792 <prvCheckForValidListAndQueue+0xe>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80017ca:	4909      	ldr	r1, [pc, #36]	; (80017f0 <prvCheckForValidListAndQueue+0x6c>)
 80017cc:	f7ff f812 	bl	80007f4 <vQueueAddToRegistry>
 80017d0:	e7df      	b.n	8001792 <prvCheckForValidListAndQueue+0xe>
 80017d2:	bf00      	nop
 80017d4:	20000284 	.word	0x20000284
 80017d8:	20000204 	.word	0x20000204
 80017dc:	20000218 	.word	0x20000218
 80017e0:	200001c0 	.word	0x200001c0
 80017e4:	200001c4 	.word	0x200001c4
 80017e8:	20000230 	.word	0x20000230
 80017ec:	200001c8 	.word	0x200001c8
 80017f0:	08003278 	.word	0x08003278

080017f4 <xTimerCreateTimerTask>:
    {
 80017f4:	b510      	push	{r4, lr}
 80017f6:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
 80017f8:	f7ff ffc4 	bl	8001784 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <xTimerCreateTimerTask+0x54>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	b1cb      	cbz	r3, 8001836 <xTimerCreateTimerTask+0x42>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8001802:	2400      	movs	r4, #0
 8001804:	9405      	str	r4, [sp, #20]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8001806:	9406      	str	r4, [sp, #24]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001808:	aa07      	add	r2, sp, #28
 800180a:	a906      	add	r1, sp, #24
 800180c:	a805      	add	r0, sp, #20
 800180e:	f000 fb2f 	bl	8001e70 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8001812:	9b05      	ldr	r3, [sp, #20]
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	9b06      	ldr	r3, [sp, #24]
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	2302      	movs	r3, #2
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	4623      	mov	r3, r4
 8001820:	9a07      	ldr	r2, [sp, #28]
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <xTimerCreateTimerTask+0x58>)
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <xTimerCreateTimerTask+0x5c>)
 8001826:	f7ff f9e5 	bl	8000bf4 <xTaskCreateStatic>
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <xTimerCreateTimerTask+0x60>)
 800182c:	6018      	str	r0, [r3, #0]
                    if( xTimerTaskHandle != NULL )
 800182e:	b110      	cbz	r0, 8001836 <xTimerCreateTimerTask+0x42>
    }
 8001830:	2001      	movs	r0, #1
 8001832:	b008      	add	sp, #32
 8001834:	bd10      	pop	{r4, pc}
 8001836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183a:	f383 8811 	msr	BASEPRI, r3
 800183e:	f3bf 8f6f 	isb	sy
 8001842:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 8001846:	e7fe      	b.n	8001846 <xTimerCreateTimerTask+0x52>
 8001848:	20000284 	.word	0x20000284
 800184c:	08003280 	.word	0x08003280
 8001850:	08001619 	.word	0x08001619
 8001854:	20000288 	.word	0x20000288

08001858 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001858:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	9301      	str	r3, [sp, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <prvTaskExitError+0x3c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001866:	d008      	beq.n	800187a <prvTaskExitError+0x22>
 8001868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186c:	f383 8811 	msr	BASEPRI, r3
 8001870:	f3bf 8f6f 	isb	sy
 8001874:	f3bf 8f4f 	dsb	sy
 8001878:	e7fe      	b.n	8001878 <prvTaskExitError+0x20>
 800187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800188a:	9b01      	ldr	r3, [sp, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0fc      	beq.n	800188a <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001890:	b002      	add	sp, #8
 8001892:	4770      	bx	lr
 8001894:	20000004 	.word	0x20000004

08001898 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <prvPortStartFirstTask+0x24>)
 800189a:	6800      	ldr	r0, [r0, #0]
 800189c:	6800      	ldr	r0, [r0, #0]
 800189e:	f380 8808 	msr	MSP, r0
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f380 8814 	msr	CONTROL, r0
 80018aa:	b662      	cpsie	i
 80018ac:	b661      	cpsie	f
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	f3bf 8f6f 	isb	sy
 80018b6:	df00      	svc	0
 80018b8:	bf00      	nop
 80018ba:	0000      	.short	0x0000
 80018bc:	e000ed08 	.word	0xe000ed08

080018c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80018c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80018d0 <vPortEnableVFP+0x10>
 80018c4:	6801      	ldr	r1, [r0, #0]
 80018c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80018ca:	6001      	str	r1, [r0, #0]
 80018cc:	4770      	bx	lr
 80018ce:	0000      	.short	0x0000
 80018d0:	e000ed88 	.word	0xe000ed88

080018d4 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80018d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018d8:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80018dc:	f021 0101 	bic.w	r1, r1, #1
 80018e0:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <pxPortInitialiseStack+0x28>)
 80018e6:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80018ea:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80018ee:	f06f 0302 	mvn.w	r3, #2
 80018f2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80018f6:	3844      	subs	r0, #68	; 0x44
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	08001859 	.word	0x08001859

08001900 <vPortEnterCritical>:
 8001900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001904:	f383 8811 	msr	BASEPRI, r3
 8001908:	f3bf 8f6f 	isb	sy
 800190c:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <vPortEnterCritical+0x40>)
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 8001918:	2b01      	cmp	r3, #1
 800191a:	d000      	beq.n	800191e <vPortEnterCritical+0x1e>
}
 800191c:	4770      	bx	lr
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800191e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001922:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8001926:	f013 0fff 	tst.w	r3, #255	; 0xff
 800192a:	d0f7      	beq.n	800191c <vPortEnterCritical+0x1c>
 800192c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001930:	f383 8811 	msr	BASEPRI, r3
 8001934:	f3bf 8f6f 	isb	sy
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	e7fe      	b.n	800193c <vPortEnterCritical+0x3c>
 800193e:	bf00      	nop
 8001940:	20000004 	.word	0x20000004

08001944 <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <vPortExitCritical+0x28>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b943      	cbnz	r3, 800195c <vPortExitCritical+0x18>
 800194a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	f3bf 8f6f 	isb	sy
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	e7fe      	b.n	800195a <vPortExitCritical+0x16>
    uxCriticalNesting--;
 800195c:	3b01      	subs	r3, #1
 800195e:	4a03      	ldr	r2, [pc, #12]	; (800196c <vPortExitCritical+0x28>)
 8001960:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8001962:	b90b      	cbnz	r3, 8001968 <vPortExitCritical+0x24>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001964:	f383 8811 	msr	BASEPRI, r3
}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000004 	.word	0x20000004

08001970 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001970:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001978:	619a      	str	r2, [r3, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800197a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800197e:	615a      	str	r2, [r3, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001980:	2207      	movs	r2, #7
 8001982:	611a      	str	r2, [r3, #16]
}
 8001984:	4770      	bx	lr
	...

08001988 <xPortStartScheduler>:
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001988:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800198c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001990:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <xPortStartScheduler+0x104>)
 8001992:	429a      	cmp	r2, r3
 8001994:	d03b      	beq.n	8001a0e <xPortStartScheduler+0x86>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001996:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800199a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <xPortStartScheduler+0x108>)
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d03d      	beq.n	8001a20 <xPortStartScheduler+0x98>
{
 80019a4:	b530      	push	{r4, r5, lr}
 80019a6:	b083      	sub	sp, #12
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <xPortStartScheduler+0x10c>)
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80019bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019c4:	4a34      	ldr	r2, [pc, #208]	; (8001a98 <xPortStartScheduler+0x110>)
 80019c6:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <xPortStartScheduler+0x114>)
 80019ca:	2207      	movs	r2, #7
 80019cc:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80019ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019d6:	d011      	beq.n	80019fc <xPortStartScheduler+0x74>
 80019d8:	2206      	movs	r2, #6
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80019da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80019e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019ea:	4611      	mov	r1, r2
 80019ec:	3a01      	subs	r2, #1
 80019ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019f2:	d1f2      	bne.n	80019da <xPortStartScheduler+0x52>
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <xPortStartScheduler+0x114>)
 80019f6:	6019      	str	r1, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80019f8:	2903      	cmp	r1, #3
 80019fa:	d01a      	beq.n	8001a32 <xPortStartScheduler+0xaa>
        __asm volatile
 80019fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	e7fe      	b.n	8001a0c <xPortStartScheduler+0x84>
 8001a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a1e:	e7fe      	b.n	8001a1e <xPortStartScheduler+0x96>
 8001a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a24:	f383 8811 	msr	BASEPRI, r3
 8001a28:	f3bf 8f6f 	isb	sy
 8001a2c:	f3bf 8f4f 	dsb	sy
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001a30:	e7fe      	b.n	8001a30 <xPortStartScheduler+0xa8>
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <xPortStartScheduler+0x114>)
 8001a34:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a38:	601a      	str	r2, [r3, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <xPortStartScheduler+0x10c>)
 8001a40:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001a42:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8001a46:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8001a4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001a52:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8001a56:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001a5a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 8001a5e:	f7ff ff87 	bl	8001970 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8001a62:	2500      	movs	r5, #0
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <xPortStartScheduler+0x118>)
 8001a66:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 8001a68:	f7ff ff2a 	bl	80018c0 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001a6c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8001a70:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a74:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
    prvPortStartFirstTask();
 8001a78:	f7ff ff0e 	bl	8001898 <prvPortStartFirstTask>
    vTaskSwitchContext();
 8001a7c:	f7ff fb40 	bl	8001100 <vTaskSwitchContext>
    prvTaskExitError();
 8001a80:	f7ff feea 	bl	8001858 <prvTaskExitError>
}
 8001a84:	4628      	mov	r0, r5
 8001a86:	b003      	add	sp, #12
 8001a88:	bd30      	pop	{r4, r5, pc}
 8001a8a:	bf00      	nop
 8001a8c:	410fc271 	.word	0x410fc271
 8001a90:	410fc270 	.word	0x410fc270
 8001a94:	e000e400 	.word	0xe000e400
 8001a98:	2000028c 	.word	0x2000028c
 8001a9c:	20000290 	.word	0x20000290
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <prvInsertBlockIntoFreeList+0x58>)
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4283      	cmp	r3, r0
 8001aac:	d3fb      	bcc.n	8001aa6 <prvInsertBlockIntoFreeList+0x2>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001aae:	6851      	ldr	r1, [r2, #4]
 8001ab0:	eb02 0c01 	add.w	ip, r2, r1
 8001ab4:	4560      	cmp	r0, ip
 8001ab6:	d009      	beq.n	8001acc <prvInsertBlockIntoFreeList+0x28>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ab8:	6841      	ldr	r1, [r0, #4]
 8001aba:	eb00 0c01 	add.w	ip, r0, r1
 8001abe:	4563      	cmp	r3, ip
 8001ac0:	d009      	beq.n	8001ad6 <prvInsertBlockIntoFreeList+0x32>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ac2:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001ac4:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ac6:	bf18      	it	ne
 8001ac8:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
 8001aca:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001acc:	6840      	ldr	r0, [r0, #4]
 8001ace:	4401      	add	r1, r0
 8001ad0:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	e7f0      	b.n	8001ab8 <prvInsertBlockIntoFreeList+0x14>
{
 8001ad6:	b410      	push	{r4}
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ad8:	4c09      	ldr	r4, [pc, #36]	; (8001b00 <prvInsertBlockIntoFreeList+0x5c>)
 8001ada:	6824      	ldr	r4, [r4, #0]
 8001adc:	42a3      	cmp	r3, r4
 8001ade:	d00b      	beq.n	8001af8 <prvInsertBlockIntoFreeList+0x54>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4419      	add	r1, r3
 8001ae4:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6003      	str	r3, [r0, #0]
    if( pxIterator != pxBlockToInsert )
 8001aec:	4290      	cmp	r0, r2
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001aee:	bf18      	it	ne
 8001af0:	6010      	strne	r0, [r2, #0]
    }
}
 8001af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001af6:	4770      	bx	lr
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001af8:	6004      	str	r4, [r0, #0]
 8001afa:	e7f7      	b.n	8001aec <prvInsertBlockIntoFreeList+0x48>
 8001afc:	200042ac 	.word	0x200042ac
 8001b00:	20000294 	.word	0x20000294

08001b04 <pvPortMalloc>:
{
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	4604      	mov	r4, r0
    vTaskSuspendAll();
 8001b08:	f7ff f930 	bl	8000d6c <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001b0c:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <pvPortMalloc+0x140>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b1a3      	cbz	r3, 8001b3c <pvPortMalloc+0x38>
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b12:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <pvPortMalloc+0x144>)
 8001b14:	681d      	ldr	r5, [r3, #0]
 8001b16:	4225      	tst	r5, r4
 8001b18:	d136      	bne.n	8001b88 <pvPortMalloc+0x84>
            if( ( xWantedSize > 0 ) &&
 8001b1a:	1e63      	subs	r3, r4, #1
 8001b1c:	f113 0f0a 	cmn.w	r3, #10
 8001b20:	d835      	bhi.n	8001b8e <pvPortMalloc+0x8a>
                xWantedSize += xHeapStructSize;
 8001b22:	f104 0208 	add.w	r2, r4, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b26:	f014 0f07 	tst.w	r4, #7
 8001b2a:	d038      	beq.n	8001b9e <pvPortMalloc+0x9a>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8001b2c:	f022 0307 	bic.w	r3, r2, #7
 8001b30:	3308      	adds	r3, #8
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d832      	bhi.n	8001b9c <pvPortMalloc+0x98>
    ( void ) xTaskResumeAll();
 8001b36:	f7ff fa01 	bl	8000f3c <xTaskResumeAll>
            if( pvReturn == NULL )
 8001b3a:	e02a      	b.n	8001b92 <pvPortMalloc+0x8e>
    uxAddress = ( size_t ) ucHeap;
 8001b3c:	4a43      	ldr	r2, [pc, #268]	; (8001c4c <pvPortMalloc+0x148>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b3e:	f012 0f07 	tst.w	r2, #7
 8001b42:	d01e      	beq.n	8001b82 <pvPortMalloc+0x7e>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b44:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b46:	f021 0107 	bic.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b4a:	f502 4380 	add.w	r3, r2, #16384	; 0x4000
 8001b4e:	1a5b      	subs	r3, r3, r1
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b50:	460a      	mov	r2, r1
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b52:	483f      	ldr	r0, [pc, #252]	; (8001c50 <pvPortMalloc+0x14c>)
 8001b54:	6002      	str	r2, [r0, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001b56:	2100      	movs	r1, #0
 8001b58:	6041      	str	r1, [r0, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b5a:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8001b5c:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
    pxEnd = ( void * ) uxAddress;
 8001b62:	4838      	ldr	r0, [pc, #224]	; (8001c44 <pvPortMalloc+0x140>)
 8001b64:	6003      	str	r3, [r0, #0]
    pxEnd->xBlockSize = 0;
 8001b66:	6059      	str	r1, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001b68:	6019      	str	r1, [r3, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b6a:	1a99      	subs	r1, r3, r2
 8001b6c:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b6e:	6013      	str	r3, [r2, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <pvPortMalloc+0x150>)
 8001b72:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <pvPortMalloc+0x154>)
 8001b76:	6019      	str	r1, [r3, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b78:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <pvPortMalloc+0x144>)
 8001b7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b7e:	601a      	str	r2, [r3, #0]
}
 8001b80:	e7c7      	b.n	8001b12 <pvPortMalloc+0xe>
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b86:	e7e4      	b.n	8001b52 <pvPortMalloc+0x4e>
    ( void ) xTaskResumeAll();
 8001b88:	f7ff f9d8 	bl	8000f3c <xTaskResumeAll>
            if( pvReturn == NULL )
 8001b8c:	e001      	b.n	8001b92 <pvPortMalloc+0x8e>
    ( void ) xTaskResumeAll();
 8001b8e:	f7ff f9d5 	bl	8000f3c <xTaskResumeAll>
                vApplicationMallocFailedHook();
 8001b92:	f000 f95f 	bl	8001e54 <vApplicationMallocFailedHook>
 8001b96:	2600      	movs	r6, #0
}
 8001b98:	4630      	mov	r0, r6
 8001b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b9c:	461a      	mov	r2, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <pvPortMalloc+0x154>)
 8001ba0:	681f      	ldr	r7, [r3, #0]
 8001ba2:	4297      	cmp	r7, r2
 8001ba4:	d302      	bcc.n	8001bac <pvPortMalloc+0xa8>
                pxBlock = xStart.pxNextFreeBlock;
 8001ba6:	492a      	ldr	r1, [pc, #168]	; (8001c50 <pvPortMalloc+0x14c>)
 8001ba8:	680c      	ldr	r4, [r1, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001baa:	e004      	b.n	8001bb6 <pvPortMalloc+0xb2>
    ( void ) xTaskResumeAll();
 8001bac:	f7ff f9c6 	bl	8000f3c <xTaskResumeAll>
            if( pvReturn == NULL )
 8001bb0:	e7ef      	b.n	8001b92 <pvPortMalloc+0x8e>
 8001bb2:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001bb4:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bb6:	6863      	ldr	r3, [r4, #4]
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d202      	bcs.n	8001bc2 <pvPortMalloc+0xbe>
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f7      	bne.n	8001bb2 <pvPortMalloc+0xae>
                if( pxBlock != pxEnd )
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <pvPortMalloc+0x140>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	42a3      	cmp	r3, r4
 8001bc8:	d014      	beq.n	8001bf4 <pvPortMalloc+0xf0>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bca:	680e      	ldr	r6, [r1, #0]
 8001bcc:	3608      	adds	r6, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	600b      	str	r3, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bd2:	6863      	ldr	r3, [r4, #4]
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d913      	bls.n	8001c02 <pvPortMalloc+0xfe>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bda:	18a0      	adds	r0, r4, r2
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bdc:	f010 0f07 	tst.w	r0, #7
 8001be0:	d00b      	beq.n	8001bfa <pvPortMalloc+0xf6>
 8001be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	e7fe      	b.n	8001bf2 <pvPortMalloc+0xee>
    ( void ) xTaskResumeAll();
 8001bf4:	f7ff f9a2 	bl	8000f3c <xTaskResumeAll>
            if( pvReturn == NULL )
 8001bf8:	e7cb      	b.n	8001b92 <pvPortMalloc+0x8e>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001bfa:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001bfc:	6062      	str	r2, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001bfe:	f7ff ff51 	bl	8001aa4 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c02:	6863      	ldr	r3, [r4, #4]
 8001c04:	1aff      	subs	r7, r7, r3
 8001c06:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <pvPortMalloc+0x154>)
 8001c08:	6017      	str	r7, [r2, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <pvPortMalloc+0x150>)
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	4297      	cmp	r7, r2
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c10:	bf3c      	itt	cc
 8001c12:	4a10      	ldrcc	r2, [pc, #64]	; (8001c54 <pvPortMalloc+0x150>)
 8001c14:	6017      	strcc	r7, [r2, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c16:	431d      	orrs	r5, r3
 8001c18:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <pvPortMalloc+0x158>)
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 8001c26:	f7ff f989 	bl	8000f3c <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c2a:	f016 0f07 	tst.w	r6, #7
 8001c2e:	d0b3      	beq.n	8001b98 <pvPortMalloc+0x94>
 8001c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c34:	f383 8811 	msr	BASEPRI, r3
 8001c38:	f3bf 8f6f 	isb	sy
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	e7fe      	b.n	8001c40 <pvPortMalloc+0x13c>
 8001c42:	bf00      	nop
 8001c44:	20000294 	.word	0x20000294
 8001c48:	20004298 	.word	0x20004298
 8001c4c:	20000298 	.word	0x20000298
 8001c50:	200042ac 	.word	0x200042ac
 8001c54:	200042a0 	.word	0x200042a0
 8001c58:	2000429c 	.word	0x2000429c
 8001c5c:	200042a4 	.word	0x200042a4

08001c60 <vPortFree>:
    if( pv != NULL )
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d033      	beq.n	8001ccc <vPortFree+0x6c>
{
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c68:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <vPortFree+0x70>)
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	4213      	tst	r3, r2
 8001c72:	d108      	bne.n	8001c86 <vPortFree+0x26>
 8001c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c78:	f383 8811 	msr	BASEPRI, r3
 8001c7c:	f3bf 8f6f 	isb	sy
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	e7fe      	b.n	8001c84 <vPortFree+0x24>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001c86:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001c8a:	b141      	cbz	r1, 8001c9e <vPortFree+0x3e>
 8001c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c90:	f383 8811 	msr	BASEPRI, r3
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	e7fe      	b.n	8001c9c <vPortFree+0x3c>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001c9e:	ea23 0302 	bic.w	r3, r3, r2
 8001ca2:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8001ca6:	f7ff f861 	bl	8000d6c <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <vPortFree+0x74>)
 8001cac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001cb0:	6811      	ldr	r1, [r2, #0]
 8001cb2:	440b      	add	r3, r1
 8001cb4:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001cb6:	f1a4 0008 	sub.w	r0, r4, #8
 8001cba:	f7ff fef3 	bl	8001aa4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001cbe:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <vPortFree+0x78>)
 8001cc0:	6813      	ldr	r3, [r2, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8001cc6:	f7ff f939 	bl	8000f3c <xTaskResumeAll>
}
 8001cca:	bd10      	pop	{r4, pc}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20004298 	.word	0x20004298
 8001cd4:	2000429c 	.word	0x2000429c
 8001cd8:	200042a8 	.word	0x200042a8

08001cdc <myTask1>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    configASSERT( NULL );
}

void myTask1 (void *p){
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	b088      	sub	sp, #32
	int count = 0;

	char TxBuf[30];

	myQueue = xQueueCreate(5,sizeof(TxBuf));
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	211e      	movs	r1, #30
 8001ce4:	2005      	movs	r0, #5
 8001ce6:	f7fe fbb3 	bl	8000450 <xQueueGenericCreate>
 8001cea:	4604      	mov	r4, r0
 8001cec:	4d17      	ldr	r5, [pc, #92]	; (8001d4c <myTask1+0x70>)
 8001cee:	6028      	str	r0, [r5, #0]

	sprintf(TxBuf, "message 1");
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <myTask1+0x74>)
 8001cf2:	466b      	mov	r3, sp
 8001cf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cf6:	c303      	stmia	r3!, {r0, r1}
 8001cf8:	801a      	strh	r2, [r3, #0]
	xQueueSend(myQueue, (void*) TxBuf, (TickType_t) 0);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4669      	mov	r1, sp
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7fe fbd5 	bl	80004b0 <xQueueGenericSend>

	sprintf(TxBuf, "message 2");
 8001d06:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <myTask1+0x78>)
 8001d08:	466b      	mov	r3, sp
 8001d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d0c:	c303      	stmia	r3!, {r0, r1}
 8001d0e:	801a      	strh	r2, [r3, #0]
	xQueueSend(myQueue, (void*) TxBuf, (TickType_t) 0);
 8001d10:	2300      	movs	r3, #0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4669      	mov	r1, sp
 8001d16:	6828      	ldr	r0, [r5, #0]
 8001d18:	f7fe fbca 	bl	80004b0 <xQueueGenericSend>

	sprintf(TxBuf, "message 3");
 8001d1c:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <myTask1+0x7c>)
 8001d1e:	466b      	mov	r3, sp
 8001d20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d22:	c303      	stmia	r3!, {r0, r1}
 8001d24:	801a      	strh	r2, [r3, #0]
	xQueueSend(myQueue, (void*) TxBuf, (TickType_t) 0);
 8001d26:	2300      	movs	r3, #0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4669      	mov	r1, sp
 8001d2c:	6828      	ldr	r0, [r5, #0]
 8001d2e:	f7fe fbbf 	bl	80004b0 <xQueueGenericSend>
	int count = 0;
 8001d32:	2100      	movs	r1, #0

	while(1){
		printf("Test: %d\r\n", count++);
 8001d34:	4e09      	ldr	r6, [pc, #36]	; (8001d5c <myTask1+0x80>)
		vTaskDelay(1000);
 8001d36:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		printf("Test: %d\r\n", count++);
 8001d3a:	1c4c      	adds	r4, r1, #1
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f000 facd 	bl	80022dc <iprintf>
		vTaskDelay(1000);
 8001d42:	4628      	mov	r0, r5
 8001d44:	f7ff f9b6 	bl	80010b4 <vTaskDelay>
		printf("Test: %d\r\n", count++);
 8001d48:	4621      	mov	r1, r4
 8001d4a:	e7f6      	b.n	8001d3a <myTask1+0x5e>
 8001d4c:	20004b88 	.word	0x20004b88
 8001d50:	08003288 	.word	0x08003288
 8001d54:	08003294 	.word	0x08003294
 8001d58:	080032a0 	.word	0x080032a0
 8001d5c:	080032ac 	.word	0x080032ac

08001d60 <myTask2>:
	}

}

void myTask2(void *p){
 8001d60:	b500      	push	{lr}
 8001d62:	b089      	sub	sp, #36	; 0x24

	char RxBuf[30];

	while(1){
			if(myQueue!=0){
 8001d64:	4d08      	ldr	r5, [pc, #32]	; (8001d88 <myTask2+0x28>)
				if(xQueueReceive(myQueue, (void *) RxBuf, (TickType_t) 5)){
					printf("data received: %s\r\n", RxBuf);
 8001d66:	4e09      	ldr	r6, [pc, #36]	; (8001d8c <myTask2+0x2c>)
				if(xQueueReceive(myQueue, (void *) RxBuf, (TickType_t) 5)){
 8001d68:	2405      	movs	r4, #5
			if(myQueue!=0){
 8001d6a:	6828      	ldr	r0, [r5, #0]
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d0fd      	beq.n	8001d6c <myTask2+0xc>
				if(xQueueReceive(myQueue, (void *) RxBuf, (TickType_t) 5)){
 8001d70:	4622      	mov	r2, r4
 8001d72:	4669      	mov	r1, sp
 8001d74:	f7fe fc8c 	bl	8000690 <xQueueReceive>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d0f6      	beq.n	8001d6a <myTask2+0xa>
					printf("data received: %s\r\n", RxBuf);
 8001d7c:	4669      	mov	r1, sp
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f000 faac 	bl	80022dc <iprintf>
 8001d84:	e7f0      	b.n	8001d68 <myTask2+0x8>
 8001d86:	bf00      	nop
 8001d88:	20004b88 	.word	0x20004b88
 8001d8c:	080032b8 	.word	0x080032b8

08001d90 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001d90:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d92:	6804      	ldr	r4, [r0, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	fa91 f3a1 	rbit	r3, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	f04f 0c03 	mov.w	ip, #3
 8001da2:	fa0c f303 	lsl.w	r3, ip, r3
 8001da6:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8001dae:	fab1 f181 	clz	r1, r1
 8001db2:	0049      	lsls	r1, r1, #1
 8001db4:	fa02 f101 	lsl.w	r1, r2, r1
 8001db8:	4319      	orrs	r1, r3
 8001dba:	6001      	str	r1, [r0, #0]
}
 8001dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001dc2:	b410      	push	{r4}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001dc4:	6884      	ldr	r4, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	f04f 0c03 	mov.w	ip, #3
 8001dd4:	fa0c f303 	lsl.w	r3, ip, r3
 8001dd8:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8001de0:	fab1 f181 	clz	r1, r1
 8001de4:	0049      	lsls	r1, r1, #1
 8001de6:	fa02 f101 	lsl.w	r1, r2, r1
 8001dea:	4319      	orrs	r1, r3
 8001dec:	6081      	str	r1, [r0, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001df4:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001df6:	68c4      	ldr	r4, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	f04f 0c03 	mov.w	ip, #3
 8001e06:	fa0c f303 	lsl.w	r3, ip, r3
 8001e0a:	ea24 0303 	bic.w	r3, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8001e12:	fab1 f181 	clz	r1, r1
 8001e16:	0049      	lsls	r1, r1, #1
 8001e18:	fa02 f101 	lsl.w	r1, r2, r1
 8001e1c:	4319      	orrs	r1, r3
 8001e1e:	60c1      	str	r1, [r0, #12]
}
 8001e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <board_gpio_set_output>:
#define BOARD_BAT2_CONNECT_PIN          LL_GPIO_PIN_9
    #endif

static inline void board_gpio_set_output(GPIO_TypeDef *GPIOx, uint32_t Pin,
		uint32_t Pull, uint32_t Speed)
{
 8001e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e28:	4604      	mov	r4, r0
 8001e2a:	460d      	mov	r5, r1
 8001e2c:	4617      	mov	r7, r2
 8001e2e:	461e      	mov	r6, r3
	LL_GPIO_SetPinMode(GPIOx, Pin, LL_GPIO_MODE_OUTPUT);
 8001e30:	2201      	movs	r2, #1
 8001e32:	f7ff ffad 	bl	8001d90 <LL_GPIO_SetPinMode>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e36:	6863      	ldr	r3, [r4, #4]
 8001e38:	ea23 0305 	bic.w	r3, r3, r5
 8001e3c:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOx, Pin, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOx, Pin, Pull);
 8001e3e:	463a      	mov	r2, r7
 8001e40:	4629      	mov	r1, r5
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ffd6 	bl	8001df4 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(GPIOx, Pin, Speed);
 8001e48:	4632      	mov	r2, r6
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff ffb8 	bl	8001dc2 <LL_GPIO_SetPinSpeed>
}
 8001e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e54 <vApplicationMallocFailedHook>:
     for( ;; );
 8001e54:	e7fe      	b.n	8001e54 <vApplicationMallocFailedHook>
	...

08001e58 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &Idle_TCB;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <vApplicationGetIdleTaskMemory+0x10>)
 8001e5a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = Idle_Stack;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <vApplicationGetIdleTaskMemory+0x14>)
 8001e5e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]
}
 8001e66:	4770      	bx	lr
 8001e68:	200046b8 	.word	0x200046b8
 8001e6c:	200042b8 	.word	0x200042b8

08001e70 <vApplicationGetTimerTaskMemory>:
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <vApplicationGetTimerTaskMemory+0x10>)
 8001e72:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = Timer_Stack;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <vApplicationGetTimerTaskMemory+0x14>)
 8001e76:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = configTIMER_TASK_STACK_DEPTH;
 8001e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	4770      	bx	lr
 8001e80:	20004b20 	.word	0x20004b20
 8001e84:	20004720 	.word	0x20004720

08001e88 <vApplicationStackOverflowHook>:
 8001e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8c:	f383 8811 	msr	BASEPRI, r3
 8001e90:	f3bf 8f6f 	isb	sy
 8001e94:	f3bf 8f4f 	dsb	sy
    configASSERT( NULL );
 8001e98:	e7fe      	b.n	8001e98 <vApplicationStackOverflowHook+0x10>
	...

08001e9c <main>:



volatile uint32_t delay_shuntsNoSleep = 0;
int main(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8


	clock_init();
 8001ea0:	f000 f97e 	bl	80021a0 <clock_init>

	xTaskCreate(myTask1, "task1", 200, (void*) 0, tskIDLE_PRIORITY, &myTask1Handle);	//создание задачи 1
 8001ea4:	4b74      	ldr	r3, [pc, #464]	; (8002078 <main+0x1dc>)
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2400      	movs	r4, #0
 8001eaa:	9400      	str	r4, [sp, #0]
 8001eac:	4623      	mov	r3, r4
 8001eae:	22c8      	movs	r2, #200	; 0xc8
 8001eb0:	4972      	ldr	r1, [pc, #456]	; (800207c <main+0x1e0>)
 8001eb2:	4873      	ldr	r0, [pc, #460]	; (8002080 <main+0x1e4>)
 8001eb4:	f7fe fed9 	bl	8000c6a <xTaskCreate>
	xTaskCreate(myTask2, "task2", 200, (void*) 0, tskIDLE_PRIORITY, &myTask2Handle);	//создание задачи 2
 8001eb8:	4b72      	ldr	r3, [pc, #456]	; (8002084 <main+0x1e8>)
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	9400      	str	r4, [sp, #0]
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	22c8      	movs	r2, #200	; 0xc8
 8001ec2:	4971      	ldr	r1, [pc, #452]	; (8002088 <main+0x1ec>)
 8001ec4:	4871      	ldr	r0, [pc, #452]	; (800208c <main+0x1f0>)
 8001ec6:	f7fe fed0 	bl	8000c6a <xTaskCreate>

	vTaskStartScheduler();	//запуск диспетчера задач
 8001eca:	f7fe ff01 	bl	8000cd0 <vTaskStartScheduler>
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 8001ece:	f384 8813 	msr	FAULTMASK, r4
	Note: IWDG _must_ be enabled in option bits for production.
	*/
static inline void iwdg_set_2s_reload()
{
	/* enable write access */
	IWDG->KR = 0xCCCC;
 8001ed2:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <main+0x1f4>)
 8001ed4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001ed8:	601a      	str	r2, [r3, #0]
	IWDG->KR = 0x5555;
 8001eda:	f245 5255 	movw	r2, #21845	; 0x5555
 8001ede:	601a      	str	r2, [r3, #0]

    IWDG->RLR = 0xFFF;
 8001ee0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ee4:	609a      	str	r2, [r3, #8]

	/* prescaler = 16, timeout = 2.048sec */
	IWDG->PR = IWDG_PR_PR_1;
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	605a      	str	r2, [r3, #4]

	/* wait for registers to be updated */
	while (IWDG->SR != 0) ;
 8001eea:	461a      	mov	r2, r3
 8001eec:	68d3      	ldr	r3, [r2, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1fc      	bne.n	8001eec <main+0x50>

	/* reload counter */
	IWDG->KR = 0xAAAA;
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <main+0x1f4>)
 8001ef4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001ef8:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efa:	4966      	ldr	r1, [pc, #408]	; (8002094 <main+0x1f8>)
 8001efc:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f02:	0412      	lsls	r2, r2, #16
 8001f04:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 8001f06:	4b64      	ldr	r3, [pc, #400]	; (8002098 <main+0x1fc>)
 8001f08:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001f0a:	60cb      	str	r3, [r1, #12]

static inline void board_gpio_init()
{
	/* DBG1 */
	board_gpio_set_output(BOARD_DEBUG1_GPIO, BOARD_DEBUG1_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f7ff ff85 	bl	8001e26 <board_gpio_set_output>

	/* SPI FLASH Vdd on/off */
	board_gpio_set_output(BOARD_SPI_FLASH_GPIO, BOARD_SPI_FLASH_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001f1c:	4c5f      	ldr	r4, [pc, #380]	; (800209c <main+0x200>)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	461a      	mov	r2, r3
 8001f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff ff7d 	bl	8001e26 <board_gpio_set_output>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f2c:	f44f 7800 	mov.w	r8, #512	; 0x200
 8001f30:	f8c4 8018 	str.w	r8, [r4, #24]
    LL_GPIO_SetOutputPin(BOARD_SPI_FLASH_GPIO, BOARD_SPI_FLASH_PIN);    // off flash pwr

	/* SPI FLASH CS */
	board_gpio_set_output(BOARD_SPI_FLASH_CS_GPIO, BOARD_SPI_FLASH_CS_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001f34:	2300      	movs	r3, #0
 8001f36:	461a      	mov	r2, r3
 8001f38:	2110      	movs	r1, #16
 8001f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3e:	f7ff ff72 	bl	8001e26 <board_gpio_set_output>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f42:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8001f46:	2310      	movs	r3, #16
 8001f48:	62ab      	str	r3, [r5, #40]	; 0x28
    LL_GPIO_ResetOutputPin(BOARD_SPI_FLASH_CS_GPIO, BOARD_SPI_FLASH_CS_PIN);    // CS = 0, while flash power is off

    //AXSEM Tx supply
	board_gpio_set_output(BOARD_RADIO_TX_GPIO, BOARD_RADIO_TX_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001f4a:	4e55      	ldr	r6, [pc, #340]	; (80020a0 <main+0x204>)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2108      	movs	r1, #8
 8001f52:	4630      	mov	r0, r6
 8001f54:	f7ff ff67 	bl	8001e26 <board_gpio_set_output>
 8001f58:	2708      	movs	r7, #8
 8001f5a:	62b7      	str	r7, [r6, #40]	; 0x28
    LL_GPIO_ResetOutputPin(BOARD_RADIO_TX_GPIO, BOARD_RADIO_TX_PIN);    // off Tx power

	// AXSEM Rx supply
	board_gpio_set_output(BOARD_RADIO_RX_GPIO, BOARD_RADIO_RX_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001f5c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80020a8 <main+0x20c>
 8001f60:	2300      	movs	r3, #0
 8001f62:	461a      	mov	r2, r3
 8001f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f68:	4648      	mov	r0, r9
 8001f6a:	f7ff ff5c 	bl	8001e26 <board_gpio_set_output>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f6e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001f72:	f8c9 6018 	str.w	r6, [r9, #24]
    LL_GPIO_SetOutputPin(BOARD_RADIO_RX_GPIO, BOARD_RADIO_RX_PIN);      // off Rx power

	/* AMP1 */
	board_gpio_set_output(BOARD_AMP1_PWR_GPIO, BOARD_AMP1_PWR_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001f76:	2300      	movs	r3, #0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f7ff ff51 	bl	8001e26 <board_gpio_set_output>

	/* TMP PWR */
	board_gpio_set_output(BOARD_TEMP_PWR_GPIO, BOARD_TEMP_PWR_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001f84:	2300      	movs	r3, #0
 8001f86:	461a      	mov	r2, r3
 8001f88:	2102      	movs	r1, #2
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff ff4b 	bl	8001e26 <board_gpio_set_output>

	/* LED */
	board_gpio_set_output(BOARD_LED_GPIO, BOARD_LED_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001f90:	2300      	movs	r3, #0
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff ff44 	bl	8001e26 <board_gpio_set_output>

	/* SELECT */
	board_gpio_set_output(BOARD_SELECT_GPIO, BOARD_SELECT_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f7ff ff3d 	bl	8001e26 <board_gpio_set_output>

	/* TX SENS ENABLE*/
	board_gpio_set_output(BOARD_SENS_TX_EN_GPIO, BOARD_SENS_TX_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001fac:	2300      	movs	r3, #0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7ff ff36 	bl	8001e26 <board_gpio_set_output>

	/* SHUNT SENS ENABLE*/
	board_gpio_set_output(BOARD_SENS_SH_EN_GPIO, BOARD_SENS_SH_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4641      	mov	r1, r8
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f7ff ff30 	bl	8001e26 <board_gpio_set_output>

    board_gpio_set_output(BOARD_SENS_SH_2_EN_GPIO, BOARD_SENS_SH_2_EN_PIN, LL_GPIO_PULL_NO, LL_GPIO_SPEED_FREQ_LOW);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f7ff ff29 	bl	8001e26 <board_gpio_set_output>

	/* S0L */
	//LL_GPIO_SetPinMode(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_MODE_ALTERNATE);
    LL_GPIO_SetPinMode(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_MODE_OUTPUT);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4631      	mov	r1, r6
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff fed9 	bl	8001d90 <LL_GPIO_SetPinMode>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001fde:	6863      	ldr	r3, [r4, #4]
 8001fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fe4:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_OUTPUT_PUSHPULL);
	//LL_GPIO_SetAFPin_8_15(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_AF_14);
	LL_GPIO_SetPinPull(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_PULL_NO);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4631      	mov	r1, r6
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff ff02 	bl	8001df4 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_S0L_GPIO, BOARD_S0L_PIN, LL_GPIO_SPEED_FREQ_LOW);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4631      	mov	r1, r6
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff fee4 	bl	8001dc2 <LL_GPIO_SetPinSpeed>

	/* S0H */
	//LL_GPIO_SetPinMode(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_MODE_ALTERNATE);
    LL_GPIO_SetPinMode(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_MODE_OUTPUT);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff fec5 	bl	8001d90 <LL_GPIO_SetPinMode>
 8002006:	6863      	ldr	r3, [r4, #4]
 8002008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200c:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_OUTPUT_PUSHPULL);
	//LL_GPIO_SetAFPin_8_15(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_AF_14);
	LL_GPIO_SetPinPull(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_PULL_NO);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002014:	4620      	mov	r0, r4
 8002016:	f7ff feed 	bl	8001df4 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_S0H_GPIO, BOARD_S0H_PIN, LL_GPIO_SPEED_FREQ_LOW);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002020:	4620      	mov	r0, r4
 8002022:	f7ff fece 	bl	8001dc2 <LL_GPIO_SetPinSpeed>

    LL_GPIO_SetPinMode(BOARD_ENCOUNT_GPIO, BOARD_ENCOUNT_PIN, LL_GPIO_MODE_INPUT);
 8002026:	2200      	movs	r2, #0
 8002028:	4639      	mov	r1, r7
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff feb0 	bl	8001d90 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(BOARD_ENCOUNT_GPIO, BOARD_ENCOUNT_PIN, LL_GPIO_PULL_NO);
 8002030:	2200      	movs	r2, #0
 8002032:	4639      	mov	r1, r7
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff fedd 	bl	8001df4 <LL_GPIO_SetPinPull>

    LL_GPIO_SetPinMode(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_MODE_OUTPUT);
 800203a:	2201      	movs	r2, #1
 800203c:	2140      	movs	r1, #64	; 0x40
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff fea6 	bl	8001d90 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_PULL_NO);
 8002044:	2200      	movs	r2, #0
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	4620      	mov	r0, r4
 800204a:	f7ff fed3 	bl	8001df4 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BOARD_UART1_TX_GPIO, BOARD_UART1_TX_PIN, LL_GPIO_SPEED_FREQ_LOW);
 800204e:	2200      	movs	r2, #0
 8002050:	2140      	movs	r1, #64	; 0x40
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff feb5 	bl	8001dc2 <LL_GPIO_SetPinSpeed>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002058:	2340      	movs	r3, #64	; 0x40
 800205a:	62a3      	str	r3, [r4, #40]	; 0x28



	/* Set radio refresh period and schedule reset packet transmission */
//	bool app_setTxScheduled();
    ApplicationEventFlags.ResetDetected = 1;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <main+0x208>)
 800205e:	881a      	ldrh	r2, [r3, #0]
 8002060:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002064:	801a      	strh	r2, [r3, #0]
    ApplicationEventFlags.BlowIsActive = 1;
    ncp_uart_init();
#else


    ApplicationEventFlags.BlowCountEnable = 1;
 8002066:	881a      	ldrh	r2, [r3, #0]
 8002068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800206c:	801a      	strh	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800206e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002072:	61a3      	str	r3, [r4, #24]
void main_loop()
{



	while (1) {
 8002074:	e7fe      	b.n	8002074 <main+0x1d8>
 8002076:	bf00      	nop
 8002078:	20004b8c 	.word	0x20004b8c
 800207c:	080032cc 	.word	0x080032cc
 8002080:	08001cdd 	.word	0x08001cdd
 8002084:	20004b90 	.word	0x20004b90
 8002088:	080032d4 	.word	0x080032d4
 800208c:	08001d61 	.word	0x08001d61
 8002090:	40003000 	.word	0x40003000
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	05fa0300 	.word	0x05fa0300
 800209c:	48000400 	.word	0x48000400
 80020a0:	48001c00 	.word	0x48001c00
 80020a4:	200042b4 	.word	0x200042b4
 80020a8:	48000800 	.word	0x48000800

080020ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ac:	b508      	push	{r3, lr}
 80020ae:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <_sbrk+0x38>)
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	b152      	cbz	r2, 80020cc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <_sbrk+0x38>)
 80020b8:	6810      	ldr	r0, [r2, #0]
 80020ba:	4403      	add	r3, r0
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <_sbrk+0x3c>)
 80020be:	490b      	ldr	r1, [pc, #44]	; (80020ec <_sbrk+0x40>)
 80020c0:	1a52      	subs	r2, r2, r1
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d806      	bhi.n	80020d4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <_sbrk+0x38>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80020ca:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <_sbrk+0x38>)
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <_sbrk+0x44>)
 80020d0:	6011      	str	r1, [r2, #0]
 80020d2:	e7f0      	b.n	80020b6 <_sbrk+0xa>
    errno = ENOMEM;
 80020d4:	f000 f8c2 	bl	800225c <__errno>
 80020d8:	230c      	movs	r3, #12
 80020da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	e7f3      	b.n	80020ca <_sbrk+0x1e>
 80020e2:	bf00      	nop
 80020e4:	20004b94 	.word	0x20004b94
 80020e8:	2000a000 	.word	0x2000a000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	20004ba8 	.word	0x20004ba8

080020f4 <hse_init>:
    NVIC_EnableIRQ(SysTick_IRQn);
}

//#define MSI48_to_HSE48
void hse_init()
{
 80020f4:	b538      	push	{r3, r4, r5, lr}
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80020f6:	4a26      	ldr	r2, [pc, #152]	; (8002190 <hse_init+0x9c>)
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	f023 0307 	bic.w	r3, r3, #7
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002104:	6813      	ldr	r3, [r2, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
	if (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800210a:	2b02      	cmp	r3, #2
 800210c:	d000      	beq.n	8002110 <hse_init+0x1c>
		for (;;);
 800210e:	e7fe      	b.n	800210e <hse_init+0x1a>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002110:	4a20      	ldr	r2, [pc, #128]	; (8002194 <hse_init+0xa0>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211c:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800211e:	f502 32d0 	add.w	r2, r2, #106496	; 0x1a000
 8002122:	6813      	ldr	r3, [r2, #0]
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800212a:	6813      	ldr	r3, [r2, #0]
 800212c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002134:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8002136:	6813      	ldr	r3, [r2, #0]
 8002138:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800213c:	d0fb      	beq.n	8002136 <hse_init+0x42>
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <hse_init+0xa4>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002146:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	f022 0203 	bic.w	r2, r2, #3
 800214e:	f042 0202 	orr.w	r2, r2, #2
 8002152:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800215a:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002162:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800216a:	609a      	str	r2, [r3, #8]
	LL_Init1msTick(freq);
 800216c:	4d0b      	ldr	r5, [pc, #44]	; (800219c <hse_init+0xa8>)
 800216e:	4628      	mov	r0, r5
 8002170:	f000 f838 	bl	80021e4 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002174:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8002178:	6923      	ldr	r3, [r4, #16]
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6123      	str	r3, [r4, #16]
	LL_SetSystemCoreClock(freq);
 8002180:	4628      	mov	r0, r5
 8002182:	f000 f83f 	bl	8002204 <LL_SetSystemCoreClock>
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8002186:	6923      	ldr	r3, [r4, #16]
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6123      	str	r3, [r4, #16]
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

    systick_init( 48000000 );
#endif
}
 800218e:	bd38      	pop	{r3, r4, r5, pc}
 8002190:	40022000 	.word	0x40022000
 8002194:	40007000 	.word	0x40007000
 8002198:	40021000 	.word	0x40021000
 800219c:	02dc6c00 	.word	0x02dc6c00

080021a0 <clock_init>:

void clock_init()
{
 80021a0:	b500      	push	{lr}
 80021a2:	b083      	sub	sp, #12
    //clock_4msi_to_48msi();
	hse_init();
 80021a4:	f7ff ffa6 	bl	80020f4 <hse_init>
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <clock_init+0x40>)
 80021aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021b4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80021b6:	9a01      	ldr	r2, [sp, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021be:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021c2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80021c6:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 80021c8:	9a00      	ldr	r2, [sp, #0]
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d0:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f042 0208 	orr.w	r2, r2, #8
 80021d8:	601a      	str	r2, [r3, #0]
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

	/* Ensure that MSI is wake-up system clock */
	LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);
    LL_RCC_MSI_EnableRangeSelection();
}
 80021da:	b003      	add	sp, #12
 80021dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80021e0:	40021000 	.word	0x40021000

080021e4 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <LL_Init1msTick+0x1c>)
 80021e6:	fba3 2300 	umull	r2, r3, r3, r0
 80021ea:	099b      	lsrs	r3, r3, #6
 80021ec:	3b01      	subs	r3, #1
 80021ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80021f2:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80021f4:	2300      	movs	r3, #0
 80021f6:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f8:	2305      	movs	r3, #5
 80021fa:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	10624dd3 	.word	0x10624dd3

08002204 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002204:	4b01      	ldr	r3, [pc, #4]	; (800220c <LL_SetSystemCoreClock+0x8>)
 8002206:	6018      	str	r0, [r3, #0]
}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008

08002210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002210:	f8df d030 	ldr.w	sp, [pc, #48]	; 8002244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
//    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002214:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002216:	e003      	b.n	8002220 <LoopCopyDataInit>

08002218 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800221a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800221c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800221e:	3104      	adds	r1, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002224:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002226:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002228:	d3f6      	bcc.n	8002218 <CopyDataInit>
	ldr	r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopForever+0x12>)
	b	LoopFillZerobss
 800222c:	e002      	b.n	8002234 <LoopFillZerobss>

0800222e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800222e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002230:	f842 3b04 	str.w	r3, [r2], #4

08002234 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <LoopForever+0x16>)
	cmp	r2, r3
 8002236:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002238:	d3f9      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223a:	f000 f815 	bl	8002268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800223e:	f7ff fe2d 	bl	8001e9c <main>

08002242 <LoopForever>:

LoopForever:
    b LoopForever
 8002242:	e7fe      	b.n	8002242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002248:	0800337c 	.word	0x0800337c
	ldr	r0, =_sdata
 800224c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002250:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002254:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002258:	20004ba8 	.word	0x20004ba8

0800225c <__errno>:
 800225c:	4b01      	ldr	r3, [pc, #4]	; (8002264 <__errno+0x8>)
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000000c 	.word	0x2000000c

08002268 <__libc_init_array>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4d0d      	ldr	r5, [pc, #52]	; (80022a0 <__libc_init_array+0x38>)
 800226c:	4c0d      	ldr	r4, [pc, #52]	; (80022a4 <__libc_init_array+0x3c>)
 800226e:	1b64      	subs	r4, r4, r5
 8002270:	10a4      	asrs	r4, r4, #2
 8002272:	2600      	movs	r6, #0
 8002274:	42a6      	cmp	r6, r4
 8002276:	d109      	bne.n	800228c <__libc_init_array+0x24>
 8002278:	4d0b      	ldr	r5, [pc, #44]	; (80022a8 <__libc_init_array+0x40>)
 800227a:	4c0c      	ldr	r4, [pc, #48]	; (80022ac <__libc_init_array+0x44>)
 800227c:	f000 ffec 	bl	8003258 <_init>
 8002280:	1b64      	subs	r4, r4, r5
 8002282:	10a4      	asrs	r4, r4, #2
 8002284:	2600      	movs	r6, #0
 8002286:	42a6      	cmp	r6, r4
 8002288:	d105      	bne.n	8002296 <__libc_init_array+0x2e>
 800228a:	bd70      	pop	{r4, r5, r6, pc}
 800228c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002290:	4798      	blx	r3
 8002292:	3601      	adds	r6, #1
 8002294:	e7ee      	b.n	8002274 <__libc_init_array+0xc>
 8002296:	f855 3b04 	ldr.w	r3, [r5], #4
 800229a:	4798      	blx	r3
 800229c:	3601      	adds	r6, #1
 800229e:	e7f2      	b.n	8002286 <__libc_init_array+0x1e>
 80022a0:	08003374 	.word	0x08003374
 80022a4:	08003374 	.word	0x08003374
 80022a8:	08003374 	.word	0x08003374
 80022ac:	08003378 	.word	0x08003378

080022b0 <memcpy>:
 80022b0:	440a      	add	r2, r1
 80022b2:	4291      	cmp	r1, r2
 80022b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80022b8:	d100      	bne.n	80022bc <memcpy+0xc>
 80022ba:	4770      	bx	lr
 80022bc:	b510      	push	{r4, lr}
 80022be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022c6:	4291      	cmp	r1, r2
 80022c8:	d1f9      	bne.n	80022be <memcpy+0xe>
 80022ca:	bd10      	pop	{r4, pc}

080022cc <memset>:
 80022cc:	4402      	add	r2, r0
 80022ce:	4603      	mov	r3, r0
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d100      	bne.n	80022d6 <memset+0xa>
 80022d4:	4770      	bx	lr
 80022d6:	f803 1b01 	strb.w	r1, [r3], #1
 80022da:	e7f9      	b.n	80022d0 <memset+0x4>

080022dc <iprintf>:
 80022dc:	b40f      	push	{r0, r1, r2, r3}
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <iprintf+0x2c>)
 80022e0:	b513      	push	{r0, r1, r4, lr}
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	b124      	cbz	r4, 80022f0 <iprintf+0x14>
 80022e6:	69a3      	ldr	r3, [r4, #24]
 80022e8:	b913      	cbnz	r3, 80022f0 <iprintf+0x14>
 80022ea:	4620      	mov	r0, r4
 80022ec:	f000 f866 	bl	80023bc <__sinit>
 80022f0:	ab05      	add	r3, sp, #20
 80022f2:	9a04      	ldr	r2, [sp, #16]
 80022f4:	68a1      	ldr	r1, [r4, #8]
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	4620      	mov	r0, r4
 80022fa:	f000 f9bd 	bl	8002678 <_vfiprintf_r>
 80022fe:	b002      	add	sp, #8
 8002300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002304:	b004      	add	sp, #16
 8002306:	4770      	bx	lr
 8002308:	2000000c 	.word	0x2000000c

0800230c <std>:
 800230c:	2300      	movs	r3, #0
 800230e:	b510      	push	{r4, lr}
 8002310:	4604      	mov	r4, r0
 8002312:	e9c0 3300 	strd	r3, r3, [r0]
 8002316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800231a:	6083      	str	r3, [r0, #8]
 800231c:	8181      	strh	r1, [r0, #12]
 800231e:	6643      	str	r3, [r0, #100]	; 0x64
 8002320:	81c2      	strh	r2, [r0, #14]
 8002322:	6183      	str	r3, [r0, #24]
 8002324:	4619      	mov	r1, r3
 8002326:	2208      	movs	r2, #8
 8002328:	305c      	adds	r0, #92	; 0x5c
 800232a:	f7ff ffcf 	bl	80022cc <memset>
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <std+0x38>)
 8002330:	6263      	str	r3, [r4, #36]	; 0x24
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <std+0x3c>)
 8002334:	62a3      	str	r3, [r4, #40]	; 0x28
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <std+0x40>)
 8002338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <std+0x44>)
 800233c:	6224      	str	r4, [r4, #32]
 800233e:	6323      	str	r3, [r4, #48]	; 0x30
 8002340:	bd10      	pop	{r4, pc}
 8002342:	bf00      	nop
 8002344:	08002c21 	.word	0x08002c21
 8002348:	08002c43 	.word	0x08002c43
 800234c:	08002c7b 	.word	0x08002c7b
 8002350:	08002c9f 	.word	0x08002c9f

08002354 <_cleanup_r>:
 8002354:	4901      	ldr	r1, [pc, #4]	; (800235c <_cleanup_r+0x8>)
 8002356:	f000 b8af 	b.w	80024b8 <_fwalk_reent>
 800235a:	bf00      	nop
 800235c:	08002f79 	.word	0x08002f79

08002360 <__sfmoreglue>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	2268      	movs	r2, #104	; 0x68
 8002364:	1e4d      	subs	r5, r1, #1
 8002366:	4355      	muls	r5, r2
 8002368:	460e      	mov	r6, r1
 800236a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800236e:	f000 f8e5 	bl	800253c <_malloc_r>
 8002372:	4604      	mov	r4, r0
 8002374:	b140      	cbz	r0, 8002388 <__sfmoreglue+0x28>
 8002376:	2100      	movs	r1, #0
 8002378:	e9c0 1600 	strd	r1, r6, [r0]
 800237c:	300c      	adds	r0, #12
 800237e:	60a0      	str	r0, [r4, #8]
 8002380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002384:	f7ff ffa2 	bl	80022cc <memset>
 8002388:	4620      	mov	r0, r4
 800238a:	bd70      	pop	{r4, r5, r6, pc}

0800238c <__sfp_lock_acquire>:
 800238c:	4801      	ldr	r0, [pc, #4]	; (8002394 <__sfp_lock_acquire+0x8>)
 800238e:	f000 b8b3 	b.w	80024f8 <__retarget_lock_acquire_recursive>
 8002392:	bf00      	nop
 8002394:	20004b99 	.word	0x20004b99

08002398 <__sfp_lock_release>:
 8002398:	4801      	ldr	r0, [pc, #4]	; (80023a0 <__sfp_lock_release+0x8>)
 800239a:	f000 b8ae 	b.w	80024fa <__retarget_lock_release_recursive>
 800239e:	bf00      	nop
 80023a0:	20004b99 	.word	0x20004b99

080023a4 <__sinit_lock_acquire>:
 80023a4:	4801      	ldr	r0, [pc, #4]	; (80023ac <__sinit_lock_acquire+0x8>)
 80023a6:	f000 b8a7 	b.w	80024f8 <__retarget_lock_acquire_recursive>
 80023aa:	bf00      	nop
 80023ac:	20004b9a 	.word	0x20004b9a

080023b0 <__sinit_lock_release>:
 80023b0:	4801      	ldr	r0, [pc, #4]	; (80023b8 <__sinit_lock_release+0x8>)
 80023b2:	f000 b8a2 	b.w	80024fa <__retarget_lock_release_recursive>
 80023b6:	bf00      	nop
 80023b8:	20004b9a 	.word	0x20004b9a

080023bc <__sinit>:
 80023bc:	b510      	push	{r4, lr}
 80023be:	4604      	mov	r4, r0
 80023c0:	f7ff fff0 	bl	80023a4 <__sinit_lock_acquire>
 80023c4:	69a3      	ldr	r3, [r4, #24]
 80023c6:	b11b      	cbz	r3, 80023d0 <__sinit+0x14>
 80023c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023cc:	f7ff bff0 	b.w	80023b0 <__sinit_lock_release>
 80023d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80023d4:	6523      	str	r3, [r4, #80]	; 0x50
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <__sinit+0x68>)
 80023d8:	4a13      	ldr	r2, [pc, #76]	; (8002428 <__sinit+0x6c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80023de:	42a3      	cmp	r3, r4
 80023e0:	bf04      	itt	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	61a3      	streq	r3, [r4, #24]
 80023e6:	4620      	mov	r0, r4
 80023e8:	f000 f820 	bl	800242c <__sfp>
 80023ec:	6060      	str	r0, [r4, #4]
 80023ee:	4620      	mov	r0, r4
 80023f0:	f000 f81c 	bl	800242c <__sfp>
 80023f4:	60a0      	str	r0, [r4, #8]
 80023f6:	4620      	mov	r0, r4
 80023f8:	f000 f818 	bl	800242c <__sfp>
 80023fc:	2200      	movs	r2, #0
 80023fe:	60e0      	str	r0, [r4, #12]
 8002400:	2104      	movs	r1, #4
 8002402:	6860      	ldr	r0, [r4, #4]
 8002404:	f7ff ff82 	bl	800230c <std>
 8002408:	68a0      	ldr	r0, [r4, #8]
 800240a:	2201      	movs	r2, #1
 800240c:	2109      	movs	r1, #9
 800240e:	f7ff ff7d 	bl	800230c <std>
 8002412:	68e0      	ldr	r0, [r4, #12]
 8002414:	2202      	movs	r2, #2
 8002416:	2112      	movs	r1, #18
 8002418:	f7ff ff78 	bl	800230c <std>
 800241c:	2301      	movs	r3, #1
 800241e:	61a3      	str	r3, [r4, #24]
 8002420:	e7d2      	b.n	80023c8 <__sinit+0xc>
 8002422:	bf00      	nop
 8002424:	080032dc 	.word	0x080032dc
 8002428:	08002355 	.word	0x08002355

0800242c <__sfp>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	4607      	mov	r7, r0
 8002430:	f7ff ffac 	bl	800238c <__sfp_lock_acquire>
 8002434:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <__sfp+0x84>)
 8002436:	681e      	ldr	r6, [r3, #0]
 8002438:	69b3      	ldr	r3, [r6, #24]
 800243a:	b913      	cbnz	r3, 8002442 <__sfp+0x16>
 800243c:	4630      	mov	r0, r6
 800243e:	f7ff ffbd 	bl	80023bc <__sinit>
 8002442:	3648      	adds	r6, #72	; 0x48
 8002444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002448:	3b01      	subs	r3, #1
 800244a:	d503      	bpl.n	8002454 <__sfp+0x28>
 800244c:	6833      	ldr	r3, [r6, #0]
 800244e:	b30b      	cbz	r3, 8002494 <__sfp+0x68>
 8002450:	6836      	ldr	r6, [r6, #0]
 8002452:	e7f7      	b.n	8002444 <__sfp+0x18>
 8002454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002458:	b9d5      	cbnz	r5, 8002490 <__sfp+0x64>
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <__sfp+0x88>)
 800245c:	60e3      	str	r3, [r4, #12]
 800245e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002462:	6665      	str	r5, [r4, #100]	; 0x64
 8002464:	f000 f847 	bl	80024f6 <__retarget_lock_init_recursive>
 8002468:	f7ff ff96 	bl	8002398 <__sfp_lock_release>
 800246c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002474:	6025      	str	r5, [r4, #0]
 8002476:	61a5      	str	r5, [r4, #24]
 8002478:	2208      	movs	r2, #8
 800247a:	4629      	mov	r1, r5
 800247c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002480:	f7ff ff24 	bl	80022cc <memset>
 8002484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800248c:	4620      	mov	r0, r4
 800248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002490:	3468      	adds	r4, #104	; 0x68
 8002492:	e7d9      	b.n	8002448 <__sfp+0x1c>
 8002494:	2104      	movs	r1, #4
 8002496:	4638      	mov	r0, r7
 8002498:	f7ff ff62 	bl	8002360 <__sfmoreglue>
 800249c:	4604      	mov	r4, r0
 800249e:	6030      	str	r0, [r6, #0]
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d1d5      	bne.n	8002450 <__sfp+0x24>
 80024a4:	f7ff ff78 	bl	8002398 <__sfp_lock_release>
 80024a8:	230c      	movs	r3, #12
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	e7ee      	b.n	800248c <__sfp+0x60>
 80024ae:	bf00      	nop
 80024b0:	080032dc 	.word	0x080032dc
 80024b4:	ffff0001 	.word	0xffff0001

080024b8 <_fwalk_reent>:
 80024b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024bc:	4606      	mov	r6, r0
 80024be:	4688      	mov	r8, r1
 80024c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024c4:	2700      	movs	r7, #0
 80024c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024ca:	f1b9 0901 	subs.w	r9, r9, #1
 80024ce:	d505      	bpl.n	80024dc <_fwalk_reent+0x24>
 80024d0:	6824      	ldr	r4, [r4, #0]
 80024d2:	2c00      	cmp	r4, #0
 80024d4:	d1f7      	bne.n	80024c6 <_fwalk_reent+0xe>
 80024d6:	4638      	mov	r0, r7
 80024d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024dc:	89ab      	ldrh	r3, [r5, #12]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d907      	bls.n	80024f2 <_fwalk_reent+0x3a>
 80024e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024e6:	3301      	adds	r3, #1
 80024e8:	d003      	beq.n	80024f2 <_fwalk_reent+0x3a>
 80024ea:	4629      	mov	r1, r5
 80024ec:	4630      	mov	r0, r6
 80024ee:	47c0      	blx	r8
 80024f0:	4307      	orrs	r7, r0
 80024f2:	3568      	adds	r5, #104	; 0x68
 80024f4:	e7e9      	b.n	80024ca <_fwalk_reent+0x12>

080024f6 <__retarget_lock_init_recursive>:
 80024f6:	4770      	bx	lr

080024f8 <__retarget_lock_acquire_recursive>:
 80024f8:	4770      	bx	lr

080024fa <__retarget_lock_release_recursive>:
 80024fa:	4770      	bx	lr

080024fc <sbrk_aligned>:
 80024fc:	b570      	push	{r4, r5, r6, lr}
 80024fe:	4e0e      	ldr	r6, [pc, #56]	; (8002538 <sbrk_aligned+0x3c>)
 8002500:	460c      	mov	r4, r1
 8002502:	6831      	ldr	r1, [r6, #0]
 8002504:	4605      	mov	r5, r0
 8002506:	b911      	cbnz	r1, 800250e <sbrk_aligned+0x12>
 8002508:	f000 fb7a 	bl	8002c00 <_sbrk_r>
 800250c:	6030      	str	r0, [r6, #0]
 800250e:	4621      	mov	r1, r4
 8002510:	4628      	mov	r0, r5
 8002512:	f000 fb75 	bl	8002c00 <_sbrk_r>
 8002516:	1c43      	adds	r3, r0, #1
 8002518:	d00a      	beq.n	8002530 <sbrk_aligned+0x34>
 800251a:	1cc4      	adds	r4, r0, #3
 800251c:	f024 0403 	bic.w	r4, r4, #3
 8002520:	42a0      	cmp	r0, r4
 8002522:	d007      	beq.n	8002534 <sbrk_aligned+0x38>
 8002524:	1a21      	subs	r1, r4, r0
 8002526:	4628      	mov	r0, r5
 8002528:	f000 fb6a 	bl	8002c00 <_sbrk_r>
 800252c:	3001      	adds	r0, #1
 800252e:	d101      	bne.n	8002534 <sbrk_aligned+0x38>
 8002530:	f04f 34ff 	mov.w	r4, #4294967295
 8002534:	4620      	mov	r0, r4
 8002536:	bd70      	pop	{r4, r5, r6, pc}
 8002538:	20004ba0 	.word	0x20004ba0

0800253c <_malloc_r>:
 800253c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002540:	1ccd      	adds	r5, r1, #3
 8002542:	f025 0503 	bic.w	r5, r5, #3
 8002546:	3508      	adds	r5, #8
 8002548:	2d0c      	cmp	r5, #12
 800254a:	bf38      	it	cc
 800254c:	250c      	movcc	r5, #12
 800254e:	2d00      	cmp	r5, #0
 8002550:	4607      	mov	r7, r0
 8002552:	db01      	blt.n	8002558 <_malloc_r+0x1c>
 8002554:	42a9      	cmp	r1, r5
 8002556:	d905      	bls.n	8002564 <_malloc_r+0x28>
 8002558:	230c      	movs	r3, #12
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	2600      	movs	r6, #0
 800255e:	4630      	mov	r0, r6
 8002560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002564:	4e2e      	ldr	r6, [pc, #184]	; (8002620 <_malloc_r+0xe4>)
 8002566:	f000 fdbb 	bl	80030e0 <__malloc_lock>
 800256a:	6833      	ldr	r3, [r6, #0]
 800256c:	461c      	mov	r4, r3
 800256e:	bb34      	cbnz	r4, 80025be <_malloc_r+0x82>
 8002570:	4629      	mov	r1, r5
 8002572:	4638      	mov	r0, r7
 8002574:	f7ff ffc2 	bl	80024fc <sbrk_aligned>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	4604      	mov	r4, r0
 800257c:	d14d      	bne.n	800261a <_malloc_r+0xde>
 800257e:	6834      	ldr	r4, [r6, #0]
 8002580:	4626      	mov	r6, r4
 8002582:	2e00      	cmp	r6, #0
 8002584:	d140      	bne.n	8002608 <_malloc_r+0xcc>
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	4631      	mov	r1, r6
 800258a:	4638      	mov	r0, r7
 800258c:	eb04 0803 	add.w	r8, r4, r3
 8002590:	f000 fb36 	bl	8002c00 <_sbrk_r>
 8002594:	4580      	cmp	r8, r0
 8002596:	d13a      	bne.n	800260e <_malloc_r+0xd2>
 8002598:	6821      	ldr	r1, [r4, #0]
 800259a:	3503      	adds	r5, #3
 800259c:	1a6d      	subs	r5, r5, r1
 800259e:	f025 0503 	bic.w	r5, r5, #3
 80025a2:	3508      	adds	r5, #8
 80025a4:	2d0c      	cmp	r5, #12
 80025a6:	bf38      	it	cc
 80025a8:	250c      	movcc	r5, #12
 80025aa:	4629      	mov	r1, r5
 80025ac:	4638      	mov	r0, r7
 80025ae:	f7ff ffa5 	bl	80024fc <sbrk_aligned>
 80025b2:	3001      	adds	r0, #1
 80025b4:	d02b      	beq.n	800260e <_malloc_r+0xd2>
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	442b      	add	r3, r5
 80025ba:	6023      	str	r3, [r4, #0]
 80025bc:	e00e      	b.n	80025dc <_malloc_r+0xa0>
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	1b52      	subs	r2, r2, r5
 80025c2:	d41e      	bmi.n	8002602 <_malloc_r+0xc6>
 80025c4:	2a0b      	cmp	r2, #11
 80025c6:	d916      	bls.n	80025f6 <_malloc_r+0xba>
 80025c8:	1961      	adds	r1, r4, r5
 80025ca:	42a3      	cmp	r3, r4
 80025cc:	6025      	str	r5, [r4, #0]
 80025ce:	bf18      	it	ne
 80025d0:	6059      	strne	r1, [r3, #4]
 80025d2:	6863      	ldr	r3, [r4, #4]
 80025d4:	bf08      	it	eq
 80025d6:	6031      	streq	r1, [r6, #0]
 80025d8:	5162      	str	r2, [r4, r5]
 80025da:	604b      	str	r3, [r1, #4]
 80025dc:	4638      	mov	r0, r7
 80025de:	f104 060b 	add.w	r6, r4, #11
 80025e2:	f000 fd83 	bl	80030ec <__malloc_unlock>
 80025e6:	f026 0607 	bic.w	r6, r6, #7
 80025ea:	1d23      	adds	r3, r4, #4
 80025ec:	1af2      	subs	r2, r6, r3
 80025ee:	d0b6      	beq.n	800255e <_malloc_r+0x22>
 80025f0:	1b9b      	subs	r3, r3, r6
 80025f2:	50a3      	str	r3, [r4, r2]
 80025f4:	e7b3      	b.n	800255e <_malloc_r+0x22>
 80025f6:	6862      	ldr	r2, [r4, #4]
 80025f8:	42a3      	cmp	r3, r4
 80025fa:	bf0c      	ite	eq
 80025fc:	6032      	streq	r2, [r6, #0]
 80025fe:	605a      	strne	r2, [r3, #4]
 8002600:	e7ec      	b.n	80025dc <_malloc_r+0xa0>
 8002602:	4623      	mov	r3, r4
 8002604:	6864      	ldr	r4, [r4, #4]
 8002606:	e7b2      	b.n	800256e <_malloc_r+0x32>
 8002608:	4634      	mov	r4, r6
 800260a:	6876      	ldr	r6, [r6, #4]
 800260c:	e7b9      	b.n	8002582 <_malloc_r+0x46>
 800260e:	230c      	movs	r3, #12
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4638      	mov	r0, r7
 8002614:	f000 fd6a 	bl	80030ec <__malloc_unlock>
 8002618:	e7a1      	b.n	800255e <_malloc_r+0x22>
 800261a:	6025      	str	r5, [r4, #0]
 800261c:	e7de      	b.n	80025dc <_malloc_r+0xa0>
 800261e:	bf00      	nop
 8002620:	20004b9c 	.word	0x20004b9c

08002624 <__sfputc_r>:
 8002624:	6893      	ldr	r3, [r2, #8]
 8002626:	3b01      	subs	r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	b410      	push	{r4}
 800262c:	6093      	str	r3, [r2, #8]
 800262e:	da08      	bge.n	8002642 <__sfputc_r+0x1e>
 8002630:	6994      	ldr	r4, [r2, #24]
 8002632:	42a3      	cmp	r3, r4
 8002634:	db01      	blt.n	800263a <__sfputc_r+0x16>
 8002636:	290a      	cmp	r1, #10
 8002638:	d103      	bne.n	8002642 <__sfputc_r+0x1e>
 800263a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800263e:	f000 bb33 	b.w	8002ca8 <__swbuf_r>
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	1c58      	adds	r0, r3, #1
 8002646:	6010      	str	r0, [r2, #0]
 8002648:	7019      	strb	r1, [r3, #0]
 800264a:	4608      	mov	r0, r1
 800264c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002650:	4770      	bx	lr

08002652 <__sfputs_r>:
 8002652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002654:	4606      	mov	r6, r0
 8002656:	460f      	mov	r7, r1
 8002658:	4614      	mov	r4, r2
 800265a:	18d5      	adds	r5, r2, r3
 800265c:	42ac      	cmp	r4, r5
 800265e:	d101      	bne.n	8002664 <__sfputs_r+0x12>
 8002660:	2000      	movs	r0, #0
 8002662:	e007      	b.n	8002674 <__sfputs_r+0x22>
 8002664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002668:	463a      	mov	r2, r7
 800266a:	4630      	mov	r0, r6
 800266c:	f7ff ffda 	bl	8002624 <__sfputc_r>
 8002670:	1c43      	adds	r3, r0, #1
 8002672:	d1f3      	bne.n	800265c <__sfputs_r+0xa>
 8002674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002678 <_vfiprintf_r>:
 8002678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800267c:	460d      	mov	r5, r1
 800267e:	b09d      	sub	sp, #116	; 0x74
 8002680:	4614      	mov	r4, r2
 8002682:	4698      	mov	r8, r3
 8002684:	4606      	mov	r6, r0
 8002686:	b118      	cbz	r0, 8002690 <_vfiprintf_r+0x18>
 8002688:	6983      	ldr	r3, [r0, #24]
 800268a:	b90b      	cbnz	r3, 8002690 <_vfiprintf_r+0x18>
 800268c:	f7ff fe96 	bl	80023bc <__sinit>
 8002690:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <_vfiprintf_r+0x240>)
 8002692:	429d      	cmp	r5, r3
 8002694:	d11b      	bne.n	80026ce <_vfiprintf_r+0x56>
 8002696:	6875      	ldr	r5, [r6, #4]
 8002698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800269a:	07d9      	lsls	r1, r3, #31
 800269c:	d405      	bmi.n	80026aa <_vfiprintf_r+0x32>
 800269e:	89ab      	ldrh	r3, [r5, #12]
 80026a0:	059a      	lsls	r2, r3, #22
 80026a2:	d402      	bmi.n	80026aa <_vfiprintf_r+0x32>
 80026a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026a6:	f7ff ff27 	bl	80024f8 <__retarget_lock_acquire_recursive>
 80026aa:	89ab      	ldrh	r3, [r5, #12]
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	d501      	bpl.n	80026b4 <_vfiprintf_r+0x3c>
 80026b0:	692b      	ldr	r3, [r5, #16]
 80026b2:	b9eb      	cbnz	r3, 80026f0 <_vfiprintf_r+0x78>
 80026b4:	4629      	mov	r1, r5
 80026b6:	4630      	mov	r0, r6
 80026b8:	f000 fb5a 	bl	8002d70 <__swsetup_r>
 80026bc:	b1c0      	cbz	r0, 80026f0 <_vfiprintf_r+0x78>
 80026be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026c0:	07dc      	lsls	r4, r3, #31
 80026c2:	d50e      	bpl.n	80026e2 <_vfiprintf_r+0x6a>
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	b01d      	add	sp, #116	; 0x74
 80026ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ce:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <_vfiprintf_r+0x244>)
 80026d0:	429d      	cmp	r5, r3
 80026d2:	d101      	bne.n	80026d8 <_vfiprintf_r+0x60>
 80026d4:	68b5      	ldr	r5, [r6, #8]
 80026d6:	e7df      	b.n	8002698 <_vfiprintf_r+0x20>
 80026d8:	4b79      	ldr	r3, [pc, #484]	; (80028c0 <_vfiprintf_r+0x248>)
 80026da:	429d      	cmp	r5, r3
 80026dc:	bf08      	it	eq
 80026de:	68f5      	ldreq	r5, [r6, #12]
 80026e0:	e7da      	b.n	8002698 <_vfiprintf_r+0x20>
 80026e2:	89ab      	ldrh	r3, [r5, #12]
 80026e4:	0598      	lsls	r0, r3, #22
 80026e6:	d4ed      	bmi.n	80026c4 <_vfiprintf_r+0x4c>
 80026e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026ea:	f7ff ff06 	bl	80024fa <__retarget_lock_release_recursive>
 80026ee:	e7e9      	b.n	80026c4 <_vfiprintf_r+0x4c>
 80026f0:	2300      	movs	r3, #0
 80026f2:	9309      	str	r3, [sp, #36]	; 0x24
 80026f4:	2320      	movs	r3, #32
 80026f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80026fe:	2330      	movs	r3, #48	; 0x30
 8002700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80028c4 <_vfiprintf_r+0x24c>
 8002704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002708:	f04f 0901 	mov.w	r9, #1
 800270c:	4623      	mov	r3, r4
 800270e:	469a      	mov	sl, r3
 8002710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002714:	b10a      	cbz	r2, 800271a <_vfiprintf_r+0xa2>
 8002716:	2a25      	cmp	r2, #37	; 0x25
 8002718:	d1f9      	bne.n	800270e <_vfiprintf_r+0x96>
 800271a:	ebba 0b04 	subs.w	fp, sl, r4
 800271e:	d00b      	beq.n	8002738 <_vfiprintf_r+0xc0>
 8002720:	465b      	mov	r3, fp
 8002722:	4622      	mov	r2, r4
 8002724:	4629      	mov	r1, r5
 8002726:	4630      	mov	r0, r6
 8002728:	f7ff ff93 	bl	8002652 <__sfputs_r>
 800272c:	3001      	adds	r0, #1
 800272e:	f000 80aa 	beq.w	8002886 <_vfiprintf_r+0x20e>
 8002732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002734:	445a      	add	r2, fp
 8002736:	9209      	str	r2, [sp, #36]	; 0x24
 8002738:	f89a 3000 	ldrb.w	r3, [sl]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80a2 	beq.w	8002886 <_vfiprintf_r+0x20e>
 8002742:	2300      	movs	r3, #0
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800274c:	f10a 0a01 	add.w	sl, sl, #1
 8002750:	9304      	str	r3, [sp, #16]
 8002752:	9307      	str	r3, [sp, #28]
 8002754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002758:	931a      	str	r3, [sp, #104]	; 0x68
 800275a:	4654      	mov	r4, sl
 800275c:	2205      	movs	r2, #5
 800275e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002762:	4858      	ldr	r0, [pc, #352]	; (80028c4 <_vfiprintf_r+0x24c>)
 8002764:	f7fd fc6c 	bl	8000040 <memchr>
 8002768:	9a04      	ldr	r2, [sp, #16]
 800276a:	b9d8      	cbnz	r0, 80027a4 <_vfiprintf_r+0x12c>
 800276c:	06d1      	lsls	r1, r2, #27
 800276e:	bf44      	itt	mi
 8002770:	2320      	movmi	r3, #32
 8002772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002776:	0713      	lsls	r3, r2, #28
 8002778:	bf44      	itt	mi
 800277a:	232b      	movmi	r3, #43	; 0x2b
 800277c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002780:	f89a 3000 	ldrb.w	r3, [sl]
 8002784:	2b2a      	cmp	r3, #42	; 0x2a
 8002786:	d015      	beq.n	80027b4 <_vfiprintf_r+0x13c>
 8002788:	9a07      	ldr	r2, [sp, #28]
 800278a:	4654      	mov	r4, sl
 800278c:	2000      	movs	r0, #0
 800278e:	f04f 0c0a 	mov.w	ip, #10
 8002792:	4621      	mov	r1, r4
 8002794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002798:	3b30      	subs	r3, #48	; 0x30
 800279a:	2b09      	cmp	r3, #9
 800279c:	d94e      	bls.n	800283c <_vfiprintf_r+0x1c4>
 800279e:	b1b0      	cbz	r0, 80027ce <_vfiprintf_r+0x156>
 80027a0:	9207      	str	r2, [sp, #28]
 80027a2:	e014      	b.n	80027ce <_vfiprintf_r+0x156>
 80027a4:	eba0 0308 	sub.w	r3, r0, r8
 80027a8:	fa09 f303 	lsl.w	r3, r9, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	9304      	str	r3, [sp, #16]
 80027b0:	46a2      	mov	sl, r4
 80027b2:	e7d2      	b.n	800275a <_vfiprintf_r+0xe2>
 80027b4:	9b03      	ldr	r3, [sp, #12]
 80027b6:	1d19      	adds	r1, r3, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	9103      	str	r1, [sp, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bfbb      	ittet	lt
 80027c0:	425b      	neglt	r3, r3
 80027c2:	f042 0202 	orrlt.w	r2, r2, #2
 80027c6:	9307      	strge	r3, [sp, #28]
 80027c8:	9307      	strlt	r3, [sp, #28]
 80027ca:	bfb8      	it	lt
 80027cc:	9204      	strlt	r2, [sp, #16]
 80027ce:	7823      	ldrb	r3, [r4, #0]
 80027d0:	2b2e      	cmp	r3, #46	; 0x2e
 80027d2:	d10c      	bne.n	80027ee <_vfiprintf_r+0x176>
 80027d4:	7863      	ldrb	r3, [r4, #1]
 80027d6:	2b2a      	cmp	r3, #42	; 0x2a
 80027d8:	d135      	bne.n	8002846 <_vfiprintf_r+0x1ce>
 80027da:	9b03      	ldr	r3, [sp, #12]
 80027dc:	1d1a      	adds	r2, r3, #4
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	9203      	str	r2, [sp, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bfb8      	it	lt
 80027e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80027ea:	3402      	adds	r4, #2
 80027ec:	9305      	str	r3, [sp, #20]
 80027ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80028d4 <_vfiprintf_r+0x25c>
 80027f2:	7821      	ldrb	r1, [r4, #0]
 80027f4:	2203      	movs	r2, #3
 80027f6:	4650      	mov	r0, sl
 80027f8:	f7fd fc22 	bl	8000040 <memchr>
 80027fc:	b140      	cbz	r0, 8002810 <_vfiprintf_r+0x198>
 80027fe:	2340      	movs	r3, #64	; 0x40
 8002800:	eba0 000a 	sub.w	r0, r0, sl
 8002804:	fa03 f000 	lsl.w	r0, r3, r0
 8002808:	9b04      	ldr	r3, [sp, #16]
 800280a:	4303      	orrs	r3, r0
 800280c:	3401      	adds	r4, #1
 800280e:	9304      	str	r3, [sp, #16]
 8002810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002814:	482c      	ldr	r0, [pc, #176]	; (80028c8 <_vfiprintf_r+0x250>)
 8002816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800281a:	2206      	movs	r2, #6
 800281c:	f7fd fc10 	bl	8000040 <memchr>
 8002820:	2800      	cmp	r0, #0
 8002822:	d03f      	beq.n	80028a4 <_vfiprintf_r+0x22c>
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <_vfiprintf_r+0x254>)
 8002826:	bb1b      	cbnz	r3, 8002870 <_vfiprintf_r+0x1f8>
 8002828:	9b03      	ldr	r3, [sp, #12]
 800282a:	3307      	adds	r3, #7
 800282c:	f023 0307 	bic.w	r3, r3, #7
 8002830:	3308      	adds	r3, #8
 8002832:	9303      	str	r3, [sp, #12]
 8002834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002836:	443b      	add	r3, r7
 8002838:	9309      	str	r3, [sp, #36]	; 0x24
 800283a:	e767      	b.n	800270c <_vfiprintf_r+0x94>
 800283c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002840:	460c      	mov	r4, r1
 8002842:	2001      	movs	r0, #1
 8002844:	e7a5      	b.n	8002792 <_vfiprintf_r+0x11a>
 8002846:	2300      	movs	r3, #0
 8002848:	3401      	adds	r4, #1
 800284a:	9305      	str	r3, [sp, #20]
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 0c0a 	mov.w	ip, #10
 8002852:	4620      	mov	r0, r4
 8002854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002858:	3a30      	subs	r2, #48	; 0x30
 800285a:	2a09      	cmp	r2, #9
 800285c:	d903      	bls.n	8002866 <_vfiprintf_r+0x1ee>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0c5      	beq.n	80027ee <_vfiprintf_r+0x176>
 8002862:	9105      	str	r1, [sp, #20]
 8002864:	e7c3      	b.n	80027ee <_vfiprintf_r+0x176>
 8002866:	fb0c 2101 	mla	r1, ip, r1, r2
 800286a:	4604      	mov	r4, r0
 800286c:	2301      	movs	r3, #1
 800286e:	e7f0      	b.n	8002852 <_vfiprintf_r+0x1da>
 8002870:	ab03      	add	r3, sp, #12
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	462a      	mov	r2, r5
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <_vfiprintf_r+0x258>)
 8002878:	a904      	add	r1, sp, #16
 800287a:	4630      	mov	r0, r6
 800287c:	f3af 8000 	nop.w
 8002880:	4607      	mov	r7, r0
 8002882:	1c78      	adds	r0, r7, #1
 8002884:	d1d6      	bne.n	8002834 <_vfiprintf_r+0x1bc>
 8002886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002888:	07d9      	lsls	r1, r3, #31
 800288a:	d405      	bmi.n	8002898 <_vfiprintf_r+0x220>
 800288c:	89ab      	ldrh	r3, [r5, #12]
 800288e:	059a      	lsls	r2, r3, #22
 8002890:	d402      	bmi.n	8002898 <_vfiprintf_r+0x220>
 8002892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002894:	f7ff fe31 	bl	80024fa <__retarget_lock_release_recursive>
 8002898:	89ab      	ldrh	r3, [r5, #12]
 800289a:	065b      	lsls	r3, r3, #25
 800289c:	f53f af12 	bmi.w	80026c4 <_vfiprintf_r+0x4c>
 80028a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028a2:	e711      	b.n	80026c8 <_vfiprintf_r+0x50>
 80028a4:	ab03      	add	r3, sp, #12
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	462a      	mov	r2, r5
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <_vfiprintf_r+0x258>)
 80028ac:	a904      	add	r1, sp, #16
 80028ae:	4630      	mov	r0, r6
 80028b0:	f000 f880 	bl	80029b4 <_printf_i>
 80028b4:	e7e4      	b.n	8002880 <_vfiprintf_r+0x208>
 80028b6:	bf00      	nop
 80028b8:	08003300 	.word	0x08003300
 80028bc:	08003320 	.word	0x08003320
 80028c0:	080032e0 	.word	0x080032e0
 80028c4:	08003340 	.word	0x08003340
 80028c8:	0800334a 	.word	0x0800334a
 80028cc:	00000000 	.word	0x00000000
 80028d0:	08002653 	.word	0x08002653
 80028d4:	08003346 	.word	0x08003346

080028d8 <_printf_common>:
 80028d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028dc:	4616      	mov	r6, r2
 80028de:	4699      	mov	r9, r3
 80028e0:	688a      	ldr	r2, [r1, #8]
 80028e2:	690b      	ldr	r3, [r1, #16]
 80028e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bfb8      	it	lt
 80028ec:	4613      	movlt	r3, r2
 80028ee:	6033      	str	r3, [r6, #0]
 80028f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028f4:	4607      	mov	r7, r0
 80028f6:	460c      	mov	r4, r1
 80028f8:	b10a      	cbz	r2, 80028fe <_printf_common+0x26>
 80028fa:	3301      	adds	r3, #1
 80028fc:	6033      	str	r3, [r6, #0]
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	0699      	lsls	r1, r3, #26
 8002902:	bf42      	ittt	mi
 8002904:	6833      	ldrmi	r3, [r6, #0]
 8002906:	3302      	addmi	r3, #2
 8002908:	6033      	strmi	r3, [r6, #0]
 800290a:	6825      	ldr	r5, [r4, #0]
 800290c:	f015 0506 	ands.w	r5, r5, #6
 8002910:	d106      	bne.n	8002920 <_printf_common+0x48>
 8002912:	f104 0a19 	add.w	sl, r4, #25
 8002916:	68e3      	ldr	r3, [r4, #12]
 8002918:	6832      	ldr	r2, [r6, #0]
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	42ab      	cmp	r3, r5
 800291e:	dc26      	bgt.n	800296e <_printf_common+0x96>
 8002920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002924:	1e13      	subs	r3, r2, #0
 8002926:	6822      	ldr	r2, [r4, #0]
 8002928:	bf18      	it	ne
 800292a:	2301      	movne	r3, #1
 800292c:	0692      	lsls	r2, r2, #26
 800292e:	d42b      	bmi.n	8002988 <_printf_common+0xb0>
 8002930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002934:	4649      	mov	r1, r9
 8002936:	4638      	mov	r0, r7
 8002938:	47c0      	blx	r8
 800293a:	3001      	adds	r0, #1
 800293c:	d01e      	beq.n	800297c <_printf_common+0xa4>
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	68e5      	ldr	r5, [r4, #12]
 8002942:	6832      	ldr	r2, [r6, #0]
 8002944:	f003 0306 	and.w	r3, r3, #6
 8002948:	2b04      	cmp	r3, #4
 800294a:	bf08      	it	eq
 800294c:	1aad      	subeq	r5, r5, r2
 800294e:	68a3      	ldr	r3, [r4, #8]
 8002950:	6922      	ldr	r2, [r4, #16]
 8002952:	bf0c      	ite	eq
 8002954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002958:	2500      	movne	r5, #0
 800295a:	4293      	cmp	r3, r2
 800295c:	bfc4      	itt	gt
 800295e:	1a9b      	subgt	r3, r3, r2
 8002960:	18ed      	addgt	r5, r5, r3
 8002962:	2600      	movs	r6, #0
 8002964:	341a      	adds	r4, #26
 8002966:	42b5      	cmp	r5, r6
 8002968:	d11a      	bne.n	80029a0 <_printf_common+0xc8>
 800296a:	2000      	movs	r0, #0
 800296c:	e008      	b.n	8002980 <_printf_common+0xa8>
 800296e:	2301      	movs	r3, #1
 8002970:	4652      	mov	r2, sl
 8002972:	4649      	mov	r1, r9
 8002974:	4638      	mov	r0, r7
 8002976:	47c0      	blx	r8
 8002978:	3001      	adds	r0, #1
 800297a:	d103      	bne.n	8002984 <_printf_common+0xac>
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002984:	3501      	adds	r5, #1
 8002986:	e7c6      	b.n	8002916 <_printf_common+0x3e>
 8002988:	18e1      	adds	r1, r4, r3
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	2030      	movs	r0, #48	; 0x30
 800298e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002992:	4422      	add	r2, r4
 8002994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800299c:	3302      	adds	r3, #2
 800299e:	e7c7      	b.n	8002930 <_printf_common+0x58>
 80029a0:	2301      	movs	r3, #1
 80029a2:	4622      	mov	r2, r4
 80029a4:	4649      	mov	r1, r9
 80029a6:	4638      	mov	r0, r7
 80029a8:	47c0      	blx	r8
 80029aa:	3001      	adds	r0, #1
 80029ac:	d0e6      	beq.n	800297c <_printf_common+0xa4>
 80029ae:	3601      	adds	r6, #1
 80029b0:	e7d9      	b.n	8002966 <_printf_common+0x8e>
	...

080029b4 <_printf_i>:
 80029b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029b8:	7e0f      	ldrb	r7, [r1, #24]
 80029ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029bc:	2f78      	cmp	r7, #120	; 0x78
 80029be:	4691      	mov	r9, r2
 80029c0:	4680      	mov	r8, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	469a      	mov	sl, r3
 80029c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029ca:	d807      	bhi.n	80029dc <_printf_i+0x28>
 80029cc:	2f62      	cmp	r7, #98	; 0x62
 80029ce:	d80a      	bhi.n	80029e6 <_printf_i+0x32>
 80029d0:	2f00      	cmp	r7, #0
 80029d2:	f000 80d8 	beq.w	8002b86 <_printf_i+0x1d2>
 80029d6:	2f58      	cmp	r7, #88	; 0x58
 80029d8:	f000 80a3 	beq.w	8002b22 <_printf_i+0x16e>
 80029dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029e4:	e03a      	b.n	8002a5c <_printf_i+0xa8>
 80029e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029ea:	2b15      	cmp	r3, #21
 80029ec:	d8f6      	bhi.n	80029dc <_printf_i+0x28>
 80029ee:	a101      	add	r1, pc, #4	; (adr r1, 80029f4 <_printf_i+0x40>)
 80029f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029f4:	08002a4d 	.word	0x08002a4d
 80029f8:	08002a61 	.word	0x08002a61
 80029fc:	080029dd 	.word	0x080029dd
 8002a00:	080029dd 	.word	0x080029dd
 8002a04:	080029dd 	.word	0x080029dd
 8002a08:	080029dd 	.word	0x080029dd
 8002a0c:	08002a61 	.word	0x08002a61
 8002a10:	080029dd 	.word	0x080029dd
 8002a14:	080029dd 	.word	0x080029dd
 8002a18:	080029dd 	.word	0x080029dd
 8002a1c:	080029dd 	.word	0x080029dd
 8002a20:	08002b6d 	.word	0x08002b6d
 8002a24:	08002a91 	.word	0x08002a91
 8002a28:	08002b4f 	.word	0x08002b4f
 8002a2c:	080029dd 	.word	0x080029dd
 8002a30:	080029dd 	.word	0x080029dd
 8002a34:	08002b8f 	.word	0x08002b8f
 8002a38:	080029dd 	.word	0x080029dd
 8002a3c:	08002a91 	.word	0x08002a91
 8002a40:	080029dd 	.word	0x080029dd
 8002a44:	080029dd 	.word	0x080029dd
 8002a48:	08002b57 	.word	0x08002b57
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	1d1a      	adds	r2, r3, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	602a      	str	r2, [r5, #0]
 8002a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0a3      	b.n	8002ba8 <_printf_i+0x1f4>
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	6829      	ldr	r1, [r5, #0]
 8002a64:	0606      	lsls	r6, r0, #24
 8002a66:	f101 0304 	add.w	r3, r1, #4
 8002a6a:	d50a      	bpl.n	8002a82 <_printf_i+0xce>
 8002a6c:	680e      	ldr	r6, [r1, #0]
 8002a6e:	602b      	str	r3, [r5, #0]
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	da03      	bge.n	8002a7c <_printf_i+0xc8>
 8002a74:	232d      	movs	r3, #45	; 0x2d
 8002a76:	4276      	negs	r6, r6
 8002a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a7c:	485e      	ldr	r0, [pc, #376]	; (8002bf8 <_printf_i+0x244>)
 8002a7e:	230a      	movs	r3, #10
 8002a80:	e019      	b.n	8002ab6 <_printf_i+0x102>
 8002a82:	680e      	ldr	r6, [r1, #0]
 8002a84:	602b      	str	r3, [r5, #0]
 8002a86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a8a:	bf18      	it	ne
 8002a8c:	b236      	sxthne	r6, r6
 8002a8e:	e7ef      	b.n	8002a70 <_printf_i+0xbc>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	6820      	ldr	r0, [r4, #0]
 8002a94:	1d19      	adds	r1, r3, #4
 8002a96:	6029      	str	r1, [r5, #0]
 8002a98:	0601      	lsls	r1, r0, #24
 8002a9a:	d501      	bpl.n	8002aa0 <_printf_i+0xec>
 8002a9c:	681e      	ldr	r6, [r3, #0]
 8002a9e:	e002      	b.n	8002aa6 <_printf_i+0xf2>
 8002aa0:	0646      	lsls	r6, r0, #25
 8002aa2:	d5fb      	bpl.n	8002a9c <_printf_i+0xe8>
 8002aa4:	881e      	ldrh	r6, [r3, #0]
 8002aa6:	4854      	ldr	r0, [pc, #336]	; (8002bf8 <_printf_i+0x244>)
 8002aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8002aaa:	bf0c      	ite	eq
 8002aac:	2308      	moveq	r3, #8
 8002aae:	230a      	movne	r3, #10
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ab6:	6865      	ldr	r5, [r4, #4]
 8002ab8:	60a5      	str	r5, [r4, #8]
 8002aba:	2d00      	cmp	r5, #0
 8002abc:	bfa2      	ittt	ge
 8002abe:	6821      	ldrge	r1, [r4, #0]
 8002ac0:	f021 0104 	bicge.w	r1, r1, #4
 8002ac4:	6021      	strge	r1, [r4, #0]
 8002ac6:	b90e      	cbnz	r6, 8002acc <_printf_i+0x118>
 8002ac8:	2d00      	cmp	r5, #0
 8002aca:	d04d      	beq.n	8002b68 <_printf_i+0x1b4>
 8002acc:	4615      	mov	r5, r2
 8002ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8002ad6:	5dc7      	ldrb	r7, [r0, r7]
 8002ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002adc:	4637      	mov	r7, r6
 8002ade:	42bb      	cmp	r3, r7
 8002ae0:	460e      	mov	r6, r1
 8002ae2:	d9f4      	bls.n	8002ace <_printf_i+0x11a>
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d10b      	bne.n	8002b00 <_printf_i+0x14c>
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	07de      	lsls	r6, r3, #31
 8002aec:	d508      	bpl.n	8002b00 <_printf_i+0x14c>
 8002aee:	6923      	ldr	r3, [r4, #16]
 8002af0:	6861      	ldr	r1, [r4, #4]
 8002af2:	4299      	cmp	r1, r3
 8002af4:	bfde      	ittt	le
 8002af6:	2330      	movle	r3, #48	; 0x30
 8002af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002afc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b00:	1b52      	subs	r2, r2, r5
 8002b02:	6122      	str	r2, [r4, #16]
 8002b04:	f8cd a000 	str.w	sl, [sp]
 8002b08:	464b      	mov	r3, r9
 8002b0a:	aa03      	add	r2, sp, #12
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4640      	mov	r0, r8
 8002b10:	f7ff fee2 	bl	80028d8 <_printf_common>
 8002b14:	3001      	adds	r0, #1
 8002b16:	d14c      	bne.n	8002bb2 <_printf_i+0x1fe>
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	b004      	add	sp, #16
 8002b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b22:	4835      	ldr	r0, [pc, #212]	; (8002bf8 <_printf_i+0x244>)
 8002b24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b28:	6829      	ldr	r1, [r5, #0]
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b30:	6029      	str	r1, [r5, #0]
 8002b32:	061d      	lsls	r5, r3, #24
 8002b34:	d514      	bpl.n	8002b60 <_printf_i+0x1ac>
 8002b36:	07df      	lsls	r7, r3, #31
 8002b38:	bf44      	itt	mi
 8002b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8002b3e:	6023      	strmi	r3, [r4, #0]
 8002b40:	b91e      	cbnz	r6, 8002b4a <_printf_i+0x196>
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	f023 0320 	bic.w	r3, r3, #32
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	e7b0      	b.n	8002ab0 <_printf_i+0xfc>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f043 0320 	orr.w	r3, r3, #32
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	2378      	movs	r3, #120	; 0x78
 8002b58:	4828      	ldr	r0, [pc, #160]	; (8002bfc <_printf_i+0x248>)
 8002b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b5e:	e7e3      	b.n	8002b28 <_printf_i+0x174>
 8002b60:	0659      	lsls	r1, r3, #25
 8002b62:	bf48      	it	mi
 8002b64:	b2b6      	uxthmi	r6, r6
 8002b66:	e7e6      	b.n	8002b36 <_printf_i+0x182>
 8002b68:	4615      	mov	r5, r2
 8002b6a:	e7bb      	b.n	8002ae4 <_printf_i+0x130>
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	6826      	ldr	r6, [r4, #0]
 8002b70:	6961      	ldr	r1, [r4, #20]
 8002b72:	1d18      	adds	r0, r3, #4
 8002b74:	6028      	str	r0, [r5, #0]
 8002b76:	0635      	lsls	r5, r6, #24
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	d501      	bpl.n	8002b80 <_printf_i+0x1cc>
 8002b7c:	6019      	str	r1, [r3, #0]
 8002b7e:	e002      	b.n	8002b86 <_printf_i+0x1d2>
 8002b80:	0670      	lsls	r0, r6, #25
 8002b82:	d5fb      	bpl.n	8002b7c <_printf_i+0x1c8>
 8002b84:	8019      	strh	r1, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	6123      	str	r3, [r4, #16]
 8002b8a:	4615      	mov	r5, r2
 8002b8c:	e7ba      	b.n	8002b04 <_printf_i+0x150>
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	1d1a      	adds	r2, r3, #4
 8002b92:	602a      	str	r2, [r5, #0]
 8002b94:	681d      	ldr	r5, [r3, #0]
 8002b96:	6862      	ldr	r2, [r4, #4]
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f7fd fa50 	bl	8000040 <memchr>
 8002ba0:	b108      	cbz	r0, 8002ba6 <_printf_i+0x1f2>
 8002ba2:	1b40      	subs	r0, r0, r5
 8002ba4:	6060      	str	r0, [r4, #4]
 8002ba6:	6863      	ldr	r3, [r4, #4]
 8002ba8:	6123      	str	r3, [r4, #16]
 8002baa:	2300      	movs	r3, #0
 8002bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb0:	e7a8      	b.n	8002b04 <_printf_i+0x150>
 8002bb2:	6923      	ldr	r3, [r4, #16]
 8002bb4:	462a      	mov	r2, r5
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	4640      	mov	r0, r8
 8002bba:	47d0      	blx	sl
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	d0ab      	beq.n	8002b18 <_printf_i+0x164>
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	079b      	lsls	r3, r3, #30
 8002bc4:	d413      	bmi.n	8002bee <_printf_i+0x23a>
 8002bc6:	68e0      	ldr	r0, [r4, #12]
 8002bc8:	9b03      	ldr	r3, [sp, #12]
 8002bca:	4298      	cmp	r0, r3
 8002bcc:	bfb8      	it	lt
 8002bce:	4618      	movlt	r0, r3
 8002bd0:	e7a4      	b.n	8002b1c <_printf_i+0x168>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4632      	mov	r2, r6
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	4640      	mov	r0, r8
 8002bda:	47d0      	blx	sl
 8002bdc:	3001      	adds	r0, #1
 8002bde:	d09b      	beq.n	8002b18 <_printf_i+0x164>
 8002be0:	3501      	adds	r5, #1
 8002be2:	68e3      	ldr	r3, [r4, #12]
 8002be4:	9903      	ldr	r1, [sp, #12]
 8002be6:	1a5b      	subs	r3, r3, r1
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	dcf2      	bgt.n	8002bd2 <_printf_i+0x21e>
 8002bec:	e7eb      	b.n	8002bc6 <_printf_i+0x212>
 8002bee:	2500      	movs	r5, #0
 8002bf0:	f104 0619 	add.w	r6, r4, #25
 8002bf4:	e7f5      	b.n	8002be2 <_printf_i+0x22e>
 8002bf6:	bf00      	nop
 8002bf8:	08003351 	.word	0x08003351
 8002bfc:	08003362 	.word	0x08003362

08002c00 <_sbrk_r>:
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	4d06      	ldr	r5, [pc, #24]	; (8002c1c <_sbrk_r+0x1c>)
 8002c04:	2300      	movs	r3, #0
 8002c06:	4604      	mov	r4, r0
 8002c08:	4608      	mov	r0, r1
 8002c0a:	602b      	str	r3, [r5, #0]
 8002c0c:	f7ff fa4e 	bl	80020ac <_sbrk>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d102      	bne.n	8002c1a <_sbrk_r+0x1a>
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	b103      	cbz	r3, 8002c1a <_sbrk_r+0x1a>
 8002c18:	6023      	str	r3, [r4, #0]
 8002c1a:	bd38      	pop	{r3, r4, r5, pc}
 8002c1c:	20004ba4 	.word	0x20004ba4

08002c20 <__sread>:
 8002c20:	b510      	push	{r4, lr}
 8002c22:	460c      	mov	r4, r1
 8002c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c28:	f000 fab2 	bl	8003190 <_read_r>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	bfab      	itete	ge
 8002c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c32:	89a3      	ldrhlt	r3, [r4, #12]
 8002c34:	181b      	addge	r3, r3, r0
 8002c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c3a:	bfac      	ite	ge
 8002c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c3e:	81a3      	strhlt	r3, [r4, #12]
 8002c40:	bd10      	pop	{r4, pc}

08002c42 <__swrite>:
 8002c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c46:	461f      	mov	r7, r3
 8002c48:	898b      	ldrh	r3, [r1, #12]
 8002c4a:	05db      	lsls	r3, r3, #23
 8002c4c:	4605      	mov	r5, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	4616      	mov	r6, r2
 8002c52:	d505      	bpl.n	8002c60 <__swrite+0x1e>
 8002c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c58:	2302      	movs	r3, #2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f000 f9c8 	bl	8002ff0 <_lseek_r>
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c6a:	81a3      	strh	r3, [r4, #12]
 8002c6c:	4632      	mov	r2, r6
 8002c6e:	463b      	mov	r3, r7
 8002c70:	4628      	mov	r0, r5
 8002c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c76:	f000 b869 	b.w	8002d4c <_write_r>

08002c7a <__sseek>:
 8002c7a:	b510      	push	{r4, lr}
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c82:	f000 f9b5 	bl	8002ff0 <_lseek_r>
 8002c86:	1c43      	adds	r3, r0, #1
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	bf15      	itete	ne
 8002c8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c96:	81a3      	strheq	r3, [r4, #12]
 8002c98:	bf18      	it	ne
 8002c9a:	81a3      	strhne	r3, [r4, #12]
 8002c9c:	bd10      	pop	{r4, pc}

08002c9e <__sclose>:
 8002c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca2:	f000 b8d3 	b.w	8002e4c <_close_r>
	...

08002ca8 <__swbuf_r>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	460e      	mov	r6, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	4605      	mov	r5, r0
 8002cb0:	b118      	cbz	r0, 8002cba <__swbuf_r+0x12>
 8002cb2:	6983      	ldr	r3, [r0, #24]
 8002cb4:	b90b      	cbnz	r3, 8002cba <__swbuf_r+0x12>
 8002cb6:	f7ff fb81 	bl	80023bc <__sinit>
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <__swbuf_r+0x98>)
 8002cbc:	429c      	cmp	r4, r3
 8002cbe:	d12b      	bne.n	8002d18 <__swbuf_r+0x70>
 8002cc0:	686c      	ldr	r4, [r5, #4]
 8002cc2:	69a3      	ldr	r3, [r4, #24]
 8002cc4:	60a3      	str	r3, [r4, #8]
 8002cc6:	89a3      	ldrh	r3, [r4, #12]
 8002cc8:	071a      	lsls	r2, r3, #28
 8002cca:	d52f      	bpl.n	8002d2c <__swbuf_r+0x84>
 8002ccc:	6923      	ldr	r3, [r4, #16]
 8002cce:	b36b      	cbz	r3, 8002d2c <__swbuf_r+0x84>
 8002cd0:	6923      	ldr	r3, [r4, #16]
 8002cd2:	6820      	ldr	r0, [r4, #0]
 8002cd4:	1ac0      	subs	r0, r0, r3
 8002cd6:	6963      	ldr	r3, [r4, #20]
 8002cd8:	b2f6      	uxtb	r6, r6
 8002cda:	4283      	cmp	r3, r0
 8002cdc:	4637      	mov	r7, r6
 8002cde:	dc04      	bgt.n	8002cea <__swbuf_r+0x42>
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 f948 	bl	8002f78 <_fflush_r>
 8002ce8:	bb30      	cbnz	r0, 8002d38 <__swbuf_r+0x90>
 8002cea:	68a3      	ldr	r3, [r4, #8]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60a3      	str	r3, [r4, #8]
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	6022      	str	r2, [r4, #0]
 8002cf6:	701e      	strb	r6, [r3, #0]
 8002cf8:	6963      	ldr	r3, [r4, #20]
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	4283      	cmp	r3, r0
 8002cfe:	d004      	beq.n	8002d0a <__swbuf_r+0x62>
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	07db      	lsls	r3, r3, #31
 8002d04:	d506      	bpl.n	8002d14 <__swbuf_r+0x6c>
 8002d06:	2e0a      	cmp	r6, #10
 8002d08:	d104      	bne.n	8002d14 <__swbuf_r+0x6c>
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f000 f933 	bl	8002f78 <_fflush_r>
 8002d12:	b988      	cbnz	r0, 8002d38 <__swbuf_r+0x90>
 8002d14:	4638      	mov	r0, r7
 8002d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <__swbuf_r+0x9c>)
 8002d1a:	429c      	cmp	r4, r3
 8002d1c:	d101      	bne.n	8002d22 <__swbuf_r+0x7a>
 8002d1e:	68ac      	ldr	r4, [r5, #8]
 8002d20:	e7cf      	b.n	8002cc2 <__swbuf_r+0x1a>
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <__swbuf_r+0xa0>)
 8002d24:	429c      	cmp	r4, r3
 8002d26:	bf08      	it	eq
 8002d28:	68ec      	ldreq	r4, [r5, #12]
 8002d2a:	e7ca      	b.n	8002cc2 <__swbuf_r+0x1a>
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f000 f81e 	bl	8002d70 <__swsetup_r>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d0cb      	beq.n	8002cd0 <__swbuf_r+0x28>
 8002d38:	f04f 37ff 	mov.w	r7, #4294967295
 8002d3c:	e7ea      	b.n	8002d14 <__swbuf_r+0x6c>
 8002d3e:	bf00      	nop
 8002d40:	08003300 	.word	0x08003300
 8002d44:	08003320 	.word	0x08003320
 8002d48:	080032e0 	.word	0x080032e0

08002d4c <_write_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4d07      	ldr	r5, [pc, #28]	; (8002d6c <_write_r+0x20>)
 8002d50:	4604      	mov	r4, r0
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	602a      	str	r2, [r5, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f000 fa74 	bl	8003248 <_write>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_write_r+0x1e>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_write_r+0x1e>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	20004ba4 	.word	0x20004ba4

08002d70 <__swsetup_r>:
 8002d70:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <__swsetup_r+0xcc>)
 8002d72:	b570      	push	{r4, r5, r6, lr}
 8002d74:	681d      	ldr	r5, [r3, #0]
 8002d76:	4606      	mov	r6, r0
 8002d78:	460c      	mov	r4, r1
 8002d7a:	b125      	cbz	r5, 8002d86 <__swsetup_r+0x16>
 8002d7c:	69ab      	ldr	r3, [r5, #24]
 8002d7e:	b913      	cbnz	r3, 8002d86 <__swsetup_r+0x16>
 8002d80:	4628      	mov	r0, r5
 8002d82:	f7ff fb1b 	bl	80023bc <__sinit>
 8002d86:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <__swsetup_r+0xd0>)
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d10f      	bne.n	8002dac <__swsetup_r+0x3c>
 8002d8c:	686c      	ldr	r4, [r5, #4]
 8002d8e:	89a3      	ldrh	r3, [r4, #12]
 8002d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d94:	0719      	lsls	r1, r3, #28
 8002d96:	d42c      	bmi.n	8002df2 <__swsetup_r+0x82>
 8002d98:	06dd      	lsls	r5, r3, #27
 8002d9a:	d411      	bmi.n	8002dc0 <__swsetup_r+0x50>
 8002d9c:	2309      	movs	r3, #9
 8002d9e:	6033      	str	r3, [r6, #0]
 8002da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295
 8002daa:	e03e      	b.n	8002e2a <__swsetup_r+0xba>
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <__swsetup_r+0xd4>)
 8002dae:	429c      	cmp	r4, r3
 8002db0:	d101      	bne.n	8002db6 <__swsetup_r+0x46>
 8002db2:	68ac      	ldr	r4, [r5, #8]
 8002db4:	e7eb      	b.n	8002d8e <__swsetup_r+0x1e>
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <__swsetup_r+0xd8>)
 8002db8:	429c      	cmp	r4, r3
 8002dba:	bf08      	it	eq
 8002dbc:	68ec      	ldreq	r4, [r5, #12]
 8002dbe:	e7e6      	b.n	8002d8e <__swsetup_r+0x1e>
 8002dc0:	0758      	lsls	r0, r3, #29
 8002dc2:	d512      	bpl.n	8002dea <__swsetup_r+0x7a>
 8002dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dc6:	b141      	cbz	r1, 8002dda <__swsetup_r+0x6a>
 8002dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dcc:	4299      	cmp	r1, r3
 8002dce:	d002      	beq.n	8002dd6 <__swsetup_r+0x66>
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	f000 f991 	bl	80030f8 <_free_r>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002de0:	81a3      	strh	r3, [r4, #12]
 8002de2:	2300      	movs	r3, #0
 8002de4:	6063      	str	r3, [r4, #4]
 8002de6:	6923      	ldr	r3, [r4, #16]
 8002de8:	6023      	str	r3, [r4, #0]
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	f043 0308 	orr.w	r3, r3, #8
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	6923      	ldr	r3, [r4, #16]
 8002df4:	b94b      	cbnz	r3, 8002e0a <__swsetup_r+0x9a>
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e00:	d003      	beq.n	8002e0a <__swsetup_r+0x9a>
 8002e02:	4621      	mov	r1, r4
 8002e04:	4630      	mov	r0, r6
 8002e06:	f000 f92b 	bl	8003060 <__smakebuf_r>
 8002e0a:	89a0      	ldrh	r0, [r4, #12]
 8002e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e10:	f010 0301 	ands.w	r3, r0, #1
 8002e14:	d00a      	beq.n	8002e2c <__swsetup_r+0xbc>
 8002e16:	2300      	movs	r3, #0
 8002e18:	60a3      	str	r3, [r4, #8]
 8002e1a:	6963      	ldr	r3, [r4, #20]
 8002e1c:	425b      	negs	r3, r3
 8002e1e:	61a3      	str	r3, [r4, #24]
 8002e20:	6923      	ldr	r3, [r4, #16]
 8002e22:	b943      	cbnz	r3, 8002e36 <__swsetup_r+0xc6>
 8002e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e28:	d1ba      	bne.n	8002da0 <__swsetup_r+0x30>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	0781      	lsls	r1, r0, #30
 8002e2e:	bf58      	it	pl
 8002e30:	6963      	ldrpl	r3, [r4, #20]
 8002e32:	60a3      	str	r3, [r4, #8]
 8002e34:	e7f4      	b.n	8002e20 <__swsetup_r+0xb0>
 8002e36:	2000      	movs	r0, #0
 8002e38:	e7f7      	b.n	8002e2a <__swsetup_r+0xba>
 8002e3a:	bf00      	nop
 8002e3c:	2000000c 	.word	0x2000000c
 8002e40:	08003300 	.word	0x08003300
 8002e44:	08003320 	.word	0x08003320
 8002e48:	080032e0 	.word	0x080032e0

08002e4c <_close_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4d06      	ldr	r5, [pc, #24]	; (8002e68 <_close_r+0x1c>)
 8002e50:	2300      	movs	r3, #0
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	602b      	str	r3, [r5, #0]
 8002e58:	f000 f9ce 	bl	80031f8 <_close>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_close_r+0x1a>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_close_r+0x1a>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	20004ba4 	.word	0x20004ba4

08002e6c <__sflush_r>:
 8002e6c:	898a      	ldrh	r2, [r1, #12]
 8002e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e72:	4605      	mov	r5, r0
 8002e74:	0710      	lsls	r0, r2, #28
 8002e76:	460c      	mov	r4, r1
 8002e78:	d458      	bmi.n	8002f2c <__sflush_r+0xc0>
 8002e7a:	684b      	ldr	r3, [r1, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dc05      	bgt.n	8002e8c <__sflush_r+0x20>
 8002e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	dc02      	bgt.n	8002e8c <__sflush_r+0x20>
 8002e86:	2000      	movs	r0, #0
 8002e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e8e:	2e00      	cmp	r6, #0
 8002e90:	d0f9      	beq.n	8002e86 <__sflush_r+0x1a>
 8002e92:	2300      	movs	r3, #0
 8002e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e98:	682f      	ldr	r7, [r5, #0]
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	d032      	beq.n	8002f04 <__sflush_r+0x98>
 8002e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	075a      	lsls	r2, r3, #29
 8002ea4:	d505      	bpl.n	8002eb2 <__sflush_r+0x46>
 8002ea6:	6863      	ldr	r3, [r4, #4]
 8002ea8:	1ac0      	subs	r0, r0, r3
 8002eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002eac:	b10b      	cbz	r3, 8002eb2 <__sflush_r+0x46>
 8002eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eb0:	1ac0      	subs	r0, r0, r3
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eb8:	6a21      	ldr	r1, [r4, #32]
 8002eba:	4628      	mov	r0, r5
 8002ebc:	47b0      	blx	r6
 8002ebe:	1c43      	adds	r3, r0, #1
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	d106      	bne.n	8002ed2 <__sflush_r+0x66>
 8002ec4:	6829      	ldr	r1, [r5, #0]
 8002ec6:	291d      	cmp	r1, #29
 8002ec8:	d82c      	bhi.n	8002f24 <__sflush_r+0xb8>
 8002eca:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <__sflush_r+0x108>)
 8002ecc:	40ca      	lsrs	r2, r1
 8002ece:	07d6      	lsls	r6, r2, #31
 8002ed0:	d528      	bpl.n	8002f24 <__sflush_r+0xb8>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	6062      	str	r2, [r4, #4]
 8002ed6:	04d9      	lsls	r1, r3, #19
 8002ed8:	6922      	ldr	r2, [r4, #16]
 8002eda:	6022      	str	r2, [r4, #0]
 8002edc:	d504      	bpl.n	8002ee8 <__sflush_r+0x7c>
 8002ede:	1c42      	adds	r2, r0, #1
 8002ee0:	d101      	bne.n	8002ee6 <__sflush_r+0x7a>
 8002ee2:	682b      	ldr	r3, [r5, #0]
 8002ee4:	b903      	cbnz	r3, 8002ee8 <__sflush_r+0x7c>
 8002ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8002ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eea:	602f      	str	r7, [r5, #0]
 8002eec:	2900      	cmp	r1, #0
 8002eee:	d0ca      	beq.n	8002e86 <__sflush_r+0x1a>
 8002ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ef4:	4299      	cmp	r1, r3
 8002ef6:	d002      	beq.n	8002efe <__sflush_r+0x92>
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f000 f8fd 	bl	80030f8 <_free_r>
 8002efe:	2000      	movs	r0, #0
 8002f00:	6360      	str	r0, [r4, #52]	; 0x34
 8002f02:	e7c1      	b.n	8002e88 <__sflush_r+0x1c>
 8002f04:	6a21      	ldr	r1, [r4, #32]
 8002f06:	2301      	movs	r3, #1
 8002f08:	4628      	mov	r0, r5
 8002f0a:	47b0      	blx	r6
 8002f0c:	1c41      	adds	r1, r0, #1
 8002f0e:	d1c7      	bne.n	8002ea0 <__sflush_r+0x34>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0c4      	beq.n	8002ea0 <__sflush_r+0x34>
 8002f16:	2b1d      	cmp	r3, #29
 8002f18:	d001      	beq.n	8002f1e <__sflush_r+0xb2>
 8002f1a:	2b16      	cmp	r3, #22
 8002f1c:	d101      	bne.n	8002f22 <__sflush_r+0xb6>
 8002f1e:	602f      	str	r7, [r5, #0]
 8002f20:	e7b1      	b.n	8002e86 <__sflush_r+0x1a>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	e7ad      	b.n	8002e88 <__sflush_r+0x1c>
 8002f2c:	690f      	ldr	r7, [r1, #16]
 8002f2e:	2f00      	cmp	r7, #0
 8002f30:	d0a9      	beq.n	8002e86 <__sflush_r+0x1a>
 8002f32:	0793      	lsls	r3, r2, #30
 8002f34:	680e      	ldr	r6, [r1, #0]
 8002f36:	bf08      	it	eq
 8002f38:	694b      	ldreq	r3, [r1, #20]
 8002f3a:	600f      	str	r7, [r1, #0]
 8002f3c:	bf18      	it	ne
 8002f3e:	2300      	movne	r3, #0
 8002f40:	eba6 0807 	sub.w	r8, r6, r7
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	f1b8 0f00 	cmp.w	r8, #0
 8002f4a:	dd9c      	ble.n	8002e86 <__sflush_r+0x1a>
 8002f4c:	6a21      	ldr	r1, [r4, #32]
 8002f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f50:	4643      	mov	r3, r8
 8002f52:	463a      	mov	r2, r7
 8002f54:	4628      	mov	r0, r5
 8002f56:	47b0      	blx	r6
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	dc06      	bgt.n	8002f6a <__sflush_r+0xfe>
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	e78e      	b.n	8002e88 <__sflush_r+0x1c>
 8002f6a:	4407      	add	r7, r0
 8002f6c:	eba8 0800 	sub.w	r8, r8, r0
 8002f70:	e7e9      	b.n	8002f46 <__sflush_r+0xda>
 8002f72:	bf00      	nop
 8002f74:	20400001 	.word	0x20400001

08002f78 <_fflush_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	690b      	ldr	r3, [r1, #16]
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	b913      	cbnz	r3, 8002f88 <_fflush_r+0x10>
 8002f82:	2500      	movs	r5, #0
 8002f84:	4628      	mov	r0, r5
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	b118      	cbz	r0, 8002f92 <_fflush_r+0x1a>
 8002f8a:	6983      	ldr	r3, [r0, #24]
 8002f8c:	b90b      	cbnz	r3, 8002f92 <_fflush_r+0x1a>
 8002f8e:	f7ff fa15 	bl	80023bc <__sinit>
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <_fflush_r+0x6c>)
 8002f94:	429c      	cmp	r4, r3
 8002f96:	d11b      	bne.n	8002fd0 <_fflush_r+0x58>
 8002f98:	686c      	ldr	r4, [r5, #4]
 8002f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ef      	beq.n	8002f82 <_fflush_r+0xa>
 8002fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fa4:	07d0      	lsls	r0, r2, #31
 8002fa6:	d404      	bmi.n	8002fb2 <_fflush_r+0x3a>
 8002fa8:	0599      	lsls	r1, r3, #22
 8002faa:	d402      	bmi.n	8002fb2 <_fflush_r+0x3a>
 8002fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fae:	f7ff faa3 	bl	80024f8 <__retarget_lock_acquire_recursive>
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f7ff ff59 	bl	8002e6c <__sflush_r>
 8002fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fbc:	07da      	lsls	r2, r3, #31
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	d4e0      	bmi.n	8002f84 <_fflush_r+0xc>
 8002fc2:	89a3      	ldrh	r3, [r4, #12]
 8002fc4:	059b      	lsls	r3, r3, #22
 8002fc6:	d4dd      	bmi.n	8002f84 <_fflush_r+0xc>
 8002fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fca:	f7ff fa96 	bl	80024fa <__retarget_lock_release_recursive>
 8002fce:	e7d9      	b.n	8002f84 <_fflush_r+0xc>
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <_fflush_r+0x70>)
 8002fd2:	429c      	cmp	r4, r3
 8002fd4:	d101      	bne.n	8002fda <_fflush_r+0x62>
 8002fd6:	68ac      	ldr	r4, [r5, #8]
 8002fd8:	e7df      	b.n	8002f9a <_fflush_r+0x22>
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <_fflush_r+0x74>)
 8002fdc:	429c      	cmp	r4, r3
 8002fde:	bf08      	it	eq
 8002fe0:	68ec      	ldreq	r4, [r5, #12]
 8002fe2:	e7da      	b.n	8002f9a <_fflush_r+0x22>
 8002fe4:	08003300 	.word	0x08003300
 8002fe8:	08003320 	.word	0x08003320
 8002fec:	080032e0 	.word	0x080032e0

08002ff0 <_lseek_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4d07      	ldr	r5, [pc, #28]	; (8003010 <_lseek_r+0x20>)
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	4608      	mov	r0, r1
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	602a      	str	r2, [r5, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f000 f912 	bl	8003228 <_lseek>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	d102      	bne.n	800300e <_lseek_r+0x1e>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	b103      	cbz	r3, 800300e <_lseek_r+0x1e>
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	20004ba4 	.word	0x20004ba4

08003014 <__swhatbuf_r>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	460e      	mov	r6, r1
 8003018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800301c:	2900      	cmp	r1, #0
 800301e:	b096      	sub	sp, #88	; 0x58
 8003020:	4614      	mov	r4, r2
 8003022:	461d      	mov	r5, r3
 8003024:	da08      	bge.n	8003038 <__swhatbuf_r+0x24>
 8003026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	602a      	str	r2, [r5, #0]
 800302e:	061a      	lsls	r2, r3, #24
 8003030:	d410      	bmi.n	8003054 <__swhatbuf_r+0x40>
 8003032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003036:	e00e      	b.n	8003056 <__swhatbuf_r+0x42>
 8003038:	466a      	mov	r2, sp
 800303a:	f000 f8bb 	bl	80031b4 <_fstat_r>
 800303e:	2800      	cmp	r0, #0
 8003040:	dbf1      	blt.n	8003026 <__swhatbuf_r+0x12>
 8003042:	9a01      	ldr	r2, [sp, #4]
 8003044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800304c:	425a      	negs	r2, r3
 800304e:	415a      	adcs	r2, r3
 8003050:	602a      	str	r2, [r5, #0]
 8003052:	e7ee      	b.n	8003032 <__swhatbuf_r+0x1e>
 8003054:	2340      	movs	r3, #64	; 0x40
 8003056:	2000      	movs	r0, #0
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	b016      	add	sp, #88	; 0x58
 800305c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003060 <__smakebuf_r>:
 8003060:	898b      	ldrh	r3, [r1, #12]
 8003062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003064:	079d      	lsls	r5, r3, #30
 8003066:	4606      	mov	r6, r0
 8003068:	460c      	mov	r4, r1
 800306a:	d507      	bpl.n	800307c <__smakebuf_r+0x1c>
 800306c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003070:	6023      	str	r3, [r4, #0]
 8003072:	6123      	str	r3, [r4, #16]
 8003074:	2301      	movs	r3, #1
 8003076:	6163      	str	r3, [r4, #20]
 8003078:	b002      	add	sp, #8
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	ab01      	add	r3, sp, #4
 800307e:	466a      	mov	r2, sp
 8003080:	f7ff ffc8 	bl	8003014 <__swhatbuf_r>
 8003084:	9900      	ldr	r1, [sp, #0]
 8003086:	4605      	mov	r5, r0
 8003088:	4630      	mov	r0, r6
 800308a:	f7ff fa57 	bl	800253c <_malloc_r>
 800308e:	b948      	cbnz	r0, 80030a4 <__smakebuf_r+0x44>
 8003090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003094:	059a      	lsls	r2, r3, #22
 8003096:	d4ef      	bmi.n	8003078 <__smakebuf_r+0x18>
 8003098:	f023 0303 	bic.w	r3, r3, #3
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	81a3      	strh	r3, [r4, #12]
 80030a2:	e7e3      	b.n	800306c <__smakebuf_r+0xc>
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <__smakebuf_r+0x7c>)
 80030a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	6020      	str	r0, [r4, #0]
 80030ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b0:	81a3      	strh	r3, [r4, #12]
 80030b2:	9b00      	ldr	r3, [sp, #0]
 80030b4:	6163      	str	r3, [r4, #20]
 80030b6:	9b01      	ldr	r3, [sp, #4]
 80030b8:	6120      	str	r0, [r4, #16]
 80030ba:	b15b      	cbz	r3, 80030d4 <__smakebuf_r+0x74>
 80030bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030c0:	4630      	mov	r0, r6
 80030c2:	f000 f889 	bl	80031d8 <_isatty_r>
 80030c6:	b128      	cbz	r0, 80030d4 <__smakebuf_r+0x74>
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	89a0      	ldrh	r0, [r4, #12]
 80030d6:	4305      	orrs	r5, r0
 80030d8:	81a5      	strh	r5, [r4, #12]
 80030da:	e7cd      	b.n	8003078 <__smakebuf_r+0x18>
 80030dc:	08002355 	.word	0x08002355

080030e0 <__malloc_lock>:
 80030e0:	4801      	ldr	r0, [pc, #4]	; (80030e8 <__malloc_lock+0x8>)
 80030e2:	f7ff ba09 	b.w	80024f8 <__retarget_lock_acquire_recursive>
 80030e6:	bf00      	nop
 80030e8:	20004b98 	.word	0x20004b98

080030ec <__malloc_unlock>:
 80030ec:	4801      	ldr	r0, [pc, #4]	; (80030f4 <__malloc_unlock+0x8>)
 80030ee:	f7ff ba04 	b.w	80024fa <__retarget_lock_release_recursive>
 80030f2:	bf00      	nop
 80030f4:	20004b98 	.word	0x20004b98

080030f8 <_free_r>:
 80030f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d044      	beq.n	8003188 <_free_r+0x90>
 80030fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003102:	9001      	str	r0, [sp, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f1a1 0404 	sub.w	r4, r1, #4
 800310a:	bfb8      	it	lt
 800310c:	18e4      	addlt	r4, r4, r3
 800310e:	f7ff ffe7 	bl	80030e0 <__malloc_lock>
 8003112:	4a1e      	ldr	r2, [pc, #120]	; (800318c <_free_r+0x94>)
 8003114:	9801      	ldr	r0, [sp, #4]
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	b933      	cbnz	r3, 8003128 <_free_r+0x30>
 800311a:	6063      	str	r3, [r4, #4]
 800311c:	6014      	str	r4, [r2, #0]
 800311e:	b003      	add	sp, #12
 8003120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003124:	f7ff bfe2 	b.w	80030ec <__malloc_unlock>
 8003128:	42a3      	cmp	r3, r4
 800312a:	d908      	bls.n	800313e <_free_r+0x46>
 800312c:	6825      	ldr	r5, [r4, #0]
 800312e:	1961      	adds	r1, r4, r5
 8003130:	428b      	cmp	r3, r1
 8003132:	bf01      	itttt	eq
 8003134:	6819      	ldreq	r1, [r3, #0]
 8003136:	685b      	ldreq	r3, [r3, #4]
 8003138:	1949      	addeq	r1, r1, r5
 800313a:	6021      	streq	r1, [r4, #0]
 800313c:	e7ed      	b.n	800311a <_free_r+0x22>
 800313e:	461a      	mov	r2, r3
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	b10b      	cbz	r3, 8003148 <_free_r+0x50>
 8003144:	42a3      	cmp	r3, r4
 8003146:	d9fa      	bls.n	800313e <_free_r+0x46>
 8003148:	6811      	ldr	r1, [r2, #0]
 800314a:	1855      	adds	r5, r2, r1
 800314c:	42a5      	cmp	r5, r4
 800314e:	d10b      	bne.n	8003168 <_free_r+0x70>
 8003150:	6824      	ldr	r4, [r4, #0]
 8003152:	4421      	add	r1, r4
 8003154:	1854      	adds	r4, r2, r1
 8003156:	42a3      	cmp	r3, r4
 8003158:	6011      	str	r1, [r2, #0]
 800315a:	d1e0      	bne.n	800311e <_free_r+0x26>
 800315c:	681c      	ldr	r4, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	6053      	str	r3, [r2, #4]
 8003162:	4421      	add	r1, r4
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	e7da      	b.n	800311e <_free_r+0x26>
 8003168:	d902      	bls.n	8003170 <_free_r+0x78>
 800316a:	230c      	movs	r3, #12
 800316c:	6003      	str	r3, [r0, #0]
 800316e:	e7d6      	b.n	800311e <_free_r+0x26>
 8003170:	6825      	ldr	r5, [r4, #0]
 8003172:	1961      	adds	r1, r4, r5
 8003174:	428b      	cmp	r3, r1
 8003176:	bf04      	itt	eq
 8003178:	6819      	ldreq	r1, [r3, #0]
 800317a:	685b      	ldreq	r3, [r3, #4]
 800317c:	6063      	str	r3, [r4, #4]
 800317e:	bf04      	itt	eq
 8003180:	1949      	addeq	r1, r1, r5
 8003182:	6021      	streq	r1, [r4, #0]
 8003184:	6054      	str	r4, [r2, #4]
 8003186:	e7ca      	b.n	800311e <_free_r+0x26>
 8003188:	b003      	add	sp, #12
 800318a:	bd30      	pop	{r4, r5, pc}
 800318c:	20004b9c 	.word	0x20004b9c

08003190 <_read_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	4d07      	ldr	r5, [pc, #28]	; (80031b0 <_read_r+0x20>)
 8003194:	4604      	mov	r4, r0
 8003196:	4608      	mov	r0, r1
 8003198:	4611      	mov	r1, r2
 800319a:	2200      	movs	r2, #0
 800319c:	602a      	str	r2, [r5, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 f84a 	bl	8003238 <_read>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d102      	bne.n	80031ae <_read_r+0x1e>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	b103      	cbz	r3, 80031ae <_read_r+0x1e>
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	bd38      	pop	{r3, r4, r5, pc}
 80031b0:	20004ba4 	.word	0x20004ba4

080031b4 <_fstat_r>:
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	4d07      	ldr	r5, [pc, #28]	; (80031d4 <_fstat_r+0x20>)
 80031b8:	2300      	movs	r3, #0
 80031ba:	4604      	mov	r4, r0
 80031bc:	4608      	mov	r0, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	602b      	str	r3, [r5, #0]
 80031c2:	f000 f821 	bl	8003208 <_fstat>
 80031c6:	1c43      	adds	r3, r0, #1
 80031c8:	d102      	bne.n	80031d0 <_fstat_r+0x1c>
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	b103      	cbz	r3, 80031d0 <_fstat_r+0x1c>
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	bd38      	pop	{r3, r4, r5, pc}
 80031d2:	bf00      	nop
 80031d4:	20004ba4 	.word	0x20004ba4

080031d8 <_isatty_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4d06      	ldr	r5, [pc, #24]	; (80031f4 <_isatty_r+0x1c>)
 80031dc:	2300      	movs	r3, #0
 80031de:	4604      	mov	r4, r0
 80031e0:	4608      	mov	r0, r1
 80031e2:	602b      	str	r3, [r5, #0]
 80031e4:	f000 f818 	bl	8003218 <_isatty>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d102      	bne.n	80031f2 <_isatty_r+0x1a>
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	b103      	cbz	r3, 80031f2 <_isatty_r+0x1a>
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	20004ba4 	.word	0x20004ba4

080031f8 <_close>:
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <_close+0xc>)
 80031fa:	2258      	movs	r2, #88	; 0x58
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003202:	4770      	bx	lr
 8003204:	20004ba4 	.word	0x20004ba4

08003208 <_fstat>:
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <_fstat+0xc>)
 800320a:	2258      	movs	r2, #88	; 0x58
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f04f 30ff 	mov.w	r0, #4294967295
 8003212:	4770      	bx	lr
 8003214:	20004ba4 	.word	0x20004ba4

08003218 <_isatty>:
 8003218:	4b02      	ldr	r3, [pc, #8]	; (8003224 <_isatty+0xc>)
 800321a:	2258      	movs	r2, #88	; 0x58
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	2000      	movs	r0, #0
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20004ba4 	.word	0x20004ba4

08003228 <_lseek>:
 8003228:	4b02      	ldr	r3, [pc, #8]	; (8003234 <_lseek+0xc>)
 800322a:	2258      	movs	r2, #88	; 0x58
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f04f 30ff 	mov.w	r0, #4294967295
 8003232:	4770      	bx	lr
 8003234:	20004ba4 	.word	0x20004ba4

08003238 <_read>:
 8003238:	4b02      	ldr	r3, [pc, #8]	; (8003244 <_read+0xc>)
 800323a:	2258      	movs	r2, #88	; 0x58
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f04f 30ff 	mov.w	r0, #4294967295
 8003242:	4770      	bx	lr
 8003244:	20004ba4 	.word	0x20004ba4

08003248 <_write>:
 8003248:	4b02      	ldr	r3, [pc, #8]	; (8003254 <_write+0xc>)
 800324a:	2258      	movs	r2, #88	; 0x58
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f04f 30ff 	mov.w	r0, #4294967295
 8003252:	4770      	bx	lr
 8003254:	20004ba4 	.word	0x20004ba4

08003258 <_init>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr

08003264 <_fini>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr
